<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
 lang="en" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>
    The classic test command    [Bash Hackers Wiki]
  </title>

  <meta name="generator" content="DokuWiki"/>
<meta name="robots" content="index,follow"/>
<meta name="date" content="2013-04-14T14:37:42+0200"/>
<meta name="keywords" content="commands,classictest"/>
<link rel="search" type="application/opensearchdescription+xml" href="/lib/exe/opensearch.php" title="Bash Hackers Wiki"/>
<link rel="start" href="/"/>
<link rel="contents" href="/commands/classictest?do=index" title="Sitemap"/>
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="/feed.php"/>
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="/feed.php?mode=list&amp;ns=commands"/>
<link rel="alternate" type="text/html" title="Plain HTML" href="/_export/xhtml/commands/classictest"/>
<link rel="alternate" type="text/plain" title="Wiki Markup" href="/_export/raw/commands/classictest"/>
<link rel="canonical" href="http://wiki.bash-hackers.org/commands/classictest"/>
<link rel="stylesheet" media="screen" type="text/css" href="/lib/exe/css.php?t=arctic&amp;tseed=1371073848"/>
<link rel="stylesheet" media="all" type="text/css" href="/lib/exe/css.php?s=all&amp;t=arctic&amp;tseed=1371073848"/>
<link rel="stylesheet" media="print" type="text/css" href="/lib/exe/css.php?s=print&amp;t=arctic&amp;tseed=1371073848"/>
<script type="text/javascript"><!--//--><![CDATA[//><!--
var NS='commands';var JSINFO = {"id":"commands:classictest","namespace":"commands"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="/lib/exe/js.php?tseed=1371073848"></script>
<script type="text/javascript" charset="utf-8"><!--//--><![CDATA[//><!--
NS = "commands";var table_toolbar = [{"title":"Toggle header state","key":"H","icon":"..\/..\/plugins\/edittable\/images\/text_heading.png","type":"toggletag"},{"title":"Left-align cell","key":"N","icon":"..\/..\/plugins\/edittable\/images\/a_left.png","type":"val","prop":"align","class":"separator","val":"left"},{"title":"Center cell","key":"M","icon":"..\/..\/plugins\/edittable\/images\/a_center.png","type":"val","prop":"align","val":"center"},{"title":"Right-align cell","key":"R","icon":"..\/..\/plugins\/edittable\/images\/a_right.png","type":"val","prop":"align","val":"right"},{"title":"Increase colspan","icon":"..\/..\/plugins\/edittable\/images\/merge_right.png","type":"span","class":"separator","target":"col","ops":"+"},{"title":"Reduce colspan","icon":"..\/..\/plugins\/edittable\/images\/split_right.png","type":"span","target":"col","ops":"-"},{"title":"Increase rowspan","icon":"..\/..\/plugins\/edittable\/images\/merge_down.png","type":"span","class":"separator","target":"row","ops":"+"},{"title":"Reduce rowspan","icon":"..\/..\/plugins\/edittable\/images\/split_down.png","type":"span","target":"row","ops":"-"},{"title":"Add row below","icon":"..\/..\/plugins\/edittable\/images\/row_insert.png","type":"structure","class":"separator","target":"row","ops":"+"},{"title":"Remove row","icon":"..\/..\/plugins\/edittable\/images\/row_delete.png","type":"structure","target":"row","ops":"-"},{"title":"Add column on the right","icon":"..\/..\/plugins\/edittable\/images\/column_add.png","type":"structure","class":"separator","target":"col","ops":"+"},{"title":"Remove column","icon":"..\/..\/plugins\/edittable\/images\/column_delete.png","type":"structure","target":"col","ops":"-"}];
var toolbar = [{"type":"format","title":"Bold Text","icon":"bold.png","key":"b","open":"**","close":"**","block":false},{"type":"format","title":"Italic Text","icon":"italic.png","key":"i","open":"\/\/","close":"\/\/","block":false},{"type":"format","title":"Underlined Text","icon":"underline.png","key":"u","open":"__","close":"__","block":false},{"type":"format","title":"Code Text","icon":"mono.png","key":"c","open":"''","close":"''","block":false},{"type":"format","title":"Strike-through Text","icon":"strike.png","key":"d","open":"<del>","close":"<\/del>","block":false},{"type":"autohead","title":"Same Level Headline","icon":"hequal.png","key":"8","text":"Headline","mod":0,"block":true},{"type":"autohead","title":"Lower Headline","icon":"hminus.png","key":"9","text":"Headline","mod":1,"block":true},{"type":"autohead","title":"Higher Headline","icon":"hplus.png","key":"0","text":"Headline","mod":-1,"block":true},{"type":"picker","title":"Select Headline","icon":"h.png","class":"pk_hl","list":[{"type":"format","title":"Level 1 Headline","icon":"h1.png","key":"1","open":"====== ","close":" ======\\n"},{"type":"format","title":"Level 2 Headline","icon":"h2.png","key":"2","open":"===== ","close":" =====\\n"},{"type":"format","title":"Level 3 Headline","icon":"h3.png","key":"3","open":"==== ","close":" ====\\n"},{"type":"format","title":"Level 4 Headline","icon":"h4.png","key":"4","open":"=== ","close":" ===\\n"},{"type":"format","title":"Level 5 Headline","icon":"h5.png","key":"5","open":"== ","close":" ==\\n"}],"block":true},{"type":"format","title":"External Link","icon":"linkextern.png","open":"[[","close":"]]","sample":"http:\/\/example.com|External Link","block":false},{"type":"formatln","title":"Ordered List Item","icon":"ol.png","open":"  - ","close":"","key":"-","block":true},{"type":"formatln","title":"Unordered List Item","icon":"ul.png","open":"  * ","close":"","key":".","block":true},{"type":"insert","title":"Horizontal Rule","icon":"hr.png","insert":"\\n----\\n","block":true},{"type":"picker","title":"Smileys","icon":"smiley.png","list":{"8-)":"icon_cool.gif","8-O":"icon_eek.gif","8-o":"icon_eek.gif",":-(":"icon_sad.gif",":-)":"icon_smile.gif","=)":"icon_smile2.gif",":-\/":"icon_doubt.gif",":-\\":"icon_doubt2.gif",":-?":"icon_confused.gif",":-D":"icon_biggrin.gif",":-P":"icon_razz.gif",":-o":"icon_surprised.gif",":-O":"icon_surprised.gif",":-x":"icon_silenced.gif",":-X":"icon_silenced.gif",":-|":"icon_neutral.gif",";-)":"icon_wink.gif","m(":"facepalm.gif","^_^":"icon_fun.gif",":?:":"icon_question.gif",":!:":"icon_exclaim.gif","LOL":"icon_lol.gif","FIXME":"fixme.gif","DELETEME":"delete.gif",":UPDATE:":"update.gif",":NEW:":"new.gif",":V4:":"v4logo_short.gif"},"icobase":"smileys","block":false},{"type":"picker","title":"Special Chars","icon":"chars.png","list":["\u00c0","\u00e0","\u00c1","\u00e1","\u00c2","\u00e2","\u00c3","\u00e3","\u00c4","\u00e4","\u01cd","\u01ce","\u0102","\u0103","\u00c5","\u00e5","\u0100","\u0101","\u0104","\u0105","\u00c6","\u00e6","\u0106","\u0107","\u00c7","\u00e7","\u010c","\u010d","\u0108","\u0109","\u010a","\u010b","\u00d0","\u0111","\u00f0","\u010e","\u010f","\u00c8","\u00e8","\u00c9","\u00e9","\u00ca","\u00ea","\u00cb","\u00eb","\u011a","\u011b","\u0112","\u0113","\u0116","\u0117","\u0118","\u0119","\u0122","\u0123","\u011c","\u011d","\u011e","\u011f","\u0120","\u0121","\u0124","\u0125","\u00cc","\u00ec","\u00cd","\u00ed","\u00ce","\u00ee","\u00cf","\u00ef","\u01cf","\u01d0","\u012a","\u012b","\u0130","\u0131","\u012e","\u012f","\u0134","\u0135","\u0136","\u0137","\u0139","\u013a","\u013b","\u013c","\u013d","\u013e","\u0141","\u0142","\u013f","\u0140","\u0143","\u0144","\u00d1","\u00f1","\u0145","\u0146","\u0147","\u0148","\u00d2","\u00f2","\u00d3","\u00f3","\u00d4","\u00f4","\u00d5","\u00f5","\u00d6","\u00f6","\u01d1","\u01d2","\u014c","\u014d","\u0150","\u0151","\u0152","\u0153","\u00d8","\u00f8","\u0154","\u0155","\u0156","\u0157","\u0158","\u0159","\u015a","\u015b","\u015e","\u015f","\u0160","\u0161","\u015c","\u015d","\u0162","\u0163","\u0164","\u0165","\u00d9","\u00f9","\u00da","\u00fa","\u00db","\u00fb","\u00dc","\u00fc","\u01d3","\u01d4","\u016c","\u016d","\u016a","\u016b","\u016e","\u016f","\u01d6","\u01d8","\u01da","\u01dc","\u0172","\u0173","\u0170","\u0171","\u0174","\u0175","\u00dd","\u00fd","\u0178","\u00ff","\u0176","\u0177","\u0179","\u017a","\u017d","\u017e","\u017b","\u017c","\u00de","\u00fe","\u00df","\u0126","\u0127","\u00bf","\u00a1","\u00a2","\u00a3","\u00a4","\u00a5","\u20ac","\u00a6","\u00a7","\u00aa","\u00ac","\u00af","\u00b0","\u00b1","\u00f7","\u2030","\u00bc","\u00bd","\u00be","\u00b9","\u00b2","\u00b3","\u00b5","\u00b6","\u2020","\u2021","\u00b7","\u2022","\u00ba","\u2200","\u2202","\u2203","\u018f","\u0259","\u2205","\u2207","\u2208","\u2209","\u220b","\u220f","\u2211","\u203e","\u2212","\u2217","\u00d7","\u2044","\u221a","\u221d","\u221e","\u2220","\u2227","\u2228","\u2229","\u222a","\u222b","\u2234","\u223c","\u2245","\u2248","\u2260","\u2261","\u2264","\u2265","\u2282","\u2283","\u2284","\u2286","\u2287","\u2295","\u2297","\u22a5","\u22c5","\u25ca","\u2118","\u2111","\u211c","\u2135","\u2660","\u2663","\u2665","\u2666","\u03b1","\u03b2","\u0393","\u03b3","\u0394","\u03b4","\u03b5","\u03b6","\u03b7","\u0398","\u03b8","\u03b9","\u03ba","\u039b","\u03bb","\u03bc","\u039e","\u03be","\u03a0","\u03c0","\u03c1","\u03a3","\u03c3","\u03a4","\u03c4","\u03c5","\u03a6","\u03c6","\u03c7","\u03a8","\u03c8","\u03a9","\u03c9","\u2605","\u2606","\u260e","\u261a","\u261b","\u261c","\u261d","\u261e","\u261f","\u2639","\u263a","\u2714","\u2718","\u201e","\u201c","\u201d","\u201a","\u2018","\u2019","\u00ab","\u00bb","\u2039","\u203a","\u2014","\u2013","\u2026","\u2190","\u2191","\u2192","\u2193","\u2194","\u21d0","\u21d1","\u21d2","\u21d3","\u21d4","\u00a9","\u2122","\u00ae","\u2032","\u2033","[","]","{","}","~","(",")","%","\u00a7","$","#","|","@"],"block":false},{"type":"picker","title":"Wrap Plugin","icon":"..\/..\/plugins\/wrap\/images\/toolbar\/picker.png","list":[{"type":"format","title":"column","icon":"..\/..\/plugins\/wrap\/images\/toolbar\/column.png","open":"<WRAP column 30%>\\n","close":"\\n<\/WRAP>\\n"},{"type":"format","title":"simple centered box","icon":"..\/..\/plugins\/wrap\/images\/toolbar\/box.png","open":"<WRAP center round box 60%>\\n","close":"\\n<\/WRAP>\\n"},{"type":"format","title":"info box","icon":"..\/..\/plugins\/wrap\/images\/note\/16\/info.png","open":"<WRAP center round info 60%>\\n","close":"\\n<\/WRAP>\\n"},{"type":"format","title":"tip box","icon":"..\/..\/plugins\/wrap\/images\/note\/16\/tip.png","open":"<WRAP center round tip 60%>\\n","close":"\\n<\/WRAP>\\n"},{"type":"format","title":"important box","icon":"..\/..\/plugins\/wrap\/images\/note\/16\/important.png","open":"<WRAP center round important 60%>\\n","close":"\\n<\/WRAP>\\n"},{"type":"format","title":"alert box","icon":"..\/..\/plugins\/wrap\/images\/note\/16\/alert.png","open":"<WRAP center round alert 60%>\\n","close":"\\n<\/WRAP>\\n"},{"type":"format","title":"help box","icon":"..\/..\/plugins\/wrap\/images\/note\/16\/help.png","open":"<WRAP center round help 60%>\\n","close":"\\n<\/WRAP>\\n"},{"type":"format","title":"download box","icon":"..\/..\/plugins\/wrap\/images\/note\/16\/download.png","open":"<WRAP center round download 60%>\\n","close":"\\n<\/WRAP>\\n"},{"type":"format","title":"todo box","icon":"..\/..\/plugins\/wrap\/images\/note\/16\/todo.png","open":"<WRAP center round todo 60%>\\n","close":"\\n<\/WRAP>\\n"},{"type":"insert","title":"clear floats","icon":"..\/..\/plugins\/wrap\/images\/toolbar\/clear.png","insert":"<WRAP clear><\/WRAP>\\n"},{"type":"format","title":"especially emphasised","icon":"..\/..\/plugins\/wrap\/images\/toolbar\/em.png","open":"<wrap em>","close":"<\/wrap>"},{"type":"format","title":"highlighted","icon":"..\/..\/plugins\/wrap\/images\/toolbar\/hi.png","open":"<wrap hi>","close":"<\/wrap>"},{"type":"format","title":"less significant","icon":"..\/..\/plugins\/wrap\/images\/toolbar\/lo.png","open":"<wrap lo>","close":"<\/wrap>"}]},{"title":"Insert a new table","type":"insertTable","icon":"..\/..\/plugins\/edittable\/images\/add_table.png"},{"type":"format","title":"Mark text as key press","icon":"..\/..\/plugins\/keyboard\/keyboard.png","open":"<key>","close":"<\/key>"}];

//--><!]]></script>

  <link rel="shortcut icon" href="/lib/tpl/arctic/images/favicon.ico" />

  
</head>
<body>
<div id="wrapper">
  <div class="dokuwiki">

    <div class="info">- Article pages now have a discussion option at the bottom (moderated/captcha, but no registration needed)</div>
    <div class="stylehead">
      <div class="header">
        <div class="pagename">
          [[<a href="/commands/classictest?do=backlink" >The classic test command</a>]]
        </div>
        <div class="logo">
          <a href="/"  name="dokuwiki__top" accesskey="h" title="[ALT+H]">Bash Hackers Wiki</a>        </div>
      </div>
    
       
      <div class="breadcrumbs">
        <span class="bchead">You are here: </span><a href="/start" class="wikilink1" title="start">Bash Hackers Wiki Frontpage</a> &raquo; <a href="/commands/start" class="wikilink2" title="commands:start" rel="nofollow">commands</a> &raquo; <span class="curid"><a href="/commands/classictest" class="wikilink1" title="commands:classictest">The classic test command</a></span>      </div>
      
            </div>

                  <div class="bar" id="bar__top">
        <div class="bar-left">
          <form class="button btn_source" method="post" action="/commands/classictest"><div class="no"><input type="hidden" name="do" value="edit" /><input type="hidden" name="rev" value="" /><input type="submit" value="Show pagesource" class="button" accesskey="v" title="Show pagesource [V]" /></div></form><form class="button btn_revs" method="get" action="/commands/classictest"><div class="no"><input type="hidden" name="do" value="revisions" /><input type="submit" value="Old revisions" class="button" accesskey="o" title="Old revisions [O]" /></div></form>        </div>
        <div class="bar-right">
          <form class="button btn_recent" method="get" action="/commands/classictest"><div class="no"><input type="hidden" name="do" value="recent" /><input type="submit" value="Recent changes" class="button" accesskey="r" title="Recent changes [R]" /></div></form><form class="button btn_index" method="get" action="/commands/classictest"><div class="no"><input type="hidden" name="do" value="index" /><input type="submit" value="Sitemap" class="button" accesskey="x" title="Sitemap [X]" /></div></form><form class="button btn_login" method="get" action="/commands/classictest"><div class="no"><input type="hidden" name="do" value="login" /><input type="hidden" name="sectok" value="df1d60927cc448f2d7982fef959199b8" /><input type="submit" value="Login" class="button" title="Login" /></div></form><form action="/" accept-charset="utf-8" class="search" id="dw__search" method="get"><div class="no"><input type="hidden" name="do" value="search" /><input type="text" id="qsearch__in" accesskey="f" name="id" class="edit" title="[F]" /><input type="submit" value="Search" class="button" title="Search" /><div id="qsearch__out" class="ajax_qsearch JSpopup"></div></div></form>        </div>
    </div>
        
    
    
          <div class="page">
        <!-- TOC START -->
<div class="toc">
<div class="tocheader toctoggle" id="toc__header">Table of Contents</div>
<div id="toc__inside">

<ul class="toc">
<li class="level1"><div class="li"><span class="li"><a href="#the_classic_test_command" class="toc">The classic test command</a></span></div>
<ul class="toc">
<li class="level2"><div class="li"><span class="li"><a href="#general_syntax" class="toc">General syntax</a></span></div></li>
<li class="level2"><div class="li"><span class="li"><a href="#file_tests" class="toc">File tests</a></span></div></li>
<li class="level2"><div class="li"><span class="li"><a href="#string_tests" class="toc">String tests</a></span></div></li>
<li class="level2"><div class="li"><span class="li"><a href="#arithmetic_tests" class="toc">Arithmetic tests</a></span></div></li>
<li class="level2"><div class="li"><span class="li"><a href="#misc_syntax" class="toc">Misc syntax</a></span></div></li>
<li class="level2"><div class="li"><span class="li"><a href="#number_of_arguments_rules" class="toc">Number of Arguments Rules</a></span></div></li>
<li class="level2"><div class="li"><span class="li"><a href="#and_and_or" class="toc">AND and OR</a></span></div>
<ul class="toc">
<li class="level3"><div class="li"><span class="li"><a href="#the_prefered_way" class="toc">The Prefered Way</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="#the_other_waya_and_-o" class="toc">The other way: -a and -o</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="#why_you_should_avoid_using_-a_and_-o" class="toc">Why you should avoid using -a and -o</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="#precedence_and_parenthesis" class="toc">Precedence and Parenthesis</a></span></div></li>
</ul>
</li>
<li class="level2"><div class="li"><span class="li"><a href="#not" class="toc">NOT</a></span></div></li>
<li class="level2"><div class="li"><span class="li"><a href="#pitfalls_summarized" class="toc">Pitfalls summarized</a></span></div>
<ul class="toc">
<li class="level3"><div class="li"><span class="li"><a href="#general" class="toc">General</a></span></div></li>
</ul>
</li>
<li class="level2"><div class="li"><span class="li"><a href="#code_examples" class="toc">Code examples</a></span></div>
<ul class="toc">
<li class="level3"><div class="li"><span class="li"><a href="#snipplets" class="toc">Snipplets</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="#listing_directories" class="toc">Listing directories</a></span></div></li>
</ul>
</li>
<li class="level2"><div class="li"><span class="li"><a href="#see_also" class="toc">See also</a></span></div></li>
</ul>
</li>
<li class="level1"><div class="li"><span class="li"><a href="#discussion__section" class="toc">Discussion</a></span></div></li>
</ul>
</div>
</div>
<!-- TOC END -->

<h1 class="sectionedit1"><a name="the_classic_test_command" id="the_classic_test_command">The classic test command</a></h1>
<div class="level1">

<p>
<code>test &lt;EXPRESSION&gt;</code>
</p>

<p>
<code>[ &lt;EXPRESSION&gt; ]</code>
</p>

</div>

<h2 class="sectionedit2"><a name="general_syntax" id="general_syntax">General syntax</a></h2>
<div class="level2">

<p>
This command allows you to do various tests and sets its exit code to 0 (<em>TRUE</em>) or 1 (<em>FALSE</em>) whenever such a test succeeds or not. Using this exit code, it&#039;s possible to let Bash react on the result of such a test, here by using the command in an if-statement:
<pre class="code">#!/bin/bash
# test if /etc/passwd exists

if test -e /etc/passwd; then
  echo &quot;Alright man...&quot; &gt;&amp;2
else
  echo &quot;Yuck! Where is it??&quot; &gt;&amp;2
  exit 1
fi</pre>

</p>

<p>
The syntax of the test command is relatively easy. Usually it&#039;s the command name &quot;<code>test</code>&quot; followed by a test type (here &quot;<code>-e</code>&quot; for &quot;file exists&quot;) followed by test-type-specific values (here the filename to check, &quot;<code>/etc/passwd</code>&quot;).
</p>

<p>
There&#039;s a second standardized command that does exactly the same: the command &quot;<code>[</code>&quot; - the difference just is that it&#039;s called &quot;<code>[</code>&quot; and the last argument to the command must be a &quot;<code>]</code>&quot;: It forms &quot;<code><strong>[ &lt;EXPRESSION&gt; ]</strong></code>&quot;
</p>

<p>
Let&#039;s rewrite the above example to use it:
<pre class="code">#!/bin/bash
# test if /etc/passwd exists

if [ -e /etc/passwd ]; then
  echo &quot;Alright man...&quot; &gt;&amp;2
else
  echo &quot;Yuck! Where is it??&quot; &gt;&amp;2
  exit 1
fi</pre>

One might <strong>think</strong> now that these &quot;[&quot; and &quot;]&quot; belong to the syntax of Bash&#039;s if-clause: <strong>No they don&#039;t! It&#039;s a simple, ordinary command, still!</strong>
</p>

<p>
Another thing you have to remember is that if the test command wants one parameter for a test, you have to give it one parameter. Let&#039;s check for some of your music files:
<pre class="code">#!/bin/bash

mymusic=&quot;/data/music/Van Halen/Van Halen - Right Now.mp3&quot;

if [ -e &quot;$mymusic&quot; ]; then
  echo &quot;Let&#039;s rock&quot; &gt;&amp;2
else
  echo &quot;No music today, sorry...&quot; &gt;&amp;2
  exit 1
fi</pre>

As you definitely noted, the filename contains spaces. Since we call a normal ordinary command (&quot;test&quot; or &quot;[&quot;) the shell will word-split the expansion of the variable <code>mymusic</code>: You need to quote it when you don&#039;t want the <code>test</code>-command to complain about too many arguments for this test-type! If you didn&#039;t understand it, please read the <a href="/syntax/words" class="wikilink1" title="syntax:words"> article about words...</a>
</p>

<p>
Please also note that the file-tests want <strong>one filename</strong> to test. Don&#039;t give a glob (filename-wildcards) as it can expand to many filenames ⇒ <strong>too many arguments!</strong>
</p>

<p>
<em class="u"><strong>Another common mistake</strong></em> is to provide too <strong>few</strong> arguments:
<pre class="code">[ &quot;$mystring&quot;!=&quot;test&quot; ]</pre>

This provides exactly <strong>one</strong> test-argument to the command. With one parameter, it defaults to the <code>-n</code> test: It tests if a provided string is empty (<code>FALSE</code>) or not (<code>TRUE</code>) - due to the lack of <strong>spaces to separate the arguments</strong> the shown command always ends <code>TRUE</code>!
</p>

<p>
Well, I addressed several basic rules, now let&#039;s see what the test-command can do for you. The Bash test-types can be split into several sections: <strong>file tests</strong>, <strong>string tests</strong>, <strong>arithmetic tests</strong>, <strong>misc tests</strong>.
 Below, the tests marked with <img src="/lib/images/smileys/icon_exclaim.gif" class="middle" alt=":!:" /> are non-standard tests (i.e. not in SUS/POSIX/etc..).
</p>

</div>

<h2 class="sectionedit3"><a name="file_tests" id="file_tests">File tests</a></h2>
<div class="level2">

<p>
This section probably holds the most tests, I&#039;ll list them in some logical order. Since Bash 4.1, all tests related to permissions respect ACLs, if the underlying filesystem/<acronym title="Operating System">OS</acronym> supports them.
</p>
<div class="table sectionedit4"><table class="inline">
	<tr class="row0">
		<th class="col0">Operator syntax</th><th class="col1">Description</th><td class="col2"></td>
	</tr>
	<tr class="row1">
		<td class="col0"><strong>-a</strong> &lt;FILE&gt;</td><td class="col1">True if &lt;FILE&gt; exists. <img src="/lib/images/smileys/icon_exclaim.gif" class="middle" alt=":!:" /> (not recommended, may collide with <code>-a</code> for <code>AND</code>, see below)</td><td class="col2"></td>
	</tr>
	<tr class="row2">
		<td class="col0"><strong>-e</strong> &lt;FILE&gt;</td><td class="col1">True if &lt;FILE&gt; exists.</td><td class="col2"></td>
	</tr>
	<tr class="row3">
		<td class="col0"><strong>-f</strong> &lt;FILE&gt;</td><td class="col1">True, if &lt;FILE&gt; exists and is a <strong>regular</strong> file.</td><td class="col2"></td>
	</tr>
	<tr class="row4">
		<td class="col0"><strong>-d</strong> &lt;FILE&gt;</td><td class="col1" colspan="2">True, if &lt;FILE&gt; exists and is a <strong>directory</strong>.</td>
	</tr>
	<tr class="row5">
		<td class="col0"><strong>-c</strong> &lt;FILE&gt;</td><td class="col1">True, if &lt;FILE&gt; exists and is a <strong>character special</strong> file.</td><td class="col2"></td>
	</tr>
	<tr class="row6">
		<td class="col0"><strong>-b</strong> &lt;FILE&gt;</td><td class="col1">True, if &lt;FILE&gt; exists and is a <strong>block special</strong> file.</td><td class="col2"></td>
	</tr>
	<tr class="row7">
		<td class="col0"><strong>-p</strong> &lt;FILE&gt;</td><td class="col1">True, if &lt;FILE&gt; exists and is a <strong>named pipe</strong> (FIFO).</td><td class="col2"></td>
	</tr>
	<tr class="row8">
		<td class="col0"><strong>-S</strong> &lt;FILE&gt;</td><td class="col1">True, if &lt;FILE&gt; exists and is a <strong>socket</strong> file.</td><td class="col2"></td>
	</tr>
	<tr class="row9">
		<td class="col0"><strong>-L</strong> &lt;FILE&gt;</td><td class="col1">True, if &lt;FILE&gt; exists and is a <strong>symbolic link</strong>.</td><td class="col2"></td>
	</tr>
	<tr class="row10">
		<td class="col0"><strong>-h</strong> &lt;FILE&gt;</td><td class="col1">True, if &lt;FILE&gt; exists and is a <strong>symbolic link</strong>.</td><td class="col2"></td>
	</tr>
	<tr class="row11">
		<td class="col0"><strong>-g</strong> &lt;FILE&gt;</td><td class="col1">True, if &lt;FILE&gt; exists and has <strong>sgid bit</strong> set.</td><td class="col2"></td>
	</tr>
	<tr class="row12">
		<td class="col0"><strong>-u</strong> &lt;FILE&gt;</td><td class="col1">True, if &lt;FILE&gt; exists and has <strong>suid bit</strong> set.</td><td class="col2"></td>
	</tr>
	<tr class="row13">
		<td class="col0"><strong>-r</strong> &lt;FILE&gt;</td><td class="col1">True, if &lt;FILE&gt; exists and is <strong>readable</strong>.</td><td class="col2"></td>
	</tr>
	<tr class="row14">
		<td class="col0"><strong>-w</strong> &lt;FILE&gt;</td><td class="col1">True, if &lt;FILE&gt; exists and is <strong>writable</strong>.</td><td class="col2"></td>
	</tr>
	<tr class="row15">
		<td class="col0"><strong>-x</strong> &lt;FILE&gt;</td><td class="col1">True, if &lt;FILE&gt; exists and is <strong>executable</strong>.</td><td class="col2"></td>
	</tr>
	<tr class="row16">
		<td class="col0"><strong>-s</strong> &lt;FILE&gt;</td><td class="col1">True, if &lt;FILE&gt; exists and has size bigger than 0 (<strong>not empty</strong>).</td><td class="col2"></td>
	</tr>
	<tr class="row17">
		<td class="col0"><strong>-t</strong> &lt;fd&gt;</td><td class="col1">True, if file descriptor &lt;fd&gt; is open and refers to a terminal.</td><td class="col2"></td>
	</tr>
	<tr class="row18">
		<td class="col0">&lt;FILE1&gt; <strong>-nt</strong> &lt;FILE2&gt;</td><td class="col1">True, if &lt;FILE1&gt; is <strong>newer than</strong> &lt;FILE2&gt; (mtime). <img src="/lib/images/smileys/icon_exclaim.gif" class="middle" alt=":!:" /></td><td class="col2"></td>
	</tr>
	<tr class="row19">
		<td class="col0">&lt;FILE1&gt; <strong>-ot</strong> &lt;FILE2&gt;</td><td class="col1">True, if &lt;FILE1&gt; is <strong>older than</strong> &lt;FILE2&gt; (mtime). <img src="/lib/images/smileys/icon_exclaim.gif" class="middle" alt=":!:" /></td><td class="col2"></td>
	</tr>
	<tr class="row20">
		<td class="col0">&lt;FILE1&gt; <strong>-ef</strong> &lt;FILE2&gt;</td><td class="col1">True, if &lt;FILE1&gt; is a <strong>hardlink</strong> to &lt;FILE2&gt;. <img src="/lib/images/smileys/icon_exclaim.gif" class="middle" alt=":!:" /></td><td class="col2"></td>
	</tr>
</table></div>

</div>

<h2 class="sectionedit5"><a name="string_tests" id="string_tests">String tests</a></h2>
<div class="level2">
<div class="table sectionedit6"><table class="inline">
	<tr class="row0">
		<th class="col0">Operator syntax</th><th class="col1">Description</th>
	</tr>
	<tr class="row1">
		<td class="col0"><strong>-z</strong> &lt;STRING&gt;</td><td class="col1">True, if &lt;STRING&gt; is <strong>empty</strong>.</td>
	</tr>
	<tr class="row2">
		<td class="col0"><strong>-n</strong> &lt;STRING&gt;</td><td class="col1">True, if &lt;STRING&gt; is <strong>not empty</strong> (this is the default operation).</td>
	</tr>
	<tr class="row3">
		<td class="col0">&lt;STRING1&gt; <strong>=</strong> &lt;STRING2&gt;</td><td class="col1">True, if the strings are <strong>equal</strong>.</td>
	</tr>
	<tr class="row4">
		<td class="col0">&lt;STRING1&gt; <strong>!=</strong> &lt;STRING2&gt;</td><td class="col1">True, if the strings are <strong>not equal</strong>.</td>
	</tr>
	<tr class="row5">
		<td class="col0">&lt;STRING1&gt; <strong>&lt;</strong> &lt;STRING2&gt;</td><td class="col1">True if &lt;STRING1&gt; sorts <strong>before</strong> &lt;STRING2&gt; lexicographically (pure <acronym title="American Standard Code for Information Interchange">ASCII</acronym>, not current locale!). Remember to escape! Use <code>\&lt;</code></td>
	</tr>
	<tr class="row6">
		<td class="col0">&lt;STRING1&gt; <strong>&gt;</strong> &lt;STRING2&gt;</td><td class="col1">True if &lt;STRING1&gt; sorts <strong>after</strong> &lt;STRING2&gt; lexicographically (pure <acronym title="American Standard Code for Information Interchange">ASCII</acronym>, not current locale!). Remember to escape! Use <code>\&gt;</code></td>
	</tr>
</table></div>

</div>

<h2 class="sectionedit7"><a name="arithmetic_tests" id="arithmetic_tests">Arithmetic tests</a></h2>
<div class="level2">
<div class="table sectionedit8"><table class="inline">
	<tr class="row0">
		<th class="col0">Operator syntax</th><th class="col1">Description</th>
	</tr>
	<tr class="row1">
		<td class="col0">&lt;INTEGER1&gt; <strong>-eq</strong> &lt;INTEGER2&gt;</td><td class="col1">True, if the integers are <strong>equal</strong>.</td>
	</tr>
	<tr class="row2">
		<td class="col0">&lt;INTEGER1&gt; <strong>-ne</strong> &lt;INTEGER2&gt;</td><td class="col1">True, if the integers are <strong>NOT equal</strong>.</td>
	</tr>
	<tr class="row3">
		<td class="col0">&lt;INTEGER1&gt; <strong>-le</strong> &lt;INTEGER2&gt;</td><td class="col1">True, if the first integer is <strong>less than or equal</strong> second one.</td>
	</tr>
	<tr class="row4">
		<td class="col0">&lt;INTEGER1&gt; <strong>-ge</strong> &lt;INTEGER2&gt;</td><td class="col1">True, if the first integer is <strong>greater than or equal</strong> second one.</td>
	</tr>
	<tr class="row5">
		<td class="col0">&lt;INTEGER1&gt; <strong>-lt</strong> &lt;INTEGER2&gt;</td><td class="col1">True, if the first integer is <strong>less than</strong> second one.</td>
	</tr>
	<tr class="row6">
		<td class="col0">&lt;INTEGER1&gt; <strong>-gt</strong> &lt;INTEGER2&gt;</td><td class="col1">True, if the first integer is <strong>greater than</strong> second one.</td>
	</tr>
</table></div>

</div>

<h2 class="sectionedit9"><a name="misc_syntax" id="misc_syntax">Misc syntax</a></h2>
<div class="level2">
<div class="table sectionedit10"><table class="inline">
	<tr class="row0">
		<th class="col0 leftalign"> Operator syntax         </th><th class="col1 leftalign"> Description                                                                                                                                 </th>
	</tr>
	<tr class="row1">
		<td class="col0 leftalign"> &lt;TEST1&gt; <strong>-a</strong> &lt;TEST2&gt;  </td><td class="col1 leftalign"> True, if &lt;TEST1&gt; <strong>and</strong> &lt;TEST2&gt; are true (AND). Note that <code>-a</code> also may be used as a file test (see above)                               </td>
	</tr>
	<tr class="row2">
		<td class="col0 leftalign"> &lt;TEST1&gt; <strong>-o</strong> &lt;TEST2&gt;  </td><td class="col1 leftalign"> True, if either &lt;TEST1&gt; <strong>or</strong> &lt;TEST2&gt; is true (OR).                                                                                        </td>
	</tr>
	<tr class="row3">
		<td class="col0 leftalign"> <strong>!</strong> &lt;TEST&gt;            </td><td class="col1 leftalign"> True, if &lt;TEST&gt; is <strong>false</strong> (NOT).                                                                                                         </td>
	</tr>
	<tr class="row4">
		<td class="col0 leftalign"> <strong>(</strong> &lt;TEST&gt; <strong>)</strong>      </td><td class="col1 leftalign"> Group a test (for precedence). <strong>Attention:</strong> In normal shell-usage, the &quot;(&quot; and &quot;)&quot; must be escaped; use &quot;\(&quot; and &quot;\)&quot;!                    </td>
	</tr>
	<tr class="row5">
		<td class="col0 leftalign"> <strong>-o</strong> &lt;OPTION_NAME&gt;    </td><td class="col1 leftalign"> True, if the <a href="/internals/shell_options" class="wikilink1" title="internals:shell_options"> shell option</a> &lt;OPTION_NAME&gt; is set.                                                                </td>
	</tr>
	<tr class="row6">
		<td class="col0 leftalign"> <strong>-v</strong> &lt;VARIABLENAME&gt;   </td><td class="col1 leftalign"> True if the variable &lt;VARIABLENAME&gt; has been set (since 4.2-alpha). Can&#039;t be used to determine if an array index is set, only array names.  </td>
	</tr>
	<tr class="row7">
		<td class="col0 leftalign"> <strong>-R</strong> &lt;VARIABLENAME&gt;   </td><td class="col1 leftalign"> True if the variable &lt;VARIABLENAME&gt; has been set and is a nameref variable (since 4.3-alpha)  </td>
	</tr>
</table></div>

</div>

<h2 class="sectionedit11"><a name="number_of_arguments_rules" id="number_of_arguments_rules">Number of Arguments Rules</a></h2>
<div class="level2">

<p>
The <code>test</code> builtin, especially hidden under its <code>[</code> name, may seem simple but is in fact <strong>causing a lot of trouble sometimes</strong>.
One of the difficulty is that the behaviour of <code>test</code> not only depends on its arguments but also on the <strong>number of its arguments</strong>.
</p>

<p>
Here are the rules taken from the manual (<em class="u"><strong>Note:</strong></em> This is for the command <code>test</code>, for <code>[</code> the number of arguments is calculated without the final <code>]</code>, for example <code>[ ]</code> follows the &quot;zero arguments&quot; rule):
</p>
<ul>
<li class="level1"><div class="li"> <strong>0 arguments</strong></div>
<ul>
<li class="level2"><div class="li"> The expression is false.</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> <strong>1 argument</strong></div>
<ul>
<li class="level2"><div class="li"> The expression is true if, and only if, the argument is not null</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> <strong>2 arguments</strong></div>
<ul>
<li class="level2"><div class="li"> If the first argument is <code>!</code> (exclamation mark), the expression is true if, and only if, the second argument is null</div>
</li>
<li class="level2"><div class="li"> If the first argument is one of the unary conditional operators listed above under the syntax rules, the expression is true if the unary test is true</div>
</li>
<li class="level2"><div class="li"> If the first argument is not a valid unary conditional operator, the expression is false</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> <strong>3 arguments</strong></div>
<ul>
<li class="level2"><div class="li"> If the second argument is one of the binary conditional operators listed above under the syntax rules, the result of the expression is the result of the binary test using the first and third arguments as operands</div>
</li>
<li class="level2"><div class="li"> If the first argument is <code>!</code>, the value is the negation of the two-argument test using the second and third arguments</div>
</li>
<li class="level2"><div class="li"> If the first argument is exactly <code>(</code> and the third argument is exactly <code>)</code>, the result is the one-argument test of the second argument. Otherwise, the expression is false. The <code>-a</code> and <code>-o</code> operators are considered binary operators in this case (<strong>Attention:</strong> This means the operator <code>-a</code> is not a file operator in this case!)</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> <strong>4 arguments</strong></div>
<ul>
<li class="level2"><div class="li"> If the first argument is <code>!</code>, the result is the negation of the three-argument expression composed of the remaining arguments. Otherwise, the expression is parsed and evaluated according to precedence using the rules listed above</div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> <strong>5 or more arguments</strong></div>
<ul>
<li class="level2"><div class="li"> The expression is parsed and evaluated according to precedence using the rules listed above</div>
</li>
</ul>
</li>
</ul>

<p>
These rules may seem complex, but it&#039;s not so bad in practice. Knowing them might help you to explain some of the &quot;unexplicable&quot; behaviours you might encounter:
<pre class="code">var=&quot;&quot;
if [ -n $var ]; then echo &quot;var is not empty&quot;; fi</pre>

</p>

<p>
This code prints &quot;var is not empty&quot;, even though <code>-n something</code> is supposed to be true if <code>$var</code> is not empty - <strong>why?</strong>
</p>

<p>
Here, as <code>$var</code> is <strong>not quoted</strong>, word splitting occurs and <code>$var</code> results in actually nothing (Bash removes it from the command&#039;s argument list!). So the test is in fact <code>[ -n ]</code> <strong>and falls into the &quot;one argument&quot; rule</strong>, the only argument is &quot;-n&quot; which is not null and so the test returns true. The solution, as usual, is to <strong>quote the parameter expansion</strong>: <code>[ -n &quot;$var&quot; ]</code> so that the test has always 2 arguments, even if the second one is the null string.
</p>

<p>
These rules also explain why, for instance, -a and -o can have several meanings.
</p>

</div>

<h2 class="sectionedit12"><a name="and_and_or" id="and_and_or">AND and OR</a></h2>
<div class="level2">

</div>

<h3 class="sectionedit13"><a name="the_prefered_way" id="the_prefered_way">The Prefered Way</a></h3>
<div class="level3">

<p>
The way often recommended to logically connect several tests with AND and OR is to use <strong>several single test commands</strong> and to <strong>combine</strong> them with the shell <code>&amp;&amp;</code> and <code>||</code> <strong>list control operators</strong>.
</p>

<p>
See this:
<pre class="code">if [ -n &quot;$var&quot;] &amp;&amp; [ -e &quot;$var&quot;]; then
   echo &quot;\$var is not null and a file named $var exists!&quot;
fi</pre>

</p>

<p>
The return status of AND and OR lists is the exit status of the last command executed in the list
</p>
<ul>
<li class="level1"><div class="li"> With <code>command1 &amp;&amp; command2</code>, <code>command2</code> is executed if, and only if, <code>command1</code> returns an exit status of zero (true)</div>
</li>
<li class="level1"><div class="li"> With <code>command1 ││ command2</code>, <code>command2</code> is executed if, and only if, <code>command1</code> returns a non-zero exit status (false) </div>
</li>
</ul>

</div>

<h3 class="sectionedit14"><a name="the_other_waya_and_-o" id="the_other_waya_and_-o">The other way: -a and -o</a></h3>
<div class="level3">

<p>
The logical operators AND and OR for the test-command itself are <code>-a</code> and <code>-o</code>, thus:
<pre class="code">if [ -n &quot;$var&quot; -a -e &quot;$var&quot; ] ; then
   echo &quot;\$var is not null and a file named $var exists&quot;
fi</pre>

</p>

<p>
They are <strong>not</strong> <code>&amp;&amp;</code> or <code>||</code>:
<pre class="code">$ if [ -n &quot;/tmp&quot; &amp;&amp; -d &quot;/tmp&quot;]; then echo true; fi # DOES NOT WORK
bash: [: missing `]&#039;</pre>

</p>

<p>
You might find the error message confusing, <code>[</code> does not find the required final <code>]</code>, because as seen above <code>&amp;&amp;</code> is used to write a <strong>list of commands</strong>. The <code>if</code> statement actually <strong>sees two commands</strong>:
</p>
<ul>
<li class="level1"><div class="li"> <code>[ -n &quot;/tmp&quot;</code></div>
</li>
<li class="level1"><div class="li"> <code>-d &quot;/tmp&quot; ]</code></div>
</li>
</ul>

<p>
…which <strong>must</strong> fail.
</p>

</div>

<h3 class="sectionedit15"><a name="why_you_should_avoid_using_-a_and_-o" id="why_you_should_avoid_using_-a_and_-o">Why you should avoid using -a and -o</a></h3>
<div class="level3">

</div>

<h4><a name="if_portability_is_a_concern" id="if_portability_is_a_concern">If portability is a concern</a></h4>
<div class="level4">

<p>
POSIX®/SUSv3 does <strong>not</strong> specify the behaviour of <code>test</code> in cases where there are more than 4 arguments. If you write a script that might not be executed by Bash, the behaviour might be different! <sup><a href="#fn__1" name="fnt__1" id="fnt__1" class="fn_top">1)</a></sup>
</p>

</div>

<h4><a name="if_you_want_the_cut_behaviour" id="if_you_want_the_cut_behaviour">If you want the cut behaviour</a></h4>
<div class="level4">

<p>
Let&#039;s say, we want to check the following two things (AND):
</p>
<ol>
<li class="level1"><div class="li"> if a string is null (empty)</div>
</li>
<li class="level1"><div class="li"> if a command produced an output</div>
</li>
</ol>

<p>
Let&#039;s see:
<pre class="code">if [ -z &quot;false&quot; -a -z &quot;$(echo I am executed &gt;&amp;2)&quot; ] ; then ... </pre>

⇒ The arguments are all expanded <strong>before</strong> <code>test</code> runs, thus the echo-command <strong>is executed</strong>.
</p>

<p>
<pre class="code">if [ -z &quot;false&quot; ] &amp;&amp; [ -z &quot;$(echo I am not executed &gt;&amp;2)&quot; ]; then... </pre>

</p>

<p>
⇒ Due to the nature of the <code>&amp;&amp;</code> list operator, the second test-command runs only if the first test-command returns true, our  echo-command <strong>is not executed</strong>.
</p>

<p>
<em class="u"><strong>Note:</strong></em> In my opinion, <code>-a</code> and <code>-o</code> are also less readable <code>[pgas]</code>
</p>

</div>

<h3 class="sectionedit16"><a name="precedence_and_parenthesis" id="precedence_and_parenthesis">Precedence and Parenthesis</a></h3>
<div class="level3">

<p>
Take care if you convert your scripts from using <code>-a</code> and <code>-o</code> to use the list way (<code>&amp;&amp;</code> and <code>||</code>):
</p>
<ul>
<li class="level1"><div class="li"> in the test-command rules, <code>-a</code> has <strong>precedence over</strong> <code>-o</code></div>
</li>
<li class="level1"><div class="li"> in the shell grammar rules, <code>&amp;&amp;</code> and <code>||</code> have <strong>equal precedence</strong></div>
</li>
</ul>

<p>
That means, <strong>you can get different results</strong>, depending on the manner of use:
<pre class="code">$ if [ &quot;true&quot; ] || [ -e /does/not/exist ] &amp;&amp; [ -e /does/not/exist ]; then echo true; else echo false; fi
false

$ if [ &quot;true&quot; -o -e /does/not/exist -a -e /does/not/exist ]; then  echo true; else echo false;fi
true</pre>

As a result you have to think about it a little or add precedence control (parenthesis). 
</p>

<p>
For <code>&amp;&amp;</code> and <code>||</code> parenthesis means (shell-ly) grouping the commands, and since <code>( … )</code> introduces a subshell we will use <code>{ … }</code> instead:
<pre class="code">$ if  [ &quot;true&quot; ] || { [ -e /does/not/exist ]  &amp;&amp; [ -e /does/not/exist ] ;} ; then echo true; else echo false; fi
true</pre>

</p>

<p>
For the test command, the precedence parenthesis are, as well, <code>( )</code>, but you need to escape or quote them, so that the shell doesn&#039;t try to interpret them:
<pre class="code">$ if [ \( &quot;true&quot; -o -e /does/not/exist \) -a -e /does/not/exist ]; then  echo true; else echo false; fi
false

# equivalent, but less readable IMHO:
$ if [ &#039;(&#039; &quot;true&quot; -o -e /does/not/exist &#039;)&#039; -a -e /does/not/exist ]; then  echo true; else echo false; fi
false</pre>

</p>

</div>

<h2 class="sectionedit17"><a name="not" id="not">NOT</a></h2>
<div class="level2">

<p>
As for AND and OR, there are 2 ways to negate a test with the shell keyword <code>!</code> or passing <code>!</code> as an argument to <code>test</code>.
</p>

<p>
Here <code>!</code> negates the exit status of the command <code>test</code> which is 0 (true), and the else part is executed:
<pre class="code">if ! [ -d &#039;/tmp&#039; ]; then echo &quot;/tmp doesn&#039;t exists&quot;; else echo &quot;/tmp exists&quot;; fi</pre>

</p>

<p>
Here the <code>test</code> command itself exits with status 1 (false) and the else is also executed:
<pre class="code">if  [ ! -d &#039;/tmp&#039; ]; then echo &quot;/tmp doesn&#039;t exists&quot;; else echo &quot;/tmp exists&quot;; fi</pre>

</p>

<p>
Unlike for AND and OR, both methods for NOT have an identical behaviour, at least for doing one single test.
</p>

</div>

<h2 class="sectionedit18"><a name="pitfalls_summarized" id="pitfalls_summarized">Pitfalls summarized</a></h2>
<div class="level2">

<p>
In this section you will get all the mentioned (and maybe more) possible pitfalls and problems in a summary.
</p>

</div>

<h3 class="sectionedit19"><a name="general" id="general">General</a></h3>
<div class="level3">

<p>
Here&#039;s the copy of a mail on bug-bash list. A user asking a question about using the test command in Bash, <strong>he&#039;s talking about a problem, which you may have already had yourself</strong>:
<pre class="code">From: (PROTECTED)
Subject: -d option not working. . .?
Date: Tue, 11 Sep 2007 21:51:59 -0400
To: bug-bash@gnu.org

Hi All,

I&#039;ve got a script that I&#039;m trying to set up, but it keeps telling me  
that  &quot;[-d command not found&quot;.  Can someone please explain what is  
wrong with this?:




#!/bin/sh

for i in $*
do
{
	if  [-d $i]
	then
		echo &quot;$i is a directory! Yay!&quot;
	else
		echo &quot;$i is not a directory!&quot;
	fi
}
done



Regards</pre>

</p>

<p>
See the problem regarding the used test-command (the other potential problems are not of interest here)?
<pre class="code">[-d $i]</pre>

He simply didn&#039;t know that <code>test</code> or <code>[</code> is a normal, simple command. Well, here&#039;s the answer he got. I quote it here, because it&#039;s a well written text that addresses most of the common issues with the &quot;classic&quot; test command:
</p>

<p>
<pre class="code">From: Bob Proulx (EMAIL PROTECTED)
Subject: Re: -d option not working. . .?
Date: Wed, 12 Sep 2007 10:32:35 -0600
To: bug-bash@gnu.org

&gt; (QUOTED TEXT WAS REMOVED)

The shell is first and foremost a way to launch other commands.  The
syntax is simply &quot;if&quot; followed by a command-list, (e.g. if /some/foo;
or even if cmd1; cmd2; cmd3; then).  Plus the &#039;( ... )&#039; syntax is
already taken by the use of starting a subshell.

As I recall in the original shell language the file test operator was
not built-in.  It was provided by the standalone &#039;/bin/test&#039; command.
The result was effectively this:

  if /bin/test -d somedir

Although the full path /bin/test was never used.  I showed it that way
here for emphasis that following the &#039;if&#039; statement is a command list.
Normally it would simply have been:

  if test -d somedir

Of course that is fine and for the best portability that style is
still the recommended way today to use the test command.  But many
people find that it looks different from other programming languages.
To make the test operator (note I mention the test operator and not
the shell language, this is a localized change not affecting the
language as a whole) look more like other programming languages the
&#039;test&#039; program was coded to ignore the last argument if it was a &#039;]&#039;.
Then a copy of the test program could be used as the &#039;[&#039; program.

  ...modify /bin/test to ignore &#039;]&#039; as last argument...
  cp /bin/test /bin/[

This allows:

  if [ -d somedir ]

Doesn&#039;t that look more normal?  People liked it and it caught on.  It
was so popular that both &#039;test&#039; and &#039;[&#039; are now shell built-ins.  They
don&#039;t launch an external &#039;/bin/test&#039; program anymore.  But they *used*
to launch external programs.  Therefore argument parsing is the same
as if they still did launch an external program.  This affects
argument parsing.

  it test -f *.txt
  test: too many arguments

Oops.  I have twenty .txt files and so test got one -f followed by the
first file followed by the remaining files.  (e.g. test -f 1.txt 2.txt
3.txt 4.txt)

  if test -d $file
  test: argument expected

Oops.  I meant to set file.

  file=/path/some/file
  if test -d $file

If variables such as that are not set then they wlll be expanded by
the shell before passing them to the (possibly external) command and
disappear entirely.  This is why test arguments should always be quoted.

  if test -d &quot;$file&quot;
  if [ -d &quot;$file&quot; ]

Actually today test is defined that if only one argument is given as
in this case &quot;test FOO&quot; then then test returns true if the argument is
non-zero in text length.  Because &quot;-d&quot; is non-zero length &quot;test -d&quot; is
true.  The number of arguments affects how test parses the args.  This
avoids a case where depending upon the data may look like a test
operator.

  DATA=&quot;something&quot;
  if test &quot;$DATA&quot;         # true, $DATA is non-zero length

  DATA=&quot;&quot;
  if test &quot;$DATA&quot;         # false, $DATA is zero length

But the problem case is how should test handle an argument that looks
like an operator?  This used to generate errors but now because it is
only one argument is defined to be the same as test -n $DATA.

  DATA=&quot;-d&quot;
  if test &quot;$DATA&quot;         # true, $DATA is non-zero length
  if test -d              # true, same as previous case.

Because test and [ are possibly external commands all of the parts of
them are chosen to avoid shell metacharacters.  The Fortran operator
naming was well known at the time (e.g. .gt., .eq., etc.) and was
pressed into service for the shell test operator too.  Comming from
Fortran using -gt, -eq, etc. looked very normal.

Incorrect use generating unlikely to be intended results:

  if test 5 &gt; 2    # true, &quot;5&quot; is non-zero length, creates file named &quot;2&quot;

Intended use:

  if test 5 -gt 2  # true (and no shell meta characters needing quoting)

Then much later, sometime in the mid 1980&#039;s, the Korn sh decided to
improve upon this situation.  A new test operator was introduced.
This one was always a shell built-in and therefore could act upon the
shell arguments directly.  This is &#039;[[&#039; which is a shell keyword.
(Keyword, metacharacters, builtins, all are different.)  Because the
shell processes [[ internally all arguments are known and do not need
to be quoted.

  if [[ -d $file ]]  # okay
  if [[ 5 &gt; 2 ]]     # okay

I am sure that I am remembering a detail wrong but hopefully this is
useful as a gentle introduction and interesting anyway.

Bob</pre>

</p>

<p>
I hope this text protects you a bit from stepping from one pitfall into the next.
</p>

<p>
I find it very interesting and informative, that&#039;s why I quoted it here. Many thanks, Bob, also for the permission to copy the text here!
</p>

</div>

<h2 class="sectionedit20"><a name="code_examples" id="code_examples">Code examples</a></h2>
<div class="level2">

</div>

<h3 class="sectionedit21"><a name="snipplets" id="snipplets">Snipplets</a></h3>
<div class="level3">

<p>
Some code snipplets follow, different ways of shell reaction is used.
</p>
<ul>
<li class="level1"><div class="li"> <strong>check if a variable is defined/non-NULL</strong></div>
<ul>
<li class="level2"><div class="li"> <code>test &quot;$MYVAR&quot;</code></div>
</li>
<li class="level2"><div class="li"> <code>[ &quot;$MYVAR&quot; ]</code></div>
</li>
<li class="level2"><div class="li"> <strong>Note:</strong> There are possibilities to make a difference if a variable is <em>undefined</em> or <em>NULL</em> - see <a href="/syntax/pe#use_an_alternate_value" class="wikilink1" title="syntax:pe">Parameter Expansion - Using an alternate value</a></div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> <strong>check if a directory exists, if not, create it</strong></div>
<ul>
<li class="level2"><div class="li"> <code>test ! -d /home/user/foo &amp;&amp; mkdir /home/user/foo</code></div>
</li>
<li class="level2"><div class="li"> <code>[ ! -d /home/user/foo ] &amp;&amp; mkdir /home/user/foo</code></div>
</li>
<li class="level2"><div class="li"> <code>if [ ! -d /home/user/foo ]; then mkdir /home/user/foo; fi</code></div>
</li>
</ul>
</li>
<li class="level1"><div class="li"> <strong>check if minimum one parameter was given, and that one is &quot;Hello&quot;</strong></div>
<ul>
<li class="level2"><div class="li"> <code>test $# -ge 1 -a &quot;$1&quot; = &quot;Hello&quot; || exit 1</code></div>
</li>
<li class="level2"><div class="li"> <code>[ $# -ge 1 ] &amp;&amp; [ &quot;$1&quot; = &quot;Hello&quot; ] || exit 1</code> (see <a href="/syntax/basicgrammar#lists" class="wikilink1" title="syntax:basicgrammar"> lists description</a>)</div>
</li>
</ul>
</li>
</ul>

</div>

<h3 class="sectionedit22"><a name="listing_directories" id="listing_directories">Listing directories</a></h3>
<div class="level3">

<p>
Using a <a href="/syntax/ccmd/classic_for" class="wikilink1" title="syntax:ccmd:classic_for"> for-loop</a> to iterate through all entries of a directory, if an entry is a directory (<code>[ -d &quot;$fn&quot; ]</code>), print its name:
</p>

<p>
<pre class="code">for fn in *; do
  [ -d &quot;$fn&quot; ] &amp;&amp; echo &quot;$fn&quot;
done</pre>

</p>

</div>

<h2 class="sectionedit23"><a name="see_also" id="see_also">See also</a></h2>
<div class="level2">
<ul>
<li class="level1"><div class="li"> Internal: <a href="/syntax/ccmd/conditional_expression" class="wikilink1" title="syntax:ccmd:conditional_expression"> conditional expression</a> (aka &quot;the new test command&quot;)</div>
</li>
<li class="level1"><div class="li"> Internal: <a href="/syntax/ccmd/if_clause" class="wikilink1" title="syntax:ccmd:if_clause"> the if-clause</a></div>
</li>
</ul>

</div>
<div class="footnotes">
<div class="fn"><sup><a href="#fnt__1" id="fn__1" name="fn__1" class="fn_bot">1)</a></sup> 
&lt;rant&gt;Of course, one can wonder what is the use of including the parenthesis in the specification without defining the behaviour with more than 4 arguments or how usefull are the examples with 7 or 9 arguments attached to the specification.&lt;/rant&gt;</div>
</div>
<div class="comment_wrapper">
  <h2><a name="discussion__section" id="discussion__section">
    Discussion
  </a></h2>
  <div class="level2 hfeed">
    <div class="hentry">
      <div class="comment_head">
        <a name="comment_bf2ef4f88a4c68910320884b68fad7e4" id="comment_bf2ef4f88a4c68910320884b68fad7e4"></a>
        <span class="vcard author"><span class="fn">PC Pete</span></span>, <abbr class="published" title="2012-10-06T02:06:00Z">2012/10/06 02:06</abbr>
      </div>
      <div class="comment_body entry-content" style="margin-left: 20px;">

<p>
Thanks for an interesting and helpful explanation of the sources and requirements of the test operators. Even after 20 years, I&#039;m still learning!
</p>

<p>
What I&#039;d like to know is how to avoid one of the most common pitfalls of the file and directory tests (-f and -d in particular). This is the strange behaviour when you test a hidden file, or a file starting with &#039;.&#039; (not just a file that isn&#039;t readable by the permissions applied to it).
</p>

<p>
In this case, although the file can be listed and passed as an argument to both test types (&quot;if [[ -d&quot; and &quot;if test -d&quot;), both tests fail when passed a &#039;dot&#039; file.
</p>

<p>
So far, all the workarounds I&#039;ve seen are quite cumbersome, and detract from &quot;nice&quot; shell scripting. Can you help with an example, or explain why these tests apparently &#039;fail&#039; the way they do, and what we can do to get them to work with all files?
</p>

<p>
Thanks!
</p>

      </div>
      <div class="comment_buttons">
        <form class="button discussion__reply" method="get" action="/doku.php#discussion__comment_form">
          <div class="no">
            <input type="hidden" name="id" value="commands:classictest" />
            <input type="hidden" name="do" value="show" />
            <input type="hidden" name="comment" value="reply" />
            <input type="hidden" name="cid" value="bf2ef4f88a4c68910320884b68fad7e4" />
            <input type="submit" value="Reply" class="button" title="Reply" />
          </div>
        </form>
              </div>
    </div>
    <div class="comment_replies" style="margin-left: 20px;">
    <div class="hentry">
      <div class="comment_head">
        <a name="comment_326b9cc5680648988690187919712de9" id="comment_326b9cc5680648988690187919712de9"></a>
        <span class="vcard author"><span class="fn">Jan Schampera</span></span>, <abbr class="published" title="2012-10-06T10:30:19Z">2012/10/06 10:30</abbr>
      </div>
      <div class="comment_body entry-content" style="margin-left: 20px;">

<p>
Hi Pete,
</p>

<p>
can you explain more what you mean by failing with dot-files? A dot-file is &quot;hidden&quot; by a convention to not display it (ls, file explorers, …), not technically hidden (i.e. there is no &quot;hidden&quot; flag).
</p>

<p>
For the permissions thing, it&#039;s relatively easy to explain. Just give me an example of what&#039;s unclear.
</p>

      </div>
      <div class="comment_buttons">
        <form class="button discussion__reply" method="get" action="/doku.php#discussion__comment_form">
          <div class="no">
            <input type="hidden" name="id" value="commands:classictest" />
            <input type="hidden" name="do" value="show" />
            <input type="hidden" name="comment" value="reply" />
            <input type="hidden" name="cid" value="326b9cc5680648988690187919712de9" />
            <input type="submit" value="Reply" class="button" title="Reply" />
          </div>
        </form>
              </div>
    </div>
    </div>
    <div class="hentry">
      <div class="comment_head">
        <a name="comment_f6ba0303f738a3a0577268071a4cbce3" id="comment_f6ba0303f738a3a0577268071a4cbce3"></a>
        <span class="vcard author"><span class="fn">Pete</span></span>, <abbr class="published" title="2012-10-06T16:16:52Z">2012/10/06 16:16</abbr>
      </div>
      <div class="comment_body entry-content" style="margin-left: 20px;">

<p>
Thanks, Jan, I appreciate the help!
</p>

<p>
OK, here&#039;s the actual example of the problem I&#039;m seeing.
</p>

<p>
I have a directory in my home directory. In that subdirectory is only one item, a directory called &quot;.git&quot;, which contains a number of files and folders, which I want to search (without using find). This search is part of a general search, but for some reason it never seemed to search the .git folder!
</p>

<p>
I wrote a little recursive-function script that cd&#039;s into each directory, then for each file in the directory, I use the following exact code (minus some printing functions that only get executed outside the folder test):
</p>

<p>
<pre class="code">#!/bin/bash

shopt -s dotglob

...

function RecurseDirs
{
    oldIFS=$IFS
    IFS=$&#039;\n&#039;
    for f in &quot;$@&quot;
    do
        if [[ -e &quot;$PWD/$FilePattern&quot; ]]; then
            ## go do stuff to let me know we found something... e.g. FoundFile
        fi
        echo &quot;Test : checking if $f is a directory...&quot;
        if [[ -d &quot;${f}&quot; ]]; then
            echo Looking in &quot;$f&quot;...
            cd &quot;${f}&quot;
            RecurseDirs $(ls -A1 &quot;.&quot;)
            cd ..
        fi
    done
    IFS=$oldIFS
}

...

RecurseDirs $(ls -A1 &quot;$StartPath&quot;)
</pre>

</p>

<p>
I set $StartPath to, say, &#039;.&#039; to begin with, and kick the script off in my home directory.
</p>

<p>
It works as expected for all the folders it finds - but when it gets to the folder containing the .git folder, although the first echo command echoes the dot folder (so it&#039;s not being hidden by the ls options or anything, that&#039;s why I set the dotglob shell option), the -d test always fails for that folder, and the second echo command never executes, even though it&#039;s an actual folder, is readable, and so on.
</p>

<p>
This happens for any &quot;.folder&quot; - except, if I test by using <a href="/commands/d_.foldername" class="wikilink2" title="commands:d_.foldername" rel="nofollow">-d &#039;.foldername&#039;</a> on the command line, it works!
</p>

<p>
I&#039;m sure this is something really silly I&#039;m misunderstanding, but I&#039;ll be darned if I can figure it out. Any ideas, or suggestions?
</p>

<p>
I thought it might be the use of the &quot;.&quot; as the parameter to ls in the function call… but removing it had no effect on this issue, and I want to be able to extend the code and use that as another parameter later on. That&#039;s as much as I could figure out might be causing the issue.
</p>

<p>
<acronym title="By the way">BTW</acronym>, I also get very strange errors in some folders with this script, such as &quot;ls : option &#039;A&#039; is invalid&quot;, I&#039;m unsure if they are related, but I can&#039;t find any information in any of the shell docs about these error messages or the dot folder problem. Most frustrating… But one thing at a time!
</p>

<p>
Any help is very much appreciated! It&#039;s driving me nuts, it&#039;s a good thing not many of the files I want to find are beneath .folders!
</p>

      </div>
      <div class="comment_buttons">
        <form class="button discussion__reply" method="get" action="/doku.php#discussion__comment_form">
          <div class="no">
            <input type="hidden" name="id" value="commands:classictest" />
            <input type="hidden" name="do" value="show" />
            <input type="hidden" name="comment" value="reply" />
            <input type="hidden" name="cid" value="f6ba0303f738a3a0577268071a4cbce3" />
            <input type="submit" value="Reply" class="button" title="Reply" />
          </div>
        </form>
              </div>
    </div>
    <div class="comment_replies" style="margin-left: 20px;">
    <div class="hentry">
      <div class="comment_head">
        <a name="comment_405a3ad3b5c09d5ab878626ec8dab592" id="comment_405a3ad3b5c09d5ab878626ec8dab592"></a>
        <span class="vcard author"><span class="fn">Jan Schampera</span></span>, <abbr class="published" title="2012-10-13T11:41:41Z">2012/10/13 11:41</abbr>
      </div>
      <div class="comment_body entry-content" style="margin-left: 20px;">

<p>
For a directory structure like
<pre class="code">sub1/
sub1/subsub1
sub1/subsub2
sub2/
sub2/subsub1
sub2/subsub2
sub2/.subsub3
sub2/.subsub4
sub2/.subsub4/subsubsub1
sub2/subsub5
sub2/subsub6</pre>

it works here:
<pre class="code">bonsai@core:~/tests/firerecurs$ ./script 
Test : checking if script is a directory...
Test : checking if sub1 is a directory...
Looking in sub1...
Test : checking if subsub1 is a directory...
Looking in subsub1...
Test : checking if subsub2 is a directory...
Looking in subsub2...
Test : checking if sub2 is a directory...
Looking in sub2...
Test : checking if subsub1 is a directory...
Looking in subsub1...
Test : checking if subsub2 is a directory...
Looking in subsub2...
Test : checking if .subsub3 is a directory...
Looking in .subsub3...
Test : checking if .subsub4 is a directory...
Looking in .subsub4...
Test : checking if subsubsub1 is a directory...
Looking in subsubsub1...
Test : checking if subsub5 is a directory...
Looking in subsub5...
Test : checking if subsub6 is a directory...
Looking in subsub6...</pre>

</p>

      </div>
      <div class="comment_buttons">
        <form class="button discussion__reply" method="get" action="/doku.php#discussion__comment_form">
          <div class="no">
            <input type="hidden" name="id" value="commands:classictest" />
            <input type="hidden" name="do" value="show" />
            <input type="hidden" name="comment" value="reply" />
            <input type="hidden" name="cid" value="405a3ad3b5c09d5ab878626ec8dab592" />
            <input type="submit" value="Reply" class="button" title="Reply" />
          </div>
        </form>
              </div>
    </div>
    </div>

        <div class="comment_form">
          <form id="discussion__comment_form" method="post" action="/doku.php" accept-charset="utf-8">
            <div class="no">
              <input type="hidden" name="id" value="commands:classictest" />
              <input type="hidden" name="do" value="show" />
              <input type="hidden" name="comment" value="add" />
                      <input type="hidden" name="reply" value="" />
                      <input type="hidden" name="user" value="188.49.204.236" />
              <div class="comment_name">
                <label class="block" for="discussion__comment_name">
                  <span>Real name:</span>
                  <input type="text" class="edit" name="name" id="discussion__comment_name" size="50" tabindex="1" value="" />
                </label>
              </div>
              <div class="comment_mail">
                <label class="block" for="discussion__comment_mail">
                  <span>E-Mail:</span>
                  <input type="text" class="edit" name="mail" id="discussion__comment_mail" size="50" tabindex="2" value="" />
                </label>
              </div>
                      <div class="comment_url">
                <label class="block" for="discussion__comment_url">
                  <span>Website:</span>
                  <input type="text" class="edit" name="url" id="discussion__comment_url" size="50" tabindex="3" value="" />
                </label>
              </div>
                      <div class="comment_text">
                <div id="discussion__comment_toolbar">
                  Enter your comment                                  </div>
                <textarea class="edit" name="text" cols="80" rows="10" id="discussion__comment_text" tabindex="5"></textarea>
              </div>
        <div id="plugin__captcha_wrapper"><input type="hidden" name="plugin__captcha_secret" value="VbmuVUBhfvI=" /><label for="plugin__captcha">Please fill all the letters into the box to prove you're human.</label> <input type="text" size="5" maxlength="5" name="plugin__captcha" id="plugin__captcha" class="edit" /> <img src="/lib/plugins/captcha/img.php?secret=VbmuVUBhfvI%3D&amp;id=commands:classictest"  width="160" height="40" alt="" /> </div>              <input class="button comment_submit" id="discussion__btn_submit" type="submit" name="submit" accesskey="s" value="Save" title="Save [S]" tabindex="7" />
              <input class="button comment_preview_button" id="discussion__btn_preview" type="button" name="preview" accesskey="p" value="Preview" title="Preview [P]" />

        
              <div class="clearer"></div>
              <div id="discussion__comment_preview">&nbsp;</div>
            </div>
          </form>
        </div>
          </div>
</div>

      </div>
    
      <div class="stylefoot">
        <div class="meta">
          <div class="user">
                    </div>
          <div class="doc">
          commands/classictest.txt &middot; Last modified: 2013/04/14 14:37 by thebonsai          </div>
        </div>
      </div>

    <div class="clearer"></div>

    
                <div class="bar" id="bar__bottom">
      <div class="bar-left">
        <form class="button btn_source" method="post" action="/commands/classictest"><div class="no"><input type="hidden" name="do" value="edit" /><input type="hidden" name="rev" value="" /><input type="submit" value="Show pagesource" class="button" accesskey="v" title="Show pagesource [V]" /></div></form><form class="button btn_revs" method="get" action="/commands/classictest"><div class="no"><input type="hidden" name="do" value="revisions" /><input type="submit" value="Old revisions" class="button" accesskey="o" title="Old revisions [O]" /></div></form>      </div>
      <div class="bar-right">
        <a class="nolink" href="#dokuwiki__top"><input type="button" class="button" value="Back to top" onclick="window.scrollTo(0, 0)" title="Back to top" /></a>      </div>
    </div>
    <div class="clearer"></div>
            
    <div align="center" class="footerinc">
  <div class="license"><a href="http://www.gnu.org/licenses/fdl-1.3.html" rel="license"><img src="/lib/images/license/button/gnufdl.png" class="medialeft licbutton" alt="GNU Free Documentation License 1.3" /></a> </div>
  <a target="_blank" href="http://www.chimeric.de" title="www.chimeric.de"><img src="/lib/tpl/arctic/images/button-chimeric-de.png" width="80" height="15" alt="www.chimeric.de" border="0" /></a>

  <a target="_blank" href="http://jigsaw.w3.org/css-validator/check/referer" title="Valid CSS"><img src="/lib/tpl/arctic/images/button-css.png" width="80" height="15" alt="Valid CSS" border="0" /></a>

  <a target="_blank" href="http://wiki.splitbrain.org/wiki:dokuwiki" title="Driven by DokuWiki"><img src="/lib/tpl/arctic/images/button-dw.png" width="80" height="15" alt="Driven by DokuWiki" border="0" /></a>

  <a target="_blank" href="http://www.firefox-browser.de" title="do yourself a favour and use a real browser - get firefox"><img src="/lib/tpl/arctic/images/button-firefox.png" width="80" height="15" alt="do yourself a favour and use a real browser - get firefox!!" border="0" /></a>
  
  <a target="_blank" href="/feed.php" title="Recent changes RSS feed"><img src="/lib/tpl/arctic/images/button-rss.png" width="80" height="15" alt="Recent changes RSS feed" border="0" /></a>

  <a target="_blank" href="http://validator.w3.org/check/referer" title="Valid XHTML 1.0"><img src="/lib/tpl/arctic/images/button-xhtml.png" width="80" height="15" alt="Valid XHTML 1.0" border="0" /></a>
</div>

  </div>
</div>

<div class="no"><img src="/lib/exe/indexer.php?id=commands%3Aclassictest&amp;1372922453" width="2" height="1" alt="" /></div>
</body>
</html>
