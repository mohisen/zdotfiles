"Modeline and Notes {

" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"
"   _____       _______        ___ __
"  |_   _| ___/|\___  /   (_) / _ |||       __   __(_)_ __ ___
"    | |  / _ ||   / /    | || (_)|||    ___\ \ / /| | '_ ` _ \
"    | | | (_) | _/ /__  _| || \_  ||__ |___|\ V / | | | | | | |
"    |_|  \.__/\|_____/ |___| \__| |___|      \_/  |_|_| |_| |_|
"
"
"   This is the personal .vimrc file of Ahmed Alghamdi.

"   While much of it is beneficial for general use, I would
"   recommend picking out the parts you want and understand.
"
"   This is a mirror of :http://spf13.com
" }
"{"
"{The w culture "
"File

set hidden
nnoremap <silent> ; :q!<CR>
nnoremap <silent> W :w<CR>
ca w!! w !sudo tee "%"
map ws :!rm ~/.vimswap/*<CR>
"}
" {The Z culture
"cab
cab zz w! ~/zdotfiles/1/
cab vv w! ~/zdotfiles/2/
cab wx !chmod u+x<CR>
cab wX !sh %<CR>
cab abo vsplit ~/Dropbox/abobanirc
"}
"{cab maped to the [1-10] "
cab w99 w! ~/zdotfiles/9/
cab w88 w! ~/zdotfiles/8/
cab w77 w! ~/zdotfiles/7/
cab w66 w! ~/zdotfiles/6/
cab w55 w! ~/zdotfiles/6/
cab w44 w! ~/zdotfiles/5/
cab w33 w! ~/zdotfiles/4/
cab w22 w! ~/zdotfiles/2/
cab w11 w! ~/zdotfiles/1/
cab w00 w! ~/zdotfiles/0/
"}
"Install unhtml
map wh :!rm ~/tst/vhtml<CR>:r!unhtml % > ~/tst/vhtml<CR><Esc>:vsplit ~/tst/vhtml<CR>

"}

""""""""""""""""""""""""""""
                    "F1
""""""""""""""""""""""""""""
map <F1> ,c<space>

""""""""""""""""""""""""""""
                    "<F2>
""""""""""""""""""""""""""""
nnoremap <F2> :reg<CR>

vnoremap <silent> WW Y<C-W><C-W>Gp'[v'],c<Space><C-W><C-W>
"vnoremap <silent> WW Y<C-W><C-W>Gp<C-W><C-W>
vnoremap <silent> 2 <C-W><C-W>
map Y y$

let g:vimsyn_noerror= 1

map <C-c> "+y<CR>
"}
"-
                    ""F3
map <F3> :ls<CR>:sb
map <s-F3> [c
map <S-Right> dp
map <S-Left> do

""""""""""""""""""""""""""""""""""""""
                     "<F4> :verbose map
""""""""""""""""""""""""""""""""""""""
nnoremap <F4> :verbose map

":ju(mps)         : list of your movements
":help jump-motions
":history         : list of all your commands
":his c           : commandline history
":his s           : search history
"q/               : Search history Window (puts you in full edit mode) (exit CTRL-C)
"q:               : commandline history Window (puts you in full edit mode) (exit CTRL-C)
":<C-F>           : history Window (exit CTRL-C)

"""""""""""""""""""""F5"

nnoremap <silent> wk  :vsplit ~/zdotfiles/1/askapache-bash-profile.txt<CR>
nnoremap <silent> <F5> :vsplit ~/zdotfiles/2/.vimrc.local<CR>
"nnoremap <silent> w0 :vsplit ~/zdotfiles/0/apt_install_packages.sh<CR>
nnoremap wba :!vim ftp://tazjel@baniop.com/public_html/<CR>
nnoremap <silent> w0 :vsplit ~/Dropbox/A/.vimrc.local<CR>


" Since I use linux, I want this
let g:clipbrdDefaultReg = '+'




























































nnoremap <silent> w1 :vsplit ~/zdotfiles/1/.zsh/al.zsh<CR>
"nnoremap <silent> ww :vsplit ~/zdotfiles/2/.vimrc.localw<CR>
nnoremap <silent> w2 :vsplit ~/zdotfiles/2/.vimrc.localw<CR>
nnoremap <silent> <F5> :vsplit ~/zdotfiles/2/.vimrc.local<CR>
nnoremap <S-F5> :source ~/zdotfiles/2/.vimrc.local<CR>
"""""""""""""""""""<F6>
map   <F6> :ls<CR>:e # : Pressing F5 lists all buffer, just type number
map <F7> :%s//gc<Left><Left><Left>
"F8
map <F8> :diffthis<CR>
map <F8> :diffthis<CR><ESC><C-W><C-W>:diffthisa<CR>

map <F8><F8> :diffoff<CR>
map <C-F8> :diffput<CR>
map <C-F8><C-F8> :diffput<CR>
"F9
"F9"
    " SessionOpen:
"nnoremap <silent> <F9> :Session
"nnoremap <silent> <S-F9> :SessionList<CR>
"nnoremap <M-F9> :SessionOpen
"nnoremap <C-F9> :SessionSaveAs
map <F9> :bn<cr>
map <F10> :bp<cr>


"F10
"F11
"F12
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""''
" Split the Line at Cursor
nnoremap K i<cr><esc><right>
"html substitute


nnoremap <C-J> m`o<Esc>``
nnoremap <C-K> m`O<Esc>``






map <S-Enter> O<Esc>j
map <CR> o<Esc>k



"!sed 's/<[^>]*>//g' %

"find files

" Recursively search your directory tree files for a string

"alias gfind='find . -print0  | xargs -0 egrep -I '
"map zz :vsplit ~/zdotfiles/1/.zsh/al.zsh<CR><ESC>Gp<ESC><C-W><C-W>

cab wz w ~/zdotfiles/1/

cab wv w ~/zdotfiles/2/


fun! RangerChooser()
    exec "silent !ranger --choosefile=/tmp/chosenfile " . expand("%:p:h")
    if filereadable('/tmp/chosenfile')
        exec 'edit ' . system('cat /tmp/chosenfile')
        call system('rm /tmp/chosenfile')
    endif
    redraw!
endfun
map ,r :call RangerChooser()<CR>



fun! FindFiles()
    let $filename = input("Enter file name to find: ")
    let $error_file = $HOME."/.findfile.output"
    silent! exe "!find . -iname \"".$filename."\" \| xargs file \| perl -pe 's/:/:1:/' > ".$error_file
    cfile $error_file
    copen
    redraw!
endfun

"----------------------------------------
"----------------------------------------
"" Markers & moving about
"'.               : jump to last modification line (SUPER)
"`.               : jump to exact spot in last modification line
"g;               : cycle thru recent changes (oldest first)
"g,               : reverse direction
":changes
":h changelist    : help for above
"<C-O>            : retrace your movements in file (starting from most recent)
"<C-I>            : retrace your movements in file (reverse direction)
":ju(mps)         : list of your movements
":help jump-motions
":history         : list of all your commands
":his c           : commandline history
":his s           : search history
"q/               : Search history Window (puts you in full edit mode) (exit CTRL-C)
"q:               : commandline history Window (puts you in full edit mode) (exit CTRL-C)
":<C-F>           : history Window (exit CTRL-C)
                                "F6

imap ,,, <esc>bdwa<<esc>pa><cr></<esc>pa><esc>kA
"---------------------------------------------------"

"----------------------------------------
"" *generate a list of numbers*  23-64
"o23<ESC>qqYp<C-A>q40@q
"----------------------------------------
" : Pressing F5 lists all buffer, just type number
set modifiable
let g:is_bash=1
ca w!! w !sudo tee "%"
"map WW !sudo tee "%"

"{

"-----------------------------
"   Pasteboard
"-----------------------------
"register :reg = line "
"maps = line "
"bookmarks"
"marks
"fold "!ls
"auto complete"
"tabs"
"buffers"
"windows"
"set t_Co=256 "use 256 colours in terminal

"}


map ws :!rm ~/.vimswap/*<CR>

"Install unhtml
map wh :!rm ~/tst/vhtml<CR>:r!unhtml % > ~/tst/vhtml<CR><Esc>:vsplit ~/tst/vhtml<CR>
""close"
        "Save "
set t_vb=
set novisualbell

map wy :set filetype=bash<CR>

""#map wf "{"<CR>#<CR>function<space>()<CR>{<CR><CR><CR>}<CR>"{"
                    "F1

 "Multiple Files Management (Essential)
":bn              : goto next buffer
":bp              : goto previous buffer
":wn              : save file and move to next (super)
":wp              : save file and move to previous
":bd              : remove file from buffer list (super)
":bun             : Buffer unload (remove window but not from list)
":badd file.c     : file from buffer list
":b3              : go to buffer 3 [C]
":b main          : go to buffer with main in name eg main.c (ultra)
":sav! %<.bak     : Save Current file to alternative extension (old way)
":sav! %:r.cfm    : Save Current file to alternative extension
":sav %:s/fred/joe/           : do a substitute on file name
":sav %:s/fred/joe/:r.bak2    : do a substitute on file name & ext.
":!mv % %:r.bak   : rename current file (DOS use Rename or DEL)
":help filename-modifiers
":e!              : return to unmodified file
":w c:/aaa/%      : save file elsewhere
":e #             : edit alternative file (also cntrl-^)
":rew             : return to beginning of edited files list (:args)
":brew            : buffer rewind
":sp fred.txt     : open fred.txt into a split
":sball,:sb       : Split all buffers (super)
":scrollbind      : in each split window
":map   <F5> :ls<CR>:e # : Pressing F5 lists all buffer, just type number

" Allows to change buffer w/o saving current buffer

                    ""F3
map <F3> :ls<CR>:sb
map <s-F3> [c
map <S-Right> dp
map <S-Left> do

                     "<F4> :verbose map

nnoremap <F4> :verbose map
nnoremap w9 :e! /home/www-data/web2py/applications/zIST/views/default/index.html<CR>
"F5"

nnoremap <silent> <F5> :vsplit ~/zdotfiles/2/.vimrc.local<CR>
nnoremap <S-F5> :source ~/zdotfiles/2/.vimrc.local<CR>
                                "F7
"map   <F6>>   :w<CR>:!perl -c %<CR>

map   <F6> :ls<CR>:e # : Pressing F5 lists all buffer, just type number
map <F7> :%s//gc<Left><Left><Left>
"F8
map <F8> :diffthis<CR>
map <F8> :diffthis<CR><ESC><C-W><C-W>:diffthisa<CR>

map <F8><F8> :diffoff<CR>
map <C-F8> :diffput<CR>
map <C-F8><C-F8> :diffput<CR>
"F9
"F9"
    " SessionOpen:
"nnoremap <silent> <F9> :Session
"nnoremap <silent> <S-F9> :SessionList<CR>
"nnoremap <M-F9> :SessionOpen
"nnoremap <C-F9> :SessionSaveAs

"F10
"F11
"F12
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""''
" Split the Line at Cursor
nnoremap K i<cr><esc><right>
" html substitute
nnoremap xw :%s/<[^>]*>//gi<cr><CR>


nnoremap <C-J> m`o<Esc>``
nnoremap <C-K> m`O<Esc>``






map <S-Enter> O<Esc>j
map <CR> o<Esc>k



"!sed 's/<[^>]*>//g' %

"find files

" Recursively search your directory tree files for a string

"alias gfind='find . -print0  | xargs -0 egrep -I '
map zz :vsplit ~/zdotfiles/1/.zsh/al.zsh<CR><CR><ESC><ESC>Gp<ESC><C-W>q
cab wz w ~/zdotfiles/1/

cab wv w ~/zdotfiles/2/
set autoread
set wildmenu




fun! FindFiles()
    let $filename = input("Enter file name to find: ")
    let $error_file = $HOME."/.findfile.output"
    silent! exe "!find . -iname \"".$filename."\" \| xargs file \| perl -pe 's/:/:1:/' > ".$error_file
    cfile $error_file
    copen
    redraw!
endfun

"----------------------------------------
"----------------------------------------
"" Markers & moving about
"'.               : jump to last modification line (SUPER)
"`.               : jump to exact spot in last modification line
"g;               : cycle thru recent changes (oldest first)
"g,               : reverse direction
":changes
":h changelist    : help for above


"----------------------------------------

"-----------------------------
"   Pasteboard
"-----------------------------
"register :reg = line "
"maps = line "
"bookmarks"
"marks
"fold "!ls
"auto complete"
"tabs"
"buffers"
"windows"

"}

"white space
"%s/[\r \t]\+$//
"%s/[\r \t]\+$//
"let g:BASH_SyntaxCheckOptionsGlob  = "-O extglob"

"""""
cab w2a vsp ~/zdotfiles/9/web2py_arabic_admin.py

"""""""""""""""""""""""""""""""""""""""""""""""""
" set
"
"""""""""""""""""""""""""""""""""""""""""""""""""

set history=500
set t_Co=256 "use 256 colours in terminal
set nocompatible
set encoding=utf-8
set fileencoding=utf-8
set foldmethod=manual
set clipboard+=unnamed
set modifiable
set showmatch
set noro
set shell=/bin/zsh
set showcmd
set background=dark
set showfulltag
"colorscheme pf_earth
"colorscheme koehler
set splitright
set showtabline=2 " always show tab bar
set timeoutlen=250        " Time to wait after ESC (default causes an annoying delay)
"set syntax=vim<CR>
set termencoding=utf-8  " force terminal encoding
map wy :set filetype=bash<CR>

"nnoremap <F6> :set arabic<CR>
"nnoremap <S-F6>:set noarabic<CR>
"nnoremap <S-F6> :set rightleft<CR>
"nnoremap <C-F6> :set norightleft<CR>

"let c_space_errors=1
highlight WhitespaceEOL ctermbg=red guibg=red
match WhitespaceEOL /\s\+$/
"""""""""""""""""""""""""""""""""""""""""""}}}

""" DiffMode:							{{{2
set diffopt=filler,context:4,iwhite	" options for using diff mode
"set diffexpr		" expression used to obtain a diff file


" set the commandheight
set cmdheight=2
noremap wt :%s/[ ^I]*$//g
set selectmode=mouse

" do not keep a backup files
set nobackup
set nowritebackup

set noswapfile
" I like 4 spaces for indenting
set shiftwidth=4

" I like 4 stops
set tabstop=4

" Replace tabs with spaces
set expandtab
set autoread
set number
set smarttab
" 4 spaces in tab
set softtabstop=4
"remove redundant spaces
set shiftround
" Search
set smartcase

" //indent
set smartindent
" Always set auto indenting on
" inherit indent
set autoindent

" Set 52 lines for the display, 1 for the status line.
" and other display options
if has('gui_running')
" i like about 80 character width lines

  set textwidth=78 " disabled
" 2 for the command line
  set lines=52
" add columns for the Project plugin

  set columns=110
" enable use of mouse
  set mouse=a
endif

" keep 1000 lines of command line history
set history=1000

" show the cursor position all the time
set ruler

" show incomplete command in status bar
set showcmd


" do incremental searches (annoying but handy);
set incsearch

" Show tab characters. Visual Whitespace.
"set list
"set listchars=tab:>.
set listchars=nbsp:-,tab:>-,trail:~,extends:>,precedes:<,eol:$

" Make searches case-sensitive only if they contain upper-case characters
set ignorecase
set smartcase


" smart search (override 'ic' when pattern has uppers)
set scs

" Set status line
:set statusline=%<%f%=\ [%1*%M%*%n%R%H]\ %-19(%3l,%02c%03V%)%O'%02b'
:hi User1 term=inverse,bold cterm=inverse,bold ctermfg=red

" GRB: clear the search buffer when hitting return
:nnoremap <CR> :nohlsearch<CR>/<BS>

" Always display a status line at the bottom of the window
set laststatus=2

" Insert two spaces after a period with every joining of lines.

" I like this as it makes reading texts easier (for me, at least).
set joinspaces

" showmatch: Show the matching bracket for the last ')'?
set showmatch

" wrapping
set nowrap

"wrap by word
set linebreak

" Java specific stuff
let java_highlight_all=1
let java_highlight_debug=1




let java_ignore_javadoc=1
let java_highlight_functions=1
let java_mark_braces_in_parens_as_errors=1

" Commands for :Explore
"let g:explVertical=1 " open vertical split winow
"let g:explSplitRight=1 " Put new window to the right of the explorer
"let g:explStartRight=0 " new windows go to right of explorer window




"for the TOhtml command
let html_use_css=1

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")

  syntax on
  set hlsearch
endif

" when capslock is pressed - standart commands works too
command! Q quit
command! W write


" *****************************************************
" C Y G W I N

"set shell=C:/cygwin/bin/bash

"set shellcmdflag=--login\ -c
"set shellxquote=\"

" *****************************************************
" E N C O D I N G S"

"

"set encoding=utf8
"set fileencodings=utf8,cp1251




" ************************************************************************
" C O M M A N D S
"


"switch to directory of current file
command! CD cd %:p:h

" ************************************************************************
" ************************************************************************
" K E Y M A P P I N G S
"

map <Leader>e :Explore<cr>
map <Leader>s :Sexplore<cr>

" pressing < or > will let you indent/unident selected lines

vnoremap < <gv
vnoremap > >gv















" Make p in Visual mode replace the selected text with the "" register.

vnoremap p <Esc>:let current_reg = @"<CR>gvs<C-R>=current_reg<CR><Esc>

" Make tab in v mode work like I think it should (keep highlighting):
vmap <tab> >gv
vmap <s-tab> <gv

" map ,L mz1G/Last modified:/e<Cr>CYDATETIME<Esc>`z

map ,L :let @z=TimeStamp()<Cr>"zpa
map ,datetime :let @z=strftime("%d %b %Y %X")<Cr>"zpa

" Map <c-s> to write current buffer.

map <c-s> :w<cr>
imap <c-s> <c-o><c-s>
imap <c-s> <esc><c-s>
map ,date :let @z=strftime("%d %b %Y")<Cr>"zpa

" Buffer naviation
map <M-Left> :bprevious<CR>
map <M-Right> :bnext<CR>

" Select all.
map <c-a> ggVG

" Undo in insert mode.
imap <c-z> <c-o>u





" ************************************************************************
" B E G I N A U T O C O M M A N D S
"
" Enable file type detection.
" Use the default filetype settings, so that mail gets 'tw' set to 72,
" 'cindent' is on in C files, etc.
" Also load indent files, to automatically do language-dependent indenting.


" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler


" Normally don't automatically format 'text' as it is typed, only do this

" with comments, at 79 characters.
au BufNewFile,BufEnter *.c,*.h,*.java,*.jsp set formatoptions-=t tw=79
au BufNewFile,BufEnter,BufRead *.scala set ft=scala


" GUI ONLY type stuff.
if has("gui")

  :menu &MyVim.Current\ File.Convert\ Format.To\ Dos :set fileformat=dos<cr> :w<cr>

  :menu &MyVim.Current\ File.Convert\ Format.To\ Unix :set fileformat=unix<cr> :w<cr>

  :menu &MyVim.Current\ File.Remove\ Trailing\ Spaces\ and\ Tabs :%s/[ ]*$//g<cr>

  :menu &MyVim.Current\ File.Remove\ Ctrl-M :%s/^M//g<cr>
  :menu &MyVim.Current\ File.Remove\ All\ Tabs :retab<cr>

  :menu &MyVim.Current\ File.To\ HTML :runtime! syntax/2html.vim<cr>
" these don't work for some reason

":amenu &MyVim.Insert.Date<Tab>,date <Esc><Esc>:,date<Cr>
":amenu &MyVim.Insert.Date\ &Time<Tab>,datetime <Esc><Esc>:let @z=YDATETIME<Cr>"zpa

  :amenu &MyVim.Insert.Last\ &Modified<Tab>,L <Esc><Esc>:let @z=TimeStamp()<CR>"zpa
  :amenu &MyVim.-SEP1- <nul>

  :amenu &MyVim.&Global\ Settings.Toggle\ Display\ Unprintables<Tab>:set\ list! :set list!<CR>

  :amenu &MyVim.-SEP2- <nul>
  :amenu &MyVim.&Project :Project<CR>

" hide the mouse when characters are typed
  set mousehide

" set the gui options to:
" g: grey inactive menu items
" m: display menu bar
" r: display scrollbar on right side of window
" b: display scrollbar at bottom of window

" t: enable tearoff menus on Win32
" T: enable toolbar on Win32
  set go=gmr
" colorscheme mayansmoke
  colorscheme default
"set guifont=Lucida_Console:h9:cANSI
"set guifont=Monospace\ 9
  set guifont=Monaco\ 10
else
  colorscheme default
endif



" ************************************************************************
" A B B R E V I A T I O N S

"
abbr #b /************************************************************************
abbr #e ************************************************************************/

abbr hosts C:\WINNT\system32\drivers\etc\hosts

" abbreviation to manually enter a timestamp. Just type YTS in insert mode

iab YTS <C-R>=TimeStamp()<CR>

" Date/Time stamps
" %a - Day of the week
" %b - Month

" %d - Day of the month
" %Y - Year
" %H - Hour
" %M - Minute
" %S - Seconds
" %Z - Time Zone

iab YDATETIME <c-r>=strftime(": %a %b %d, %Y %H:%M:%S %Z")<cr>



" ************************************************************************
" F U N C T I O N S

"

" first add a function that returns a time stamp in the desired format
"if !exists("*TimeStamp")
    "fun TimeStamp()

        "return "Last-modified: " . strftime("%d %b %Y %X")
    "endfun
"endif



" do not redraw, when running macros..lazyredraw
set lz

"F5 - view list of tabs
"map <F5> <Esc>:buffers<cr>
"map <F5> <esc>:buffers<cr>
"map <F5> <esc><esc>:buffers<cr>

" F6 - go to previous tab
"map <F6> :tabp<cr>
"vmap <F6> <esc>:tabp<cr>i
"imap <F6> <esc>:tabp<cr>i

" F7 - go to next tab
"map <F7> :tabn<cr>
"vmap <F7> <esc>:tabn<cr>i
"imap <F7> <esc>:tabn<cr>i

" F10 - delete(close) tab
"map <F10> :tabclose<cr>
"vmap <F10> <esc>:tabclose<cr>
"imap <F10> <esc>:tabclose<cr>

"F11 - create new tab
"map <C-F11> :tabnew<cr>
"vmap <C-F11> <esc>:tabnew<cr>
"imap <C-F11> <esc>:tabnew<cr>


set complete=.,w,b,u,t,i



" Folding
"set foldmethod=indent
set foldcolumn=2
" open folding using space
nmap <Space> zo

" Syntax
syntax on

" GRB: Always source python.vim for Python files
"au FileType python source ~/.vim/scripts/python.vim

" GRB: Use custom python.vim syntax file
"au! Syntax python source ~/.vim/syntax/python.vim
let python_highlight_all = 1
let python_slow_sync = 1



" support highlighting
let python_highlight_all = 1
autocmd FileType python set omnifunc=pythoncomplete#Complete
au FileType py set autoindent
au FileType py set smartindent



" Tab autocompletion
imap <S-Tab> <c-r>=InsertTabWrapper("backward")<cr>
imap <Tab> <c-r>=InsertTabWrapper("forward")<cr>

function! InsertTabWrapper(direction)
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    elseif "backward" == a:direction
        return "\<c-p>"
    else
        return "\<c-n>"
    endif
endfunction

set complete=""
set complete+=.
set complete+=k
set complete+=b
set complete+=t
"set completeopt-=preview
"set completeopt+=longest

autocmd BufRead *.py set smartindent
set cinwords=if,elif,else,for,while,try,except,finally,def,class

let g:Tlist_Ctags_Cmd="D:/opt/ctags58/ctags.exe"
let g:Tlist_Show_One_File=1
let g:Tlist_GainFocus_On_ToggleOpen = 1
let g:Tlist_Auto_Update = 1
let g:Tlist_Compact_Format = 1
let Tlist_Use_Right_Window = 1

map <F8> :TlistToggle<CR>


augr class
au!
au bufreadpost,filereadpost *.class %!d:\bin\jad.exe -noctor -ff -i -p %
au bufreadpost,filereadpost *.class set readonly
au bufreadpost,filereadpost *.class set ft=java
au bufreadpost,filereadpost *.class normal gg=G
au bufreadpost,filereadpost *.class set nomodified
augr END


" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

" Set ACK to be grep within vim
set grepprg=ack-grep

" Mark text width indication to 80 chars left
" highlight OverLength ctermbg=red ctermfg=white guibg=#ffd9d9
" match OverLength /\%81v.\+/

"Reference https://github.com/signalpillar/dotfiles/blob/master/.vimrc

colorscheme solarized
