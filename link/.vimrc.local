" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker
"
" =============================================================================
"
" Modeline and Notes {
    " File: .vimrc.local
    " Author:  Ahmed Alghamdi <tazjel@gmail.com>
    " Last Change: Sun Jan 26 00:06:11 AST 2014
    " Version: 0.1
    " WebPage: http://github.com/tazjel/zdotfiles.git
    " License: BSD
    "
    " References : http://github.com/tazjel/zdotfiles.git
    "
    " script type: plugin
" }

" Logo {
    "   _____       _______        ___ __
    "  |_   _| ___/|\___  /   (_) / _ |||       __   __(_)_ __ ___
    "    | |  / _ ||   / /    | || (_)|||    ___\ \ / /| | '_ ` _ \
    "    | | | (_) | _/ /__  _| || \_  ||__ |___|\ V / | | | | | | |
    "    |_|  \.__/\|_____/ |___| \__| |___|      \_/  |_|_| |_| |_|
"}

" setup {
    set nocompatible
    set nospell

    set t_Co=256

    if has("multi_byte")
        if &termencoding == ""
            let &termencoding = &encoding
        endif
    endif
"}


" hide buffers, not close them {
    set hidden
"}

" lazy file name tab completion {
    set wildignorecase
"}

"The Following setup is for tazjel.com {
    map W :w<CR>
    map ; :q!<CR>
    nnoremap <silent> ; :q!<CR>
"lines Management {
    nnoremap K i<cr><esc><right>

    nnoremap <CR> :
    vnoremap <CR> :
"}
set encoding=utf-8
setglobal fileencoding=utf-8


" case insensitive search
set ignorecase
set smartcase
set infercase

" make backspace behave in a sane manner
set backspace=indent,eol,start

" searching
set hlsearch
set incsearch

" use indents of 4 spaces
set shiftwidth=2

" tabs are spaces, not tabs
set expandtab

" an indentation every four columns
set tabstop=2


" let backspace delete indent
set softtabstop=2

" enable auto indentation
set autoindent

" remove trailing whitespaces and ^M chars
autocmd FileType c,cpp,java,php,js,python,twig,xml,yml autocmd BufWritePre <buffer> :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))
" let mapleader=","

" Note the required backslash.
let mapleader = "\<space>"

vnoremap <silent> <leader>y :w !xsel -i -b<CR>
nnoremap <silent> <leader>y V:w !xsel -i -b<CR>
nnoremap <silent> <leader>p :silent :r !xsel -o -b<CR>

" show matching brackets/parenthesis
set showmatch

" set folding
    setlocal foldmethod=expr
    setlocal foldexpr=(getline(v:lnum)=~'^$')?-1:((indent(v:lnum)<indent(v:lnum+1))?('>'.indent(v:lnum+1)):indent(v:lnum))
" disable startup message
set shortmess+=I

" syntax highlighting and colors
syntax on
colorscheme sourcerer
filetype off
" stop unnecessary rendering
set lazyredraw
" show line numbers
set number
" no line wrapping
set nowrap

" don't wrap long lines
set nowrap

" highlight column
set cursorcolumn

" no folding
" set foldlevel=99
" set foldminlines=99
  " syntatic http://git.io/syntastic.vim
  " linters: (from aur) nodejs-jshint, nodejs-jsonlint, csslint, checkbashisms
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0
  highlight SyntasticErrorSign ctermfg=red ctermbg=237
  highlight SyntasticWarningSign ctermfg=yellow ctermbg=237
  highlight SyntasticStyleErrorSign ctermfg=red ctermbg=237
  highlight SyntasticStyleWarningSign ctermfg=yellow ctermbg=237



set foldtext=getline(v:foldstart)
set fillchars=fold:\ "(there's a space after that \)
highlight Folded ctermfg=DarkGreen ctermbg=Black

hi clear
if exists("syntax_on")
  syntax reset
endif
let colors_name = "solarized"



"<space><space>
nnoremap <space> za
vnoremap <space> zf

nnoremap <space> za
vnoremap <space> zf
nnoremap <Space><CR> :nohlsearch<CR><CR>
   " source vimrc
nnoremap <silent> <F5> :source ~/.vimrc.local<cr>
nnoremap <silent> <C-F5> :vsplit ~/.vimrc.local<CR>
nnoremap <silent> <C-S-F5> :vsplit ~/.vimrc<CR>
 "substitute

map <F1> ,c<Space>
map <F7> :%s/\s\+$//e<CR>

map <F8> :%s/<[^>]*>//gi<cr>
"auto-complete " nice bash-like filename auto-complete
set listchars=tab:>-,trail:-
set list
set wildmode=longest,list,full
set wildmode=full:list
set wildmenu

let g:airline_theme = 'solarized'
let g:airline_enable_branch = 1
let g:airline_powerline_fonts = 1
let g:airline_detect_whitespace = 1
let g:airline#extensions#hunks#non_zero_only = 1
let g:airline#extensions#tabline#enabled = 2
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#buffer_min_count = 1

set laststatus=2
let g:Powerline_symbols = 'fancy'

" A function to save word under cursor to a file

function! SaveWord()
   normal ywi
   exe ':!echo '.@".' >> ~/Desktop/word.txt'
endfunction

map ,p :call SaveWord()
set nobackup                   " dont create backup files
set nowritebackup
set noswapfile
" ,rr: sometimes syntax highlighting fails and put everything as string, this reset it
nmap <leader>rr :syntax off<cr>:syntax on<cr>
"""""""""""
cab w!! w !sudo tee "%"



abbr #b #!/bin/bash
abbr #p #!/usr/bin/env python<CR>
            \#<CR>
            \# -*- coding: utf-8 -*-<CR>
            \<CR>
            \<CR>
            \<CR>
            \import os, sys, re<CR>



" function to delete duplicate lines
function! Del()
    if getline(".") == getline(line(".") - 1)
      norm dd
    endif
endfunction

":g/^/ call Del()


"Clean
"\%[]	A sequence of optionally matched atoms.  This always matches.
":%s/,/^V^M/g
"globally replace commas with newlines (yes, I know this
"looks like it would insert DOS carriage returns, but it only inserts the
"newlines on Unix)
":%s/\s*$//
"strip blanks from end of lines
":%s/^.\{30}//
"remove the first 30 characters from each line
":%s/[ ^I]*$/!d
"remove trailing whitespace (where ^I
"is produced by pressing the tab key)
":%s/.*/\L&/
"convert the entire file to lowercase.
":s/.*/\u&/
"convert the first character of line to uppercase.
":%s/\&lt;./\u&amp;/g
"convert the first character of each word to uppercase
"\&lt; matches the start of a word;
". therefore matches the first character of a word;
"\u tells Vi(m) to uppercase the next character in the substitution
"string;
"&amp; means substitute whatever was matched on the lhs;
"%s/\(^.*install\) \(.*$\)/\2/g

                        " source: http://vim.wikia.com/wiki/VimTip102
                        " L"

set splitbelow splitright

"Fold System
    nnoremap 8 zMzvzz
    nnoremap 9 zM
    nnoremap 0 zR

