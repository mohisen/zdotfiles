
"Modeline and Notes {

" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"
"   _____       _______        ___ __
"  |_   _| ___/|\___  /   (_) / _ |||       __   __(_)_ __ ___
"    | |  / _ ||   / /    | || (_)|||    ___\ \ / /| | '_ ` _ \
"    | | | (_) | _/ /__  _| || \_  ||__ |___|\ V / | | | | | | |
"    |_|  \.__/\|_____/ |___| \__| |___|      \_/  |_|_| |_| |_|
"
"
"   This is the personal .vimrc file of Ahmed Alghamdi.

"   While much of it is beneficial for general use, I would
"   recommend picking out the parts you want and understand.
"
"   This is a mirror of :http://spf13.com

    "syntax
            set background=dark
                "encoding
                    set encoding=utf-8
                    " change default file encoding when writing new files
                    setglobal fileencoding=utf-8
                    set fillchars+=stl:\ ,stlnc:\

                "  complete menu
                    set wildmenu
                    set noswapfile nobackup nowritebackup
                    set showmatch matchtime=3 matchpairs+=<:>
                    set complete=.,w,b,k,d,i,t

                "" Fix slow O inserts
                    set timeout timeoutlen=1000 ttimeoutlen=100
                    set timeout timeoutlen=5000 ttimeoutlen=100
                    set shortmess=aTI

                " set folding
                    setlocal foldmethod=expr
                    setlocal foldexpr=(getline(v:lnum)=~'^$')?-1:((indent(v:lnum)<indent(v:lnum+1))?('>'.indent(v:lnum+1)):indent(v:lnum))
                    set foldtext=getline(v:foldstart)
                    set fillchars=fold:\ "(there's a space after that \)
                    highlight Folded ctermfg=DarkGreen ctermbg=Black

                    function! ToggleSyntax()
                        if exists("g:syntax_on")
                            syntax off
                        else
                            syntax enable
                        endif
                    endfunction
                    nmap <silent>  wn :call ToggleSyntax()<CR>

                if exists("syntax_on")
                    syntax reset
                endif

                if has('autocmd')
                    filetype plugin indent on
                endif

                if has('syntax') && !exists('g:syntax_on')
                    syntax enable
                endif

                if has("multi_byte")
                    if &termencoding == ""
                        let &termencoding = &encoding
                    endif
                endif

 " <F[1-12]>
    " <F1>
        map <F1> <plug>NERDCommenterToggle<CR>
    " <F2>
        nnoremap <F2> :reg<CR>
        nnoremap <S-F2> :marks <CR>
    " <F3>
        map <F3> :ls<CR>:sb
        map <F3> :ls<CR>:sball

    " <F4>
        nnoremap <F4> :verbos map<Space>
        nnoremap <S-F4>  :let @a=""\|:let @a=colors_name\|:let @"=@a<CR>\|:echo @"<CR>

    " <F5>
        nnoremap <silent> <F5> :source ~/zdotfiles/link/.vimrc.local<CR>\|:echo colors_name<CR>
        nnoremap <silent> <S-F5> :vsplit ~/zdotfiles/2/vimrc.txt<CR>:vsplit ~/zdotfiles/link/.vimrc.local<CR>:vsplit ~/.vimrc<CR>:vsplit ~/.vimrc.before<CR>:vsplit ~/.vimrc.before<CR> \| exe "normal \<c-w>o"
        nnoremap <silent> <C-S-F5> nnoremap <silent> <C-F5> :vsplit ~/zdotfiles/link/wal.zsh<CR>:vsplit ~/zdotfiles/link/w.sh<CR>

    "<F6>
            "vnoremap <F6> :w! >> ~/zdotfiles/6/
            "nnoremap <C-F6> :vsplit ~/zdotfiles/6/
            "nnoremap <S-F6> :vsp ~/zdotfiles/6/
            "nnoremap <F6> V}y<C-w><C-w>ggGp



    " <F7>
        map <F7> :let @a=''\|g/ /y A \|:let @*=@a <Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>
        map <S-F7> :%s/<C-r><C-w>//gc<Left><Left><Left>

    " <F8>
            map <F8> :TagbarToggle<CR>
            map <S-F8> :diffthis<cr><esc><c-w><c-w>:diffthis<cr>
            map <f8><f8> :diffoff<cr>
            set diffopt=filler,context:4,iwhite

                if &diff
                    "Vimdiff use c-j and c-k to navigate"
                    nnoremap <C-j> ]c
                    nnoremap <C-Right> ]c
                    nnoremap <C-k> [c
                    nnoremap <C-Left> :diffupdate
                    colorscheme solarized
                    nnoremap q :qa! <CR>
                endif
                cnoremap <C-Left> :diffput \| diffupdate <CR>


    " <F9>
        nnoremap <silent> <F9> :SessionList<CR>
        nnoremap <silent> <S-F9> :SessionSave<CR>
        nnoremap <M-F9> :sessionopen
        nnoremap <C-F9> :SessionSaveAs

    " <F10>
        map <silent> <F10> <Esc>:call InsertCmd( '' )<CR><Insert>
        map N Nzz
        map n nzz
            "imap <silent> <F10> <Esc>:call InsertCmd( zwz )<CR><Insert>
            "map <silent> <F10>  :call InsertCmd( 'hostname' )<CR>
            "nnoremap <C-F10> call setqflist([]) | :bufdo grepadd! w %
    " <F11>
        "map <F11> y<C-W>n<C-W>Lp:w ~/.vim/bundle/neosnippet/autoload/neosnippet/snippets/_ak.snip
        "map <F11> y:vsplit ~/.vim/bundle/neosnippet/autoload/neosnippet/snippets/_w.snip<CR>

    " <F12>


                    "Conflict Analysis & Resolution
                        function! AA()
                            :g/\(Miall\|Cheldelin\|Cloke\|Ramsbotham\|McDonald\|Tidwell\|Pruitt\|Miall\|Hugh\|Oliver\|Ramsbotham\|and\|Tom\|Woodhouse\|Lederach\|John\|Paul\|Cheldelin\|Druckman\|and\|Fast\|eds\|Pruitt\|Dean\|and\|Kim\|Sung\|Hee\|Cloke\|Kenneth\|McDonald\|John\|and\|Louise\|Diamond\|Tidwell\|Alan\|C.\|Burton\|John\|Cheryl\|Duckworth\|Ph.D.Cheldelin\)/
                        endfunction

                    "Marks
                        "' jumps to the precise location of a marks (`)
                        "Apply the commands recorded in q on the vilual selection
                        vnoremap ` :normal @q<CR>

                " Make shift insert work in the gui as it does in the shell.
                    if has('gui_running')
                        silent noremap! <S-Insert> <MiddleMouse>
                    endif




        " Syntastic settings
            let g:syntastic_enable_signs=1          " Use :sign interace to mark syntax errors
            let g:syntastic_check_on_open=1         " Check for errors on buffer load
            let g:syntastic_auto_loc_list=1         " Open Error window automatically
            let g:syntastic_auto_jump=1             " Automatically jump to first detected error
            let g:syntastic_loc_list_height=3
            let g:syntastic_stl_format = '[%E{Error 1/%e: line %fe}%B{, }%W{Warning 1/%w: line %fw}]'

        " Gist settings
                let g:gist_open_browser_after_post=1
                let g:gist_detect_filetype=1
                let g:gist_browser_command = 'w3m %URL%'
                let g:gist_clip_command = 'xclip -selection clipboard'
                let g:gist_get_multiplefile = 1
                let g:gist_post_private = 1


                    " Python
                        let python_highlight_all = 1
                        hi pythonBuiltin        ctermfg=blue    cterm=NONE
                        hi pythonSync           ctermfg=red

                        autocmd FileType python setl autoindent
                        autocmd FileType python setl smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
                        autocmd FileType python setl tabstop=8 expandtab shiftwidth=4 softtabstop=4
                        autocmd FileType python setl omnifunc=pythoncomplete#Complete


            " Neosnippet
                "let g:neosnippet#disable_runtime_snippets
                let g:neosnippet#enable_snipmate_compatibility = 1
                let g:neocomplete#enable_at_startup                 = 1
                let g:neocomplete#sources#syntax#min_keyword_length = 3
                let g:neocomplete#min_keyword_length                = 0
                let g:neocomplete#enable_auto_delimiter             = 1
                let g:neosnippet#enable_snipmate_compatibility      = 1
                let g:neocomplete#enable_insert_char_pre            = 1
                let g:neocomplete#enable_smart_case                 = 1
                let g:neocomplete#enable_fuzzy_completion           = 1
                let g:neocomplete#enable_auto_select                = 0
                let g:neocomplete#enable_refresh_always             = 0


                " PythonSyntax: Highlight everything
                    let python_highlight_all=1
                    autocmd FileType python setl omnifunc=pythoncomplete#Complete
                    " Font
                   set guifont=Monaco\ for\ Powerline:h11
                    " Airline
                            set noshowmode
                            let g:airline_theme = 'solarized'
                            let g:airline_enable_branch = 1
                            let g:airline_powerline_fonts = 1
                            let g:airline_detect_whitespace = 1
                            let g:airline#extensions#hunks#non_zero_only = 1
                            let g:airline#extensions#tabline#enabled = 2
                            let g:airline#extensions#tabline#fnamemod = ':t'
                            let g:airline#extensions#tabline#buffer_min_count = 1

                            let g:syntastic_python_checkers = ['pyflakes']

                            " indentLine
                            let g:indentLine_char = '┊'
                            let g:indentLine_color_term = 239


                        " Syntastic
                                let g:syntastic_python_pylint_exe = "pylint2"
                                let g:syntastic_error_symbol = '✘'
                                let g:syntastic_warning_symbol = '⚠'
                                let g:syntastic_style_error_symbol = '⚡'
                                let g:syntastic_style_warning_symbol = '⚡'

                                    let g:pymode_lint_checker = 'pylint,pep8,mccabe,pep257'
                                    let g:pymode_lint_config = $HOME.'/.pylintrc'
                                    let g:pymode_lint_cwindow = 0

                                " Custom symbols will be supported in the future (I hope).
                                " See: https://github.com/klen/python-mode/pull/295
                                let g:pymode_lint_todo_symbol = '⚠'
                                let g:pymode_lint_comment_symbol = '⑊'
                                let g:pymode_lint_visual_symbol = '⑆'
                                let g:pymode_lint_error_symbol = '✘'
                                let g:pymode_lint_info_symbol = '●'
                                let g:pymode_lint_pyflakes_symbol = '●'

            " Font
                let g:Powerline_symbols = 'fancy'

                    " USe the current system list of words as dictionary for completion with
                        " C-X C-K  ( :he i_CTRL-X_CTRL-K )
                        if filereadable("/usr/share/dict/words")
                            set dictionary+=/usr/share/dict/words
                        endif

                " Set British English as the language for spelling corrections
                    set spelllang=en_gb

                " Tagbar: show the tag corresponding to the current cursor position
                        let g:tagbar_autoshowtag = 1
                    "tab
                        cmap <C-Left> :tabprevious<cr>
                        cmap <C-Right> :tabnext<cr>
                                """" """" """"
                                        "map <leader>to :tabnew<cr>
                                        " map <leader>te :tabedit
                                        "map <leader>tc :tabclose<cr>
                                        " map <leader>to :tabonly<cr>
                                        "map <leader>tn :tabnext<cr>
                                        "map <leader>tp :tabprevious<cr>
                                        " map <leader>tf :tabfirst<cr>
                                        " map <leader>tl :tablast<cr>
                                        " map <leader>tm :tabmove
                                        "nmap <C-Left> :tabpreious<cr>
                                        "vmap <C-Left> :tabprevious<cr>
                                        "vmap <C-Right> :tabnext<cr>

                                            " map <C-h> <C-w>
                                            " map <C-j> <C-w>j
                                            " map <C-k> <C-w>k
                                            " map <C-l> <C-w>


            " Buffer navigation
                    map <Tab> >>
                    map <s-tab> <<
                    set splitbelow splitright
                    map <M-Left> :bprevious<CR>
                    map <M-Right> :bnext<CR>
                    "map <S-Up> <C-W>_
                    "map <M-Up> <C-W>j<C-W>_
                    "map <M-Down> <C-W>k<C-W>_


                " [QA-Stack]
                    cab qmd vsplit ~/zdotfiles/9/web2py/applications/qastack/models/db.py
                    cab qcd vsplit ~/zdotfiles/9/web2py/applications/qastack/controllers/default.py<CR>
                    cab qvd vsplit ~/zdotfiles/9/web2py/applications/qastack/views/default/index.html<CR>

                "cab to the [1-10]
                    cab w99 w! ~/zdotfiles/9/web2py/applications/qastack/
                    cab w88 w! ~/zdotfiles/8/
                    cab w77 w! ~/zdotfiles/7/
                    cab w66 w! ~/zdotfiles/6/
                    cab w55 w! ~/zdotfiles/5/
                    cab w44 w! ~/zdotfiles/4/
                    cab w33 w! ~/zdotfiles/3/
                    cab w22 w! ~/zdotfiles/2/
                    cab w11 w! ~/zdotfiles/1/
                    cab w00 w! ~/zdotfiles/0/
                    cab 6w vsplit ~/zdotfiles/6/zapi_python.py
cabbrev W call

                        nnoremap <silent> w1 :vsplit ~/zdotfiles/1/.zsh/al.sh<cr>
                        nnoremap <silent> w2 :vsplit ~/zdotfiles/2/.vimrc.localw<cr>
                        "ipython"
                            cabbrev wpy vsplit ~/.config/ipython/profile_default/startup/w.ipy
                            cabbrev wwpy vsplit ~/.config/ipython/profile_default/startup/ww.ipy
                            cabbrev wpy !python %
                            cabbrev wak vsplit ~/zdotfiles/6/autokey/data/API/AK/ak_vim.txt
                            cabbrev wf !firefox %

                    "abbreviate
                        abbreviate CAR Conflict Analysis & Resolution
                        abbreviate w# """"""""""""""""""""""""<CR>
                        cabbrev ws %s/\s\+$//gc
                        cabbrev ws_ s/\s/_/gc
                        abbr #b #!/usr/bin/env bash
                        abbr #p #!/usr/bin/env python<CR>

        " w
                        cabbrev h tab h
                        nmap w<left> :exe "normal \<c-o>"<CR>
                        nmap w<right> :exec "normal gf"<CR>
                        nnoremap <silent> ; :q!<CR>
                        nnoremap ww Y
                        ":let @a=""\|:let @a=colors_name\|:let @"=@a<CR>\|:echo @"<CR>
                        "normal"
                        cabbrev wsh !bash %
                        imap <C-s> <C-o>:w<CR>
                        map <C-s> :w<CR>
                        map <C-w> :w<CR><F5>
                        nmap <Space><Left> %
                        nmap <Space><Right> *
                        nnoremap <Space><CR> :nohlsearch<CR><CR>
                        "html substitute "!sed 's/<[^>]*>//g' %
                        "imap ,,, <esc>bdwa<<esc>pa><cr></<esc>pa><esc>ka
                        "nnoremap <silent> wF :%s/\(.*\)\(conflict\)\(.*\)/\1\2\31/gc
                        map W :NeoSnippetEdit -vertical<CR>

                        vnoremap p <Esc>:let current_reg = @"<CR>gvdi<C-R>=current_reg<CR><Esc>

                    cabbrev wwww <C-r>#
                    cabbrev www <C-r>%
                    cabbrev ww <C-r>"<BS>
                        let @a=@q
                    let @x="V}y<Esc>:vsplit ~/.vimrc.local.w<CR>ggGp<ESC><C-W><C-W>"
                            map <CR> :


    vnoremap <silent> WW y<C-W><C-W>Gp<C-W><C-W>

                        " Select all.
                            map <c-a> ggVG
                        " Undo in insert mode.
                            imap <c-z> <c-o>u




                        fun! RangerChooser()
                            exec "silent !python ~/zdotfiles/5/ranger-1.6.1/ranger.py --choosefile=/tmp/chosenfile " . expand("%:p:h")
                            if ilereadable('/tmp/chosenfile')
                                exec 'edit ' . system('cat /tmp/chosenfile')
                                call system('rpythonm /tmp/chosenfile')
                            endif
                            redraw!
                        endfun
                            nnoremap <C-Left> :call RangerChooser()<CR>

                    " Split the Line at Cursor
                        nnoremap K i<cr><esc><right>
                        nnoremap <C-Up> m`o<Esc>``
                        nnoremap <C-Down> m`O<Esc>``

                    "Fold System
                        nnoremap 8 zMzvzz
                        nnoremap 9 zM
                        nnoremap 0 zR
                        nnoremap <space> za
                        vnoremap <space> zf

" Shell command {
    function! s:W_find_py(cmdline)
        botright new
        setlocal buftype=nofile
        setlocal bufhidden=delete
        setlocal nobuflisted
        setlocal noswapfile
        setlocal nowrap
        setlocal filetype=python
        setlocal syntax=py
        colorscheme solarized

        call setline(1, a:cmdline)
        call setline(2, substitute(a:cmdline, '.', '=', 'g'))
        execute 'silent $read !' . escape(a:cmdline, '%#')
        setlocal nomodifiable
        setlocal syntax=vim
        1
    endfunction

    command! -complete=file -nargs=+ Wfindpy call s:W_find_py(<q-args>)
        " e.g. Grep current file for <search_term>: Shell grep -Hn <search_term> %

                "let zwz = 'grep -RHn' "let cmd = @a

                function! Zshell(cmd)
                    exe ':silent !'.a:cmd.' > /tmp/vim.insert.xxx 2>/dev/null'
                    botright new
                    setlocal buftype=nofile
                    setlocal bufhidden=delete
                    setlocal nobuflisted
                    setlocal noswapfile
                    setlocal nowrap
                    setlocal filetype=shell
                    setlocal syntax=sh
                    colorscheme solarized
                    "let l = readfile( '/tmp/vim.insert.xxx' )
                    "call setline(1, a:cmd)
                    "call setline(2, substitute(a:cmd, '.', '=', 'g'))
                    "execute 'silent $read !' . escape(a:cmd, '%#')
                    exec 'edit ' . system('cat /tmp/vim.insert.xxx')
                    redraw!
                endfunction

    " SnipMate {
        " Setting the author var
        " If forking, please overwrite in your .vimrc.local file
        let g:snips_author = 'Ahmed Alghamdi <tazjel@gmail.com>'
    " }

       let g:spf13_no_easyWindows = 1

"find files

fun! FindFiles()
    let $filename = input("Enter file name to find: ")
    let $error_file = $HOME."/.findfile.output"
    silent! exe "!find . -iname \"".$filename."\" \| xargs file \| perl -pe 's/:/:1:/' > ".$error_file
    cfile $error_file
    copen
    redraw!
endfun

" A function to save word under cursor to a file
function! SaveWord()
   normal yiw
   exe ':!echo '.@0.' >> $HOME/.vimrc.local.w'
endfunction
map <C-F6> :call SaveWord()<CR>


" Using templates
 function! LoadTemplate(extension)
 silent! :execute '0r $HOME/.vim/templates/' . a:extension . '.tpl'
 silent! execute 'source $HOME/.vim/templates/' . a:extension .
 '.patterns.tpl'
 endfunction
"
 "autocmd BufNewFile * silent! call LoadTemplate('%:e')

 "Map Ctrl+j for jumping between templates placeholders
nnoremap <c-j> /<+.\{-1,}+><cr>c/+>/e<cr>
inoremap <c-j> <ESC>/<+.\{-1,}+><cr>c/+>/e<cr>

" Match template placeholders
" match Todo /<+.\++>/

" Extending CleverTab and map Tab to autocompletion
function! SuperCleverTab()
" check if at beginning of line or after a space
  if strpart(getline('.'), 0, col('.') - 1) =~ '^\s*$'
    return "\<Tab>"
  else
" do we have omni completion available
    if &omnifunc != ''
" use omni-completion 1. priority
      return "\<C-X>\<C-O>"
    elseif &dictionary != ''
" no omni-completion, try dictionary completion
      return "\<C-K>"
    else
" use known-word completion
      return "\<C-N>"
    endif
  endif
endfunction
" bind funciton to the tab key
inoremap <Tab> <C-R>=SuperCleverTab()<cr>

" Map <C-right> to go next buffer
    map <C-right> <ESC>:bn<CR>
" Map <C-left> to go previous buffer
    map <C-left> <ESC>:bp<CR>
