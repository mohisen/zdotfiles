<!-- This HTML file has been created by texi2html 1.30
     from /mit/gnu/src/screen-3.6.2/doc/screen.texinfo on 8 May 1995 -->

<TITLE>Screen - Virtual Terminal</TITLE>
<P>Go to the <A HREF="screen_9.html">previous</A>, <A HREF="screen_11.html">next</A> section.<P>
<H1><A NAME="SEC48" HREF="screen_toc.html#SEC48">Virtual Terminal</A></H1>
<P>
Each window in a <CODE>screen</CODE> session emulates a VT100 terminal, with
some extra functions added.  The commands described here modify the
terminal emulation.
<P>
<A NAME="IDX81"></A>
<H2><A NAME="SEC49" HREF="screen_toc.html#SEC49">Control Sequences</A></H2>
The following is a list of control sequences recognized by
<CODE>screen</CODE>.  <SAMP>`(V)'</SAMP> and <SAMP>`(A)'</SAMP> indicate VT100-specific and
ANSI- or ISO-specific functions, respectively.
<P>
<PRE>
ESC E                           Next Line
ESC D                           Index
ESC M                           Reverse Index
ESC H                           Horizontal Tab Set
ESC Z                           Send VT100 Identification String
ESC 7                   (V)     Save Cursor and Attributes
ESC 8                   (V)     Restore Cursor and Attributes
ESC [s                  (A)     Save Cursor and Attributes
ESC [u                  (A)     Restore Cursor and Attributes
ESC c                           Reset to Initial State
ESC =                   (V)     Application Keypad Mode
ESC &#62;                   (V)     Numeric Keypad Mode
ESC # 8                 (V)     Fill Screen with E's
ESC \                   (A)     String Terminator
ESC ^                   (A)     Privacy Message String (Message Line)
ESC !                           Global Message String (Message Line)
ESC k                           Title Definition String
ESC P                   (A)     Device Control String
                                Outputs a string directly to the host
                                terminal without interpretation.
ESC _                   (A)     Application Program Command (not used)
ESC ]                   (A)     Operating System Command (not used)
Control-N               (A)     Lock Shift G1 (SO)
Control-O               (A)     Lock Shift G0 (SI)
ESC n                   (A)     Lock Shift G2
ESC o                   (A)     Lock Shift G3
ESC N                   (A)     Single Shift G2
ESC O                   (A)     Single Shift G3
ESC ( Pcs               (A)     Designate character set as G0
ESC ) Pcs               (A)     Designate character set as G1
ESC * Pcs               (A)     Designate character set as G2
ESC + Pcs               (A)     Designate character set as G3
ESC [ Pn ; Pn H                 Direct Cursor Addressing
ESC [ Pn ; Pn f                 Direct Cursor Addressing
ESC [ Pn J                      Erase in Display
      Pn = None or 0            From Cursor to End of Screen
           1                    From Beginning of Screen to Cursor
           2                    Entire Screen
ESC [ Pn K                      Erase in Line
      Pn = None or 0            From Cursor to End of Line
           1                    From Beginning of Line to Cursor
           2                    Entire Line
ESC [ Pn A                      Cursor Up
ESC [ Pn B                      Cursor Down
ESC [ Pn C                      Cursor Right
ESC [ Pn D                      Cursor Left
ESC [ Ps ;...; Ps m             Select Graphic Rendition
      Ps = None or 0            Default Rendition
           1                    Bold
           2            (A)     Faint
           3            (A)     <I>Standout</I> Mode (ANSI: Italicized)
           4                    Underlined
           5                    Blinking
           7                    Negative Image
           22           (A)     Normal Intensity
           23           (A)     <I>Standout</I> Mode off (ANSI: Italicized off)
           24           (A)     Not Underlined
           25           (A)     Not Blinking
           27           (A)     Positive Image
ESC [ Pn g                      Tab Clear
      Pn = None or 0            Clear Tab at Current Position
           3                    Clear All Tabs
ESC [ Pn ; Pn r         (V)     Set Scrolling Region
ESC [ Pn I              (A)     Horizontal Tab
ESC [ Pn Z              (A)     Backward Tab
ESC [ Pn L              (A)     Insert Line
ESC [ Pn M              (A)     Delete Line
ESC [ Pn @              (A)     Insert Character
ESC [ Pn P              (A)     Delete Character
ESC [ Ps ;...; Ps h             Set Mode
ESC [ Ps ;...; Ps l             Reset Mode
      Ps = 4            (A)     Insert Mode
           ?1           (V)     Application Cursor Keys
           ?3           (V)     Change Terminal Width to 132 columns
           ?5           (V)     Visible Bell (<SAMP>`On'</SAMP> followed by <SAMP>`Off'</SAMP>)
           ?6           (V)     <SAMP>`Origin'</SAMP> Mode
           ?7           (V)     <SAMP>`Wrap'</SAMP> Mode
ESC [ 5 i               (A)     Start relay to printer (ANSI Media Copy)
ESC [ 4 i               (A)     Stop relay to printer (ANSI Media Copy)
ESC [ 8 ; Ph ; Pw t             Resize the window to <SAMP>`Ph'</SAMP> lines and
                                <SAMP>`Pw'</SAMP> columns (SunView special)
ESC [ c                         Send VT100 Identification String
ESC [ &#62; c                       Send Secondary Device Attributes String
ESC [ 6 n                       Send Cursor Position Report

</PRE>
<P>
<A NAME="IDX82"></A>
<H2><A NAME="SEC50" HREF="screen_toc.html#SEC50">Input Translation</A></H2>
In order to do a full VT100 emulation <CODE>screen</CODE> has to detect
that a sequence of characters in the input stream was generated
by a keypress on the user's keyboard and insert the VT100
style escape sequence. <CODE>Screen</CODE> has a very flexible way of doing
this by making it possible to map arbitrary commands on arbitrary
sequences of characters. For standard VT100 emulation the command
will always insert a string in the input buffer of the window
(see also command <CODE>stuff</CODE>, see section <A HREF="screen_11.html#SEC70">Paste</A>).
Because the sequences generated by a keypress can
change after a reattach from a different terminal type, it is
possible to bind commands to the termcap name of the keys.
<CODE>Screen</CODE> will insert the correct binding after each
reattach. See section <A HREF="screen_13.html#SEC82">Bindkey</A> for further details on the syntax and examples.
<P>
Here is the table of the default key bindings. (A) means that the
command is executed if the keyboard is switched into application
mode.
<PRE>

Key name        Termcap name    Command
-----------------------------------------------------
Cursor up            ku         stuff \033[A
                                stuff \033OA      (A)
Cursor down          kd         stuff \033[B
                                stuff \033OB      (A)
Cursor right         kr         stuff \033[C
                                stuff \033OC      (A)
Cursor left          kl         stuff \033[D
                                stuff \033OD      (A)
Function key 0       k0         stuff \033[10~
Function key 1       k1         stuff \033OP
Function key 2       k2         stuff \033OQ
Function key 3       k3         stuff \033OR
Function key 4       k4         stuff \033OS
Function key 5       k5         stuff \033[15~
Function key 6       k6         stuff \033[17~
Function key 7       k7         stuff \033[18~
Function key 8       k8         stuff \033[19~
Function key 9       k9         stuff \033[20~
Function key 10      k;         stuff \033[21~
Function key 11      F1         stuff \033[22~
Function key 12      F2         stuff \033[23~
Backspace            kb         stuff \010
Home                 kh         stuff \033[1~
End                  kH         stuff \033[4~
Insert               kI         stuff \033[2~
Delete               kD         stuff \033[3~
Page up              kP         stuff \033[5~
Page down            kN         stuff \033[6~
Keypad 0             f0         stuff 0
                                stuff \033Op      (A)
Keypad 1             f1         stuff 1
                                stuff \033Oq      (A)
Keypad 2             f2         stuff 2
                                stuff \033Or      (A)
Keypad 3             f3         stuff 3
                                stuff \033Os      (A)
Keypad 4             f4         stuff 4
                                stuff \033Ot      (A)
Keypad 5             f5         stuff 5
                                stuff \033Ou      (A)
Keypad 6             f6         stuff 6
                                stuff \033Ov      (A)
Keypad 7             f7         stuff 7
                                stuff \033Ow      (A)
Keypad 8             f8         stuff 8
                                stuff \033Ox      (A)
Keypad 9             f9         stuff 9
                                stuff \033Oy      (A)
Keypad +             f+         stuff +
                                stuff \033Ok      (A)
Keypad -             f-         stuff -
                                stuff \033Om      (A)
Keypad *             f*         stuff *
                                stuff \033Oj      (A)
Keypad /             f/         stuff /
                                stuff \033Oo      (A)
Keypad =             fq         stuff =
                                stuff \033OX      (A)
Keypad .             f.         stuff .
                                stuff \033On      (A)
Keypad ,             f,         stuff ,
                                stuff \033Ol      (A)
Keypad enter         fe         stuff \015
                                stuff \033OM      (A)
</PRE>
<P>
<H2><A NAME="SEC51" HREF="screen_toc.html#SEC51">Bell</A></H2>
<P>
<A NAME="IDX83"></A>
<U>Command:</U> <B>bell_msg</B> <I>[message]</I><P>
(none)<BR>
When a bell character is sent to a background window, <CODE>screen</CODE>
displays a notification in the message line.  The notification message
can be re-defined by means of the <CODE>bell</CODE> command.  Each occurrence
of <SAMP>`%'</SAMP> in <VAR>message</VAR> is replaced by the number of the window to
which a bell has been sent, and each occurrence of <SAMP>`~'</SAMP> is replaced
by the definition for bell in your termcap (usually an audible bell).
The default message is
<P>
<PRE>
'Bell in window %'
</PRE>
<P>
An empty message can be supplied to the <CODE>bell_msg</CODE> command to suppress
output of a message line (<CODE>bell_msg ""</CODE>).
<P>
<A NAME="IDX84"></A>
<P>
<A NAME="IDX85"></A>
<U>Command:</U> <B>vbell</B> <I>[state]</I><P>
(<KBD>C-a C-g</KBD>)<BR>
Sets or toggles the visual bell setting for the current window. If
<CODE>vbell</CODE> is switched to <SAMP>`on'</SAMP>, but your
terminal does not support a visual bell, the visual bell message is
displayed in the status line when the bell character is received.
Visual bell support of a terminal is
defined by the termcap variable <CODE>vb</CODE>. See section `Visual Bell' in <CITE>The Termcap Manual</CITE>, for more information on visual bells.
The equivalent terminfo capability is <CODE>flash</CODE>.
<P>
Per  default, <CODE>vbell</CODE> is <SAMP>`off'</SAMP>, thus the audible bell is used.
<P>
<A NAME="IDX86"></A>
<U>Command:</U> <B>vbell_msg</B> <I>[message]</I><P>
(none)<BR>
Sets the visual bell message. <VAR>message</VAR> is printed to the status
line if the window receives a bell character (^G), <CODE>vbell</CODE> is
set to <SAMP>`on'</SAMP> and the terminal does not support a visual bell.
The default message is <SAMP>`Wuff, Wuff!!'</SAMP>.
Without parameter, the current message is shown.
<P>
<A NAME="IDX87"></A>
<U>Command:</U> <B>vbellwait</B> <I>sec</I><P>
(none)<BR>
Define a delay in seconds after each display of <CODE>screen</CODE> 's visual
bell message. The default is 1 second.
<P>
<A NAME="IDX88"></A>
<H2><A NAME="SEC52" HREF="screen_toc.html#SEC52">Clear</A></H2>
<A NAME="IDX89"></A>
<U>Command:</U> <B>clear</B><P>
(<KBD>C-a C</KBD>)<BR>
Clears the screen and saves its contents to the scrollback buffer.
<P>
<H2><A NAME="SEC53" HREF="screen_toc.html#SEC53">Height</A></H2>
<A NAME="IDX90"></A>
<U>Command:</U> <B>height</B> <I><VAR>[lines]</VAR></I><P>
(none)<BR>
Set the display height to a specified number of lines. When no
argument is given it toggles between 24 and 42 lines display.
<P>
<A NAME="IDX91"></A>
<A NAME="IDX92"></A>
<H2><A NAME="SEC54" HREF="screen_toc.html#SEC54">Info</A></H2>
<A NAME="IDX93"></A>
<U>Command:</U> <B>info</B><P>
(<KBD>C-a i</KBD>, <KBD>C-a C-i</KBD>)<BR>
Uses the message line to display some information about the current
window: the cursor position in the form <SAMP>`(<VAR>column</VAR>,<VAR>row</VAR>)'</SAMP>
starting with <SAMP>`(1,1)'</SAMP>, the terminal width and height plus the size
of the scrollback buffer in lines, like in <SAMP>`(80,24)+50'</SAMP>, various
flag settings (flow-control, insert mode, origin mode, wrap mode,
application-keypad mode, output logging, activity monitoring, and redraw
(<SAMP>`+'</SAMP> indicates enabled, <SAMP>`-'</SAMP> not)), the currently active
character set (<SAMP>`G0'</SAMP>, <SAMP>`G1'</SAMP>, <SAMP>`G2'</SAMP>, or <SAMP>`G3'</SAMP>), and in
square brackets the terminal character sets that are currently
designated as <SAMP>`G0'</SAMP> through <SAMP>`G3'</SAMP>.  For system information use
<CODE>time</CODE>.
<P>
<H2><A NAME="SEC55" HREF="screen_toc.html#SEC55">Redisplay</A></H2>
<P>
<A NAME="IDX94"></A>
<U>Command:</U> <B>allpartial</B> <I>state</I><P>
(none)<BR>
If set to on, only the current cursor line is refreshed on window change.
This affects all windows and is useful for slow terminal lines. The 
previous setting of full/partial refresh for each window is restored
with <CODE>allpartial off</CODE>. This is a global flag that immediately takes effect
on all windows overriding the <CODE>partial</CODE> settings. It does not change the 
default redraw behaviour of newly created windows. 
<P>
<A NAME="IDX95"></A>
<U>Command:</U> <B>partial</B> <I>state</I><P>
(none)<BR>
Defines whether the display should be refreshed (as with
<CODE>redisplay</CODE>) after switching to the current window. This command
only affects the current window.  To immediately affect all windows use the
<CODE>allpartial</CODE> command.  Default is <SAMP>`off'</SAMP>, of course.  This default is 
fixed, as there is currently no <CODE>defpartial</CODE> command. 
<P>
<A NAME="IDX96"></A>
<A NAME="IDX97"></A>
<P>
<A NAME="IDX98"></A>
<U>Command:</U> <B>redisplay</B><P>
(<KBD>C-a l</KBD>, <KBD>C-a C-l</KBD>)<BR>
Redisplay the current window.  Needed to get a full redisplay in
partial redraw mode.
<P>
<H2><A NAME="SEC56" HREF="screen_toc.html#SEC56">Wrap</A></H2>
<A NAME="IDX99"></A>
<A NAME="IDX100"></A>
<P>
<A NAME="IDX101"></A>
<U>Command:</U> <B>wrap</B> <I>state</I><P>
(<KBD>C-a r</KBD>, <KBD>C-a C-r</KBD>) <BR>
Sets the line-wrap setting for the current window.  When line-wrap is
on, the second consecutive printable character output at the last column
of a line will wrap to the start of the following line.  As an added
feature, backspace (^H) will also wrap through the left margin to the
previous line.  Default is <SAMP>`on'</SAMP>.
<P>
<A NAME="IDX102"></A>
<U>Command:</U> <B>defwrap</B> <I>state</I><P>
(none) <BR>
Same as the <CODE>wrap</CODE> command except that the default setting for new 
windows is changed. Initially line-wrap is on and can be toggled with the 
<CODE>wrap</CODE> command (<KBD>C-a r</KBD>) or by means of "C-a : wrap on|off".
<P>
<A NAME="IDX103"></A>
<H2><A NAME="SEC57" HREF="screen_toc.html#SEC57">Reset</A></H2>
<A NAME="IDX104"></A>
<U>Command:</U> <B>reset</B><P>
(<KBD>C-a Z</KBD>)<BR>
Reset the virtual terminal to its "power-on" values. Useful when strange
settings (like scroll regions or graphics character set) are left over from
an application.
<P>
<A NAME="IDX105"></A>
<H2><A NAME="SEC58" HREF="screen_toc.html#SEC58">Width</A></H2>
<A NAME="IDX106"></A>
<U>Command:</U> <B>width</B> <I>[num]</I><P>
(<KBD>C-a W</KBD>)<BR>
Toggle the window width between 80 and 132 columns, or set it to
<VAR>num</VAR> columns if an argument is specified.  This requires a
capable terminal and the termcap entries <SAMP>`Z0'</SAMP> and <SAMP>`Z1'</SAMP>.  See
the <CODE>termcap</CODE> command (see section <A HREF="screen_15.html#SEC89">Termcap</A>), for more information.
<P>
<H2><A NAME="SEC59" HREF="screen_toc.html#SEC59">Character Processing</A></H2>
<P>
<A NAME="IDX107"></A>
<U>Command:</U> <B>c1</B> <I>[state]</I><P>
(none)<BR>
Change c1 code processing. <SAMP>`c1 on'</SAMP> tells screen to treat
the input characters between 128 and 159 as control functions.
Such an 8-bit code is normally the same as ESC followed by the 
corresponding 7-bit code. The default setting is to process c1 
codes and can be changed with the <SAMP>`defc1'</SAMP> command.
Users with fonts that have usable characters in the 
c1 positions may want to turn this off.
<P>
<A NAME="IDX108"></A>
<U>Command:</U> <B>gr</B> <I>[state]</I><P>
(none)<BR>
Turn GR charset switching on/off. Whenever screens sees an input
char with an 8th bit set, it will use the charset stored in the
GR slot and print the character with the 8th bit stripped. The
default (see also <SAMP>`defgr'</SAMP>) is not to process GR switching because
otherwise the ISO88591 charset would not work.
<P>
<A NAME="IDX109"></A>
<U>Command:</U> <B>kanji</B> <I>wtype [dtype]</I><P>
(none)<BR>
Tell screen how to process kanji input/output. <VAR>wtype</VAR> and
<VAR>dtype</VAR> must be one of the strings <SAMP>`jis'</SAMP>, <SAMP>`euc'</SAMP> or
<SAMP>`sjis'</SAMP>. The first argument sets the kanji type of the current
window. Each window can emulate a different type. The optional second
parameter tells screen how to write the kanji codes to the
connected terminal. The preferred method of setting the display type
is to use the <SAMP>`KJ'</SAMP> termcap entry. See section <A HREF="screen_15.html#SEC94">Special Terminal Capabilities</A>.
See also <SAMP>`defkanji'</SAMP>, which changes the default setting of a new
window.
<P>
<A NAME="IDX110"></A>
<U>Command:</U> <B>defc1</B> <I>state</I><P>
(none)<BR>
Same as the <SAMP>`c1'</SAMP> command except that the default setting for
new windows is changed. Initial setting is <SAMP>`on'</SAMP>.
<P>
<A NAME="IDX111"></A>
<U>Command:</U> <B>defgr</B> <I>state</I><P>
(none)<BR>
Same as the <SAMP>`gr'</SAMP> command except that the default setting for
new windows is changed. Initial setting is <SAMP>`off'</SAMP>.
<P>
<A NAME="IDX112"></A>
<U>Command:</U> <B>defkanji</B> <I>wtype</I><P>
(none)<BR>
Same as the <SAMP>`kanji'</SAMP> command except that the default setting for
new windows is changed. Initial setting is <SAMP>`off'</SAMP>, i.e. <SAMP>`jis'</SAMP>.
<P>
<P>Go to the <A HREF="screen_9.html">previous</A>, <A HREF="screen_11.html">next</A> section.<P>
