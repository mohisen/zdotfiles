
Reference :
http://www.renedohmen.nl/blog/category/computer-stuff/


Installing your web2py Stack on the Heroku cloud in 4 simple steps

Posted by acidjunk on zaterdag jan 5, 2013 Under Computerz
One of the coolest things about web2py is it’s ability to run on most of the modern cloud solutions that are available on the web. It runs, without much modifications on Heroku, Amazon cloud, Google App Engine, Redhats OpenShift, Dotcloud and probably on some “do it yourself” cloud solutions. So on a cloudy and rainy day I started some tests to see what clouds would be cloudy enough for our purposes.
Here is what I did to get a testing environment on the Heroku App cloud on my Ubuntu 12.04 LTS Workstation:
Sign up and follow the instuctionsin Heroku Quick start manual to get a Heroku toolchain for Ubuntu installed. You could copy paste the next command if you feel safe with me 
wget -qO- https://toolbelt.heroku.com/install-ubuntu.sh | sh
Get a clean web2py:
git clone https://github.com/web2py/web2py.git heroku_root
Copy Massimo’s “one script does it all” solution to the web2py root and run it:
cd heroku_root
cp scripts/setup-web2py-heroku.sh .
chmod +x setup-web2py-heroku.sh
./setup-web2py-heroku.sh

Using the web2py scheduler for long running jobs
Posted by acidjunk on zaterdag dec 8, 2012 Under Computerz
The info in the book describes the scheduler and favors it over cron; So I decided to use it for fetching the RSS feeds in one of our web apps.
Create a new model tasks.py
def doTask():
     return dict(result="done")

from gluon.scheduler import Scheduler
Scheduler(db,dict(testtask=doTask))
Now web2py will notice the call to Scheduler and it will create the needed tables. You can now use the app admin to enter the first task.

With your new task in there; you are almost ready. You can now start a new web2py instance that will run the tasks for you:
python web2py.py --nogui -K APP_NAME -D15
The -D15 indicates Debug loglevel-> 15 is info
Output
web2py Web Framework
Created by Massimo Di Pierro, Copyright 2007-2012
Version 2.3.0 (2012-12-07 10:57:44) rc1
Database drivers available: SQLite(sqlite3), MySQL(pymysql), MySQL(MySQLdb), PostgreSQL(pg8000), IMAP(imaplib)
starting single-scheduler for "APP_NAME"...
You will see your tasks being scheduled; it will look like this:

Some quick links
## schedule jobs using

http://127.0.0.1:8000/APP_NAME/appadmin/insert/db/scheduler_task

## monitor scheduled jobs

http://127.0.0.1:8000/APP_NAME/appadmin/select/db?query=db.scheduler_task.id>0

## view completed jobs

http://127.0.0.1:8000/APP_NAME/appadmin/select/db?query=db.scheduler_run.id>0

## view workers

http://127.0.0.1:8000/APP_NAME/appadmin/select/db?query=db.scheduler_worker.id>0
More info
You will find a test case and some code here
Tags : | add comments
