<snippets namespace="" license="LGPL v3+" filetypes="C" authors="Bart Polot" name="GNUnet">
 <script></script>
 <item>
  <displayprefix></displayprefix>
  <match>multihashmap_iterator</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(cls, key, value)</displayarguments>
  <fillin>
/**
 * @brief ${documentation}
 * 
 * Iterator over ${value_doc}s indexed by ${key_doc} in a MultiHashMap.
 *
 * @param cls Closure (${closure_doc}).
 * @param key Current key code (${key_doc}).
 * @param value Value in the hash map (${value_doc}).
 * 
 * @return GNUNET_YES if we should continue to iterate,
 *         GNUNET_NO if not.
 */

static int
${iterator_name} (void *cls,
const struct GNUNET_HashCode * key,
void *value)
{
  ${cursor}
}

</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>scheduler_task</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(cls, tc)</displayarguments>
  <fillin>/**
 * @brief ${documentation}
 *
 * @param cls Closure (${doc_closure}).
 * @param tc Task context.
 */
static void
${task_name} (void *cls, const struct GNUNET_SCHEDULER_TaskContext *tc)
{
  ${cursor}
}

</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>client_handler</match>
  <displaypostfix>in service</displaypostfix>
  <displayarguments>(cls, client, message)</displayarguments>
  <fillin>/**
 * @brief ${documentation}
 * 
 * Handler for ${doc_short}.
 *
 * @param cls Closure (${cls_doc}).
 * @param client Identification of the client.
 * @param message The actual message.
 */
static void
handle_${name} (void *cls, struct GNUNET_SERVER_Client *client,
const struct GNUNET_MessageHeader *message)
{
  ${cursor}
}
</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>core_handler</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(cls, peer, message, atsi, atsi_count)</displayarguments>
  <fillin>/**
 * @brief ${documentation}
 *
 * Handler for ${doc_short}.
 *
 * @param cls Closure (${cls_doc}).
 * @param peer Peer identity this notification is about.
 * @param message The actual message.
 * @param atsi Performance data.
 * @param atsi_count Number of records in 'atsi'.
 *
 * @return GNUNET_OK to keep the connection open,
 *         GNUNET_SYSERR to close it (signal serious error)
 */
static int
handle_${name} (void *cls, const struct GNUNET_PeerIdentity *peer,
const struct GNUNET_MessageHeader *message,
const struct GNUNET_ATS_Information *atsi,
unsigned int atsi_count)
{
  ${cursor}
}
</fillin>
 </item>
</snippets>
