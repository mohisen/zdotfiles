<?xml version="1.0"?>
<RDF:RDF xmlns:NS1="http://amb.vis.ne.jp/mozilla/scrapbook-rdf#"
         xmlns:NC="http://home.netscape.com/NC-rdf#"
         xmlns:RDF="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <RDF:Description RDF:about="urn:scrapbook:item20130524050741#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" tazjel@gmail.com ▼ | My favorites ▼ | Profile | Sign out Logo pyfpdf Simple PDF generation for Python (FPDF PHP port) AKA fpdf.py Project Home Downloads Wiki Issues Source Search for WriteHTML simple HTML rendering for reports Featured, Phase-Support Updated May 27, 2011 by reingart Introduction PyFPDF now supports basic HTML, mainly intended to write reports from web frameworks. It understands a limited subset of the HTML language, and it doesn't support advanced features nor CSS (look below). HTMLMixin could be used along with FPDF class to implement this functionality (see the example). Sample: html.pdf Details HTML tags and attributes supported: H1 to H8: headings (align attribute) P: paragraphs (align attributes) B, I, U: bold, italic, underline FONT: (face, size, color attributes) CENTER for aling A: links (href attribute)) IMG: images (src, width, height attributes) OL/UL/LI: ordered, unordered and list items (can be nested) TABLE: (border, width attributes) THEAD: header (opens each page) TFOOT: footer (closes each page) TBODY: actual rows TR: rows (bgcolor attribute) TH: highlight cells (align, bgcolor, width attributes) TD: rows (align, bgcolor, width attribute) Note: Tables should have at least a first TH row with width attribute. Example html = &quot;&quot;&quot; &lt;H1 align=&quot;center&quot;&gt;html2fpdf&lt;/H1&gt; &lt;h2&gt;Basic usage&lt;/h2&gt; &lt;p&gt;You can now easily print text mixing different styles : &lt;B&gt;bold&lt;/B&gt;, &lt;I&gt;italic&lt;/I&gt;, &lt;U&gt;underlined&lt;/U&gt;, or &lt;B&gt;&lt;I&gt;&lt;U&gt;all at once&lt;/U&gt;&lt;/I&gt;&lt;/B&gt;!&lt;BR&gt;You can also insert links on text, such as &lt;A HREF=&quot;http://www.fpdf.org&quot;&gt;www.fpdf.org&lt;/A&gt;, or on an image: click on the logo.&lt;br&gt; &lt;center&gt; &lt;A HREF=&quot;http://www.fpdf.org&quot;&gt;&lt;img src=&quot;tutorial/logo.png&quot; width=&quot;104&quot; height=&quot;71&quot;&gt;&lt;/A&gt; &lt;/center&gt; &lt;h3&gt;Sample List&lt;/h3&gt; &lt;ul&gt;&lt;li&gt;option 1&lt;/li&gt; &lt;ol&gt;&lt;li&gt;option 2&lt;/li&gt;&lt;/ol&gt; &lt;li&gt;option 3&lt;/li&gt;&lt;/ul&gt; &lt;table border=&quot;0&quot; align=&quot;center&quot; width=&quot;50%&quot;&gt; &lt;thead&gt;&lt;tr&gt;&lt;th width=&quot;30%&quot;&gt;Header 1&lt;/th&gt;&lt;th width=&quot;70%&quot;&gt;header 2&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;cell 1&lt;/td&gt;&lt;td&gt;cell 2&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;cell 2&lt;/td&gt;&lt;td&gt;cell 3&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &quot;&quot;&quot; from pyfpdf import FPDF, HTMLMixin class MyFPDF(FPDF, HTMLMixin): pass pdf=MyFPDF() #First page pdf.add_page() pdf.write_html(html) pdf.output('html.pdf','F') See html.py or Web2Py for a complete example Comment by project member jurgis.pralgauskis, Apr 28, 2013 if you have unicode in html, you should set ttf font via &lt;font&gt; tag pdf.add_font('DejaVu?', '', 'DejaVuSans?.ttf', uni=True) pdf.write_html(&quot;&lt;font face='DejaVu'&gt;%s&lt;/font&gt;&quot; % str(XML(tags, sanitize=False))) ps.: you might need to add other variations for &lt;b&gt; &lt;i&gt; pdf.add_font('DejaVu?', 'B', 'DejaVuSans?-Bold.ttf', uni=True) pdf.add_font('DejaVu?', 'I', 'DejaVuSans?-Oblique.ttf', uni=True) pdf.add_font('DejaVu?', 'BI', 'DejaVuSans?-BoldOblique?.ttf', uni=True) more: https://code.google.com/p/pyfpdf/wiki/Unicode Hint: You can use Wiki Syntax. Enter a comment: [It's All Text!] Terms - Privacy - Project Hosting Help Powered by Google Project Hosting Projects tazjel Starred projects altdragapt-cygardesiaautokeycopyqcyg-aptdragonflygooglefontdirectoryjquery-ui-vkkey-monminttymobileterminalmsysgitmusic21puttycygswapytextroomtweetxuc-debugweb2py Find open source projects...Create a project... tazjel@gmail.comabobani@gmail.com Sign in with another account... " />
  <RDF:Description RDF:about="urn:scrapbook:item20130524050654#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" tazjel@gmail.com ▼ | My favorites ▼ | Profile | Sign out Logo pyfpdf Simple PDF generation for Python (FPDF PHP port) AKA fpdf.py Project Home Downloads Wiki Issues Source Search for Unicode unicode utf-8 ttf font support (based on sFPDF) Phase-Support, Featured Updated Dec 20, 2012 by romiq...@gmail.com Introduction The FPDF class was modified adding UTF-8 support. Moreover, it embeds only the necessary parts of the fonts that are used in the document, making the file size much smaller than if the whole fonts were embedded. These features were originally developed for the mPDF project, and ported from Ian Back's sFPDF LGPL PHP version. Before you can use UTF-8, you have to install at least one Unicode font in the font directory (or system font folder). Some free font packages are available for download (extract them into font folder): DejaVu family: Sans, Sans Condensed, Serif, Serif Condensed, Sans Mono (Supports more than 200 languages) GNU FreeFont family: FreeSans, FreeSerif, FreeMono Indic (ttf-indic-fonts debian/ubuntu package) for Bengali, Devanagari, Gujarati, Gurmukhi (including the variants for Punjabi), Kannada, Malayalam, Oriya, Tamil, Telugu, Tibetan AR PL New Sung (firefly): The Open Source Chinese Font (also supports others east-asia languages) Alee (ttf-alee arch linux package): General purpose Hangul truetype fonts that Contain Korean syllable and Latin9 (iso8859-15) characters. Fonts-TLWG (formerly ThaiFonts-Scalable) These fonts are included with this library installers, see Free Font Pack for FPDF below for more information. Then, to use a Unicode font in your script, pass True as the fourth parameter of AddFont(). Example This example uses several free fonts to display some Unicode strings. Be sure to install the fonts in the font directory first. #!/usr/bin/env python # -*- coding: utf8 -*- from fpdf import FPDF pdf = FPDF() pdf.add_page() # Add a DejaVu Unicode font (uses UTF-8) # Supports more than 200 languages. For a coverage status see: # http://dejavu.svn.sourceforge.net/viewvc/dejavu/trunk/dejavu-fonts/langcover.txt pdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True) pdf.set_font('DejaVu', '', 14) text = u&quot;&quot;&quot; English: Hello World Greek: Γειά σου κόσμος Polish: Witaj świecie Portuguese: Olá mundo Russian: Здравствуй, Мир Vietnamese: Xin chào thế giới Arabic: مرحبا العالم Hebrew: שלום עולם &quot;&quot;&quot; for txt in text.split('\n'): pdf.write(8, txt) pdf.ln(8) # Add a Indic Unicode font (uses UTF-8) # Supports: Bengali, Devanagari, Gujarati, # Gurmukhi (including the variants for Punjabi) # Kannada, Malayalam, Oriya, Tamil, Telugu, Tibetan pdf.add_font('gargi', '', 'gargi.ttf', uni=True) pdf.set_font('gargi', '', 14) pdf.write(8, u'Hindi: नमस्ते दुनिया') pdf.ln(20) # Add a AR PL New Sung Unicode font (uses UTF-8) # The Open Source Chinese Font (also supports others east-asia languages) pdf.add_font('fireflysung', '', 'fireflysung.ttf', uni=True) pdf.set_font('fireflysung', '', 14) pdf.write(8, u'Chinese: 你好世界\n') pdf.write(8, u'Japanese: こんにちは世界\n') pdf.ln(10) # Add a Alee Unicode font (uses UTF-8) # General purpose Hangul truetype fonts that Contain Korean syllable # and Latin9 (iso8859-15) characters. pdf.add_font('eunjin', '', 'Eunjin.ttf', uni=True) pdf.set_font('eunjin', '', 14) pdf.write(8, u'Korean: 안녕하세요') pdf.ln(20) # Add a Fonts-TLWG (formerly ThaiFonts-Scalable) (uses UTF-8) pdf.add_font('waree', '', 'Waree.ttf', uni=True) pdf.set_font('waree', '', 14) pdf.write(8, u'Thai: สวัสดีชาวโลก') pdf.ln(20) # Select a standard font (uses windows-1252) pdf.set_font('Arial', '', 14) pdf.ln(10) pdf.write(5, 'This is standard built-in font') pdf.output(&quot;unicode.pdf&quot;, 'F') View the result here: unicode.pdf Metric Files FPDF will try to automatically generate metrics (i.e. character widths) about TTF font files to speed up their processing. Such metrics are stored using the Python Pickle format (.pkl extension), by default in the font directory (ensure Read/Write permission!). TTF metric files often weight about 650K, so keep that in mind if you use many TTF fonts and have disk size or memory limitations. By design, metric files are not imported as they could cause a temporary memory leak if not managed properly (this could be an issue in a webserver environment with many processes/threads, so the current implementation discards metrics when FPDF objects are disposed). In most circumstances, you will not notice any difference about storing metric files vs. generating them in each run on-the-fly (according basic tests, elapsed time is equivalent, YMMV) Like the original php implementation, this library should work even if it could not store the metric file, and as no source code file is generated at runtime, it should work in restricted environments. Free Font Pack and Copyright Restrictions For your convenience, this library collected 96 TTF files in an optional &quot;Free Unicode TrueType Font Pack for FPDF&quot;, with useful fonts commonly distributed with GNU/Linux operating systems (see above for a complete description). This pack is included in the windows installers, or can be downloaded separately (for any operating system). You could use any TTF font file as long embedding usage is allowed in the licence. If not, a runtime exception will be raised saying: &quot;ERROR - Font file filename.ttf cannot be embedded due to copyright restrictions.&quot; Comment by project member jurgis.pralgauskis, Apr 28, 2013 if You use write_html( ..some unicode content.. ) https://code.google.com/p/pyfpdf/wiki/WriteHTML you should set font via &lt;font&gt; tag pdf.write_html(u&quot;&lt;H1&gt;&lt;font face='DejaVu' size='20'&gt;Ąžuolas&lt;/font&gt;&lt;H2&gt;&quot;) Hint: You can use Wiki Syntax. Enter a comment: [It's All Text!] Terms - Privacy - Project Hosting Help Powered by Google Project Hosting Projects tazjel Starred projects altdragapt-cygardesiaautokeycopyqcyg-aptdragonflygooglefontdirectoryjquery-ui-vkkey-monminttymobileterminalmsysgitmusic21puttycygswapytextroomtweetxuc-debugweb2py Find open source projects...Create a project... tazjel@gmail.comabobani@gmail.com Sign in with another account... " />
  <RDF:Description RDF:about="urn:scrapbook:item20130524045912#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" tazjel@gmail.com ▼ | My favorites ▼ | Profile | Sign out Logo pyfpdf Simple PDF generation for Python (FPDF PHP port) AKA fpdf.py Project Home Downloads Wiki Issues Source Search for Cell print a cell Documentation Updated Aug 12, 2010 by reingart Cell fpdf.cell(w,h=0,txt='',border=0,ln=0,align='',fill=0,link='') Description Prints a cell (rectangular area) with optional borders, background color and character string. The upper-left corner of the cell corresponds to the current position. The text can be aligned or centered. After the call, the current position moves to the right or to the next line. It is possible to put a link on the text. If automatic page breaking is enabled and the cell goes beyond the limit, a page break is done before outputting. Parameters w: Cell width. If 0, the cell extends up to the right margin. h: Cell height. Default value: 0. txt: String to print. Default value: empty string. border: Indicates if borders must be drawn around the cell. The value can be either a number: 0: no border 1: frame or a string containing some or all of the following characters (in any order): L: left T: top R: right B: bottom Default value: 0. ln: Indicates where the current position should go after the call. Possible values are: 0: to the right 1: to the beginning of the next line 2: below Putting 1 is equivalent to putting 0 and calling Ln() just after. Default value: 0. align: Allows to center or align the text. Possible values are: L or empty string: left align (default value) C: center R: right align fill: Indicates if the cell background must be painted (true) or transparent (false). Default value: false. link: URL or identifier returned by AddLink(). Example # Set font pdf.set_font('Arial','B',16) # Move to 8 cm to the right pdf.cell(80) # Centered text in a framed 20*10 mm cell and line break pdf.cell(20,10,'Title',1,1,'C') See also SetFont, SetDrawColor, SetFillColor, SetTextColor, SetLineWidth, AddLink, Ln, MultiCell, Write, SetAutoPageBreak. Hint: You can use Wiki Syntax. Enter a comment: [It's All Text!] Terms - Privacy - Project Hosting Help Powered by Google Project Hosting Projects tazjel Starred projects altdragapt-cygardesiaautokeycopyqcyg-aptdragonflygooglefontdirectoryjquery-ui-vkkey-monminttymobileterminalmsysgitmusic21puttycygswapytextroomtweetxuc-debugweb2py Find open source projects...Create a project... tazjel@gmail.comabobani@gmail.com Sign in with another account... " />
  <RDF:Description RDF:about="urn:scrapbook:item20130524050415#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" web2py™ administrative interface Site Edit About Errors Versioning Help Logout Debug Editing file &quot;arbani/controllers/default.py&quot; exposes: get_me_a_pdf, get_me_a_pyfpdf, report, listing, import_csv, invoice, index, user, download, call edit views: user, index toggle breakpoint &lt;&lt;back docs Save file: Save Saved file hash: Last saved on: # -*- coding: utf-8 -*- ######################################################################### ## This is a samples controller ## - index is the default action of any application ## - user is required for authentication and authorization ## - download is for downloading files uploaded in the db (does streaming) ## - call exposes all registered services (none by default) ######################################################################### from reportlab.platypus import * from reportlab.lib.styles import getSampleStyleSheet from reportlab.rl_config import defaultPageSize from reportlab.lib.units import inch, mm from reportlab.lib.enums import TA_LEFT, TA_RIGHT, TA_CENTER, TA_JUSTIFY from reportlab.lib import colors from uuid import uuid4 from cgi import escape import os def get_me_a_pdf(): # Begin with regular font pdf.SetFont('Arial','',14) pdf.Write(5,'Visit '); # Then put a blue underlined link pdf.SetTextColor(0,0,255); pdf.SetFont('','U'); pdf.Write(5,'www.fpdf.org','http://www.fpdf.org'); title = &quot;احمد باني&quot; heading = &quot;First Paragraph&quot; text = 'bla '* 10000 styles = getSampleStyleSheet() tmpfilename=os.path.join(request.folder,'private',str(uuid4())) doc = SimpleDocTemplate(tmpfilename) story = [] story.append(Paragraph(escape(title),styles[&quot;Title&quot;])) story.append(Paragraph(escape(heading),styles[&quot;Heading2&quot;])) story.append(Paragraph(escape(text),styles[&quot;Normal&quot;])) story.append(Spacer(1,2*inch)) doc.build(story) data = open(tmpfilename,&quot;rb&quot;).read() os.unlink(tmpfilename) response.headers['Content-Type']='application/pdf' return data from gluon.contrib.pyfpdf import FPDF import os def get_me_a_pyfpdf(): title = &quot;This The Doc Title&quot; heading = &quot;First Paragraph&quot; text = 'bla '* 10000 pdf=FPDF() pdf.add_page() pdf.set_font('Times','B',15) pdf.cell(w=210,h=9,txt=title,border=0,ln=1,align='C',fill=0) pdf.set_font('Times','B',15) pdf.cell(w=0,h=6,txt=heading,border=0,ln=1,align='L',fill=0) pdf.set_font('Times','',12) pdf.multi_cell(w=0,h=5,txt=text) response.headers['Content-Type']='application/pdf' return pdf.output(dest='S') def report(): response.title = &quot;web2py sample report&quot; # include a google chart! url = &quot;http://chart.apis.google.com/chart?cht=p3&amp;chd=t:60,40&amp;chs=250x100&amp;chl=Hello|World&amp;.png&quot; chart = IMG(_src=url, _width=&quot;250&quot;,_height=&quot;100&quot;) # create a small table with some data: rows = [THEAD(TR(TH(&quot;Key&quot;,_width=&quot;70%&quot;), TH(&quot;Value&quot;,_width=&quot;30%&quot;))), TBODY(TR(TD(&quot;Hello&quot;),TD(&quot;60&quot;)), TR(TD(&quot;World&quot;),TD(&quot;40&quot;)))] table = TABLE(*rows, _border=&quot;0&quot;, _align=&quot;center&quot;, _width=&quot;50%&quot;) if request.extension==&quot;pdf&quot;: from gluon.contrib.pyfpdf import FPDF, HTMLMixin # create a custom class with the required functionalities class MyFPDF(FPDF, HTMLMixin): def header(self): &quot;hook to draw custom page header&quot; logo=os.path.join(request.env.web2py_path,&quot;gluon&quot;,&quot;contrib&quot;,&quot;pyfpdf&quot;,&quot;tutorial&quot;,&quot;logo_pb.png&quot;) self.image(logo,10,8,33) self.set_font('Arial','B',15) self.cell(65) # padding self.cell(60,10,response.title,1,0,'C') self.ln(20) def footer(self): &quot;hook to draw custom page header (printing page numbers)&quot; self.set_y(-15) self.set_font('Arial','I',8) txt = 'Page %s of %s' % (self.page_no(), self.alias_nb_pages()) self.cell(0,10,txt,0,0,'C') pdf=MyFPDF() # create a page and serialize/render HTML objects pdf.add_page() pdf.write_html(str(XML(table, sanitize=False))) pdf.write_html(str(XML(CENTER(chart), sanitize=False))) # prepare PDF to download: response.headers['Content-Type']='application/pdf' return pdf.output(dest='S') else: # normal html view: return dict(chart=chart, table=table) def listing(): response.title = &quot;web2py sample listing&quot; # define header and footers: head = THEAD(TR(TH(&quot;Header 1&quot;,_width=&quot;50%&quot;), TH(&quot;Header 2&quot;,_width=&quot;30%&quot;), TH(&quot;Header 3&quot;,_width=&quot;20%&quot;), _bgcolor=&quot;#A0A0A0&quot;)) foot = TFOOT(TR(TH(&quot;Footer 1&quot;,_width=&quot;50%&quot;), TH(&quot;Footer 2&quot;,_width=&quot;30%&quot;), TH(&quot;Footer 3&quot;,_width=&quot;20%&quot;), _bgcolor=&quot;#E0E0E0&quot;)) # create several rows: rows = [] for i in range(1000): col = i % 2 and &quot;#F0F0F0&quot; or &quot;#FFFFFF&quot; rows.append(TR(TD(&quot;Row %s&quot; %i), TD(&quot;something&quot;, _align=&quot;center&quot;), TD(&quot;%s&quot; % i, _align=&quot;right&quot;), _bgcolor=col)) # make the table object body = TBODY(*rows) table = TABLE(*[head,foot, body], _border=&quot;1&quot;, _align=&quot;center&quot;, _width=&quot;100%&quot;) if request.extension==&quot;pdf&quot;: from gluon.contrib.pyfpdf import FPDF, HTMLMixin # define our FPDF class (move to modules if it is reused frequently) class MyFPDF(FPDF, HTMLMixin): def header(self): self.set_font('Arial','B',15) self.cell(0,10, response.title ,1,0,'C') self.ln(20) def footer(self): self.set_y(-15) self.set_font('Arial','I',8) txt = 'Page %s of %s' % (self.page_no(), self.alias_nb_pages()) self.cell(0,10,txt,0,0,'C') pdf=MyFPDF() # first page: pdf.add_page() pdf.write_html(str(XML(table, sanitize=False))) response.headers['Content-Type']='application/pdf' return pdf.output(dest='S') else: # normal html view: return dict(table=table) def import_csv(): from gluon.contrib.pyfpdf import Template f = Template() f.parse_csv(infile=&quot;/home/reingart/web2py/gluon/contrib/pyfpdf/invoice.csv&quot;, delimiter=&quot;;&quot;, decimal_sep=&quot;,&quot;) for v in f.fields.elements(): v['align']= {'I':'L','D':'R','C':'C','':''}.get(v['align'], 'L') v['pdf_template_id'] = 1 db.pdf_element.insert(**v) def invoice(): from gluon.contrib.pyfpdf import Template import os.path # generate sample invoice (according Argentina's regulations) import random from decimal import Decimal # read elements from db elements = db(db.pdf_element.pdf_template_id==1).select(orderby=db.pdf_element.priority) f = Template(format=&quot;A4&quot;, elements = elements, title=&quot;Sample Invoice&quot;, author=&quot;Sample Company&quot;, subject=&quot;Sample Customer&quot;, keywords=&quot;Electronic TAX Invoice&quot;) detail = &quot;Lorem ipsum dolor sit amet, consectetur. &quot; * 5 items = [] for i in range(1, 30): ds = &quot;Sample product %s&quot; % i qty = random.randint(1,10) price = round(random.random()*100,3) code = &quot;%s%s%02d&quot; % (chr(random.randint(65,90)), chr(random.randint(65,90)),i) items.append(dict(code=code, unit='u', qty=qty, price=price, amount=qty*price, ds=&quot;%s: %s&quot; % (i,ds))) # divide and count lines lines = 0 li_items = [] for it in items: qty = it['qty'] code = it['code'] unit = it['unit'] for ds in f.split_multicell(it['ds'], 'item_description01'): # add item description line (without price nor amount) li_items.append(dict(code=code, ds=ds, qty=qty, unit=unit, price=None, amount=None)) # clean qty and code (show only at first) unit = qty = code = None # set last item line price and amount li_items[-1].update(amount = it['amount'], price = it['price']) obs=&quot;\n&lt;U&gt;Detail:&lt;/U&gt;\n\n&quot; + detail for ds in f.split_multicell(obs, 'item_description01'): li_items.append(dict(code=code, ds=ds, qty=qty, unit=unit, price=None, amount=None)) # calculate pages: lines = len(li_items) max_lines_per_page = 24 pages = lines / (max_lines_per_page - 1) if lines % (max_lines_per_page - 1): pages = pages + 1 # completo campos y hojas for page in range(1, pages+1): f.add_page() f['page'] = 'Page %s of %s' % (page, pages) if pages&gt;1 and page&lt;pages: s = 'Continues on page %s' % (page+1) else: s = '' f['item_description%02d' % (max_lines_per_page+1)] = s f[&quot;company_name&quot;] = &quot;Sample Company&quot; f[&quot;company_logo&quot;] = os.path.join(request.env.web2py_path,&quot;gluon&quot;,&quot;contrib&quot;,&quot;pyfpdf&quot;,&quot;tutorial&quot;,&quot;logo.png&quot;) f[&quot;company_header1&quot;] = &quot;Some Address - somewhere -&quot; f[&quot;company_header2&quot;] = &quot;http://www.example.com&quot; f[&quot;company_footer1&quot;] = &quot;Tax Code ...&quot; f[&quot;company_footer2&quot;] = &quot;Tax/VAT ID ...&quot; f['number'] = '0001-00001234' f['issue_date'] = '2010-09-10' f['due_date'] = '2099-09-10' f['customer_name'] = &quot;Sample Client&quot; f['customer_address'] = &quot;Siempreviva 1234&quot; # print line item... li = 0 k = 0 total = Decimal(&quot;0.00&quot;) for it in li_items: k = k + 1 if k &gt; page * (max_lines_per_page - 1): break if it['amount']: total += Decimal(&quot;%.6f&quot; % it['amount']) if k &gt; (page - 1) * (max_lines_per_page - 1): li += 1 if it['qty'] is not None: f['item_quantity%02d' % li] = it['qty'] if it['code'] is not None: f['item_code%02d' % li] = it['code'] if it['unit'] is not None: f['item_unit%02d' % li] = it['unit'] f['item_description%02d' % li] = it['ds'] if it['price'] is not None: f['item_price%02d' % li] = &quot;%0.3f&quot; % it['price'] if it['amount'] is not None: f['item_amount%02d' % li] = &quot;%0.2f&quot; % it['amount'] if pages == page: f['net'] = &quot;%0.2f&quot; % (total/Decimal(&quot;1.21&quot;)) f['vat'] = &quot;%0.2f&quot; % (total*(1-1/Decimal(&quot;1.21&quot;))) f['total_label'] = 'Total:' else: f['total_label'] = 'SubTotal:' f['total'] = &quot;%0.2f&quot; % total response.headers['Content-Type']='application/pdf' return f.render('invoice.pdf', dest='S') def index(): &quot;&quot;&quot; example action using the internationalization operator T and flash rendered by views/default/index.html or views/generic.html &quot;&quot;&quot; response.flash = T('Welcome to web2py') return dict(message=T('Hello World')) def user(): &quot;&quot;&quot; exposes: http://..../[app]/default/user/login http://..../[app]/default/user/logout http://..../[app]/default/user/register http://..../[app]/default/user/profile http://..../[app]/default/user/retrieve_password http://..../[app]/default/user/change_password use @auth.requires_login() @auth.requires_membership('group name') @auth.requires_permission('read','table name',record_id) to decorate functions that need access control &quot;&quot;&quot; return dict(form=auth()) def download(): &quot;&quot;&quot; allows downloading of uploaded files http://..../[app]/default/download/[filename] &quot;&quot;&quot; return response.download(request,db) def call(): &quot;&quot;&quot; exposes services. for example: http://..../[app]/default/call/jsonrpc decorate with @services.jsonrpc the functions to expose supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv &quot;&quot;&quot; session.forget() return service() [It's All Text!] [It's All Text!] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 # -*- coding: utf-8 -*- ######################################################################### ## This is a samples controller ## - index is the default action of any application ## - user is required for authentication and authorization ## - download is for downloading files uploaded in the db (does streaming) ## - call exposes all registered services (none by default) ######################################################################### from reportlab.platypus import * from reportlab.lib.styles import getSampleStyleSheet from reportlab.rl_config import defaultPageSize from reportlab.lib.units import inch, mm from reportlab.lib.enums import TA_LEFT, TA_RIGHT, TA_CENTER, TA_JUSTIFY from reportlab.lib import colors from uuid import uuid4 from cgi import escape import os def get_me_a_pdf(): # Begin with regular font pdf.SetFont('Arial','',14) pdf.Write(5,'Visit '); # Then put a blue underlined link pdf.SetTextColor(0,0,255); pdf.SetFont('','U'); pdf.Write(5,'www.fpdf.org','http://www.fpdf.org'); title = &quot;احمد باني&quot; heading = &quot;First Paragraph&quot; text = 'bla '* 10000 styles = getSampleStyleSheet() tmpfilename=os.path.join(request.folder,'private',str(uuid4())) doc = SimpleDocTemplate(tmpfilename) story = [] story.append(Paragraph(escape(title),styles[&quot;Title&quot;])) story.append(Paragraph(escape(heading),styles[&quot;Heading2&quot;])) story.append(Paragraph(escape(text),styles[&quot;Normal&quot;])) story.append(Spacer(1,2*inch)) doc.build(story) data = open(tmpfilename,&quot;rb&quot;).read() os.unlink(tmpfilename) response.headers['Content-Type']='application/pdf' return data from gluon.contrib.pyfpdf import FPDF import os def get_me_a_pyfpdf(): title = &quot;This The Doc Title&quot; heading = &quot;First Paragraph&quot; text = 'bla '* 10000 pdf=FPDF() pdf.add_page() pdf.set_font('Times','B',15) pdf.cell(w=210,h=9,txt=title,border=0,ln=1,align='C',fill=0) pdf.set_font('Times','B',15) pdf.cell(w=0,h=6,txt=heading,border=0,ln=1,align='L',fill=0) pdf.set_font('Times','',12) pdf.multi_cell(w=0,h=5,txt=text) response.headers['Content-Type']='application/pdf' return pdf.output(dest='S') def report(): response.title = &quot;web2py sample report&quot; # include a google chart! url = &quot;http://chart.apis.google.com/chart?cht=p3&amp;chd=t:60,40&amp;chs=250x100&amp;chl=Hello|World&amp;.png&quot; chart = IMG(_src=url, _width=&quot;250&quot;,_height=&quot;100&quot;) # create a small table with some data: rows = [THEAD(TR(TH(&quot;Key&quot;,_width=&quot;70%&quot;), TH(&quot;Value&quot;,_width=&quot;30%&quot;))), TBODY(TR(TD(&quot;Hello&quot;),TD(&quot;60&quot;)), TR(TD(&quot;World&quot;),TD(&quot;40&quot;)))] table = TABLE(*rows, _border=&quot;0&quot;, _align=&quot;center&quot;, _width=&quot;50%&quot;) if request.extension==&quot;pdf&quot;: from gluon.contrib.pyfpdf import FPDF, HTMLMixin # create a custom class with the required functionalities class MyFPDF(FPDF, HTMLMixin): def header(self): &quot;hook to draw custom page header&quot; logo=os.path.join(request.env.web2py_path,&quot;gluon&quot;,&quot;contrib&quot;,&quot;pyfpdf&quot;,&quot;tutorial&quot;,&quot;logo_pb.png&quot;) self.image(logo,10,8,33) self.set_font('Arial','B',15) self.cell(65) # padding self.cell(60,10,response.title,1,0,'C') self.ln(20) def footer(self): &quot;hook to draw custom page header (printing page numbers)&quot; self.set_y(-15) self.set_font('Arial','I',8) txt = 'Page %s of %s' % (self.page_no(), self.alias_nb_pages()) self.cell(0,10,txt,0,0,'C') pdf=MyFPDF() # create a page and serialize/render HTML objects pdf.add_page() pdf.write_html(str(XML(table, sanitize=False))) pdf.write_html(str(XML(CENTER(chart), sanitize=False))) # prepare PDF to download: response.headers['Content-Type']='application/pdf' return pdf.output(dest='S') else: # normal html view: restore currently saved or revert to previous version. Key bindings Ctrl+SSave via Ajax Ctrl+F11Toggle Fullscreen Ctrl-F / Cmd-FStart searching Ctrl-G / Cmd-GFind Next Shift-Ctrl-G / Shift-Cmd-GFind Previous Shift-Ctrl-F / Cmd-Option-FReplace Shift-Ctrl-R / Shift-Cmd-Option-FReplace All Powered by web2py™ created by Massimo Di Pierro ©2007-2013 - Admin language " />
  <RDF:Description RDF:about="urn:scrapbook:item20130524045826#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" tazjel@gmail.com ▼ | My favorites ▼ | Profile | Sign out Logo pyfpdf Simple PDF generation for Python (FPDF PHP port) AKA fpdf.py Project Home Downloads Wiki Issues Source Search for SetFont set font Documentation Updated Aug 14, 2012 by reingart SetFont fpdf.set_font(family,style='',size=0) Description Sets the font used to print character strings. It is mandatory to call this method at least once before printing text or the resulting document would not be valid. The font can be either a standard one or a font added via the AddFont method. Standard fonts use Windows encoding cp1252 (Western Europe). The method can be called before the first page is created and the font is retained from page to page. If you just wish to change the current font size, it is simpler to call SetFontSize. Note: the font metric files must be accessible. They are searched successively in: The directory defined by the FPDF_FONTPATH constant (if this constant is defined) The font directory located in the directory containing fpdf.py (if it exists) Parameters family: Family font. It can be either a name defined by AddFont() or one of the standard families (case insensitive): Courier (fixed-width) Helvetica or Arial (synonymous; sans serif) Times (serif) Symbol (symbolic) ZapfDingbats (symbolic) It is also possible to pass an empty string. In that case, the current family is retained. style: Font style. Possible values are (case insensitive): empty string: regular B: bold I: italic U: underline or any combination. The default value is regular. Bold and italic styles do not apply to Symbol and ZapfDingbats. size: Font size in points. The default value is the current size. If no size has been specified since the beginning of the document, the value taken is 12. Example # Times regular 12 pdf.set_font('Times') # Arial bold 14 pdf.set_font('Arial','B',14) # Removes bold pdf.set_font('') # Times bold, italic and underlined 14 pdf.set_font('Times','BIU') See also AddFont, SetFontSize, Cell, MultiCell, Write. Hint: You can use Wiki Syntax. Enter a comment: [It's All Text!] Terms - Privacy - Project Hosting Help Powered by Google Project Hosting Projects tazjel Starred projects altdragapt-cygardesiaautokeycopyqcyg-aptdragonflygooglefontdirectoryjquery-ui-vkkey-monminttymobileterminalmsysgitmusic21puttycygswapytextroomtweetxuc-debugweb2py Find open source projects...Create a project... tazjel@gmail.comabobani@gmail.com Sign in with another account... " />
  <RDF:Description RDF:about="urn:scrapbook:item20130523104443#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" tazjel@gmail.com ▼ | My favorites ▼ | Profile | Sign out Logo pyfpdf Simple PDF generation for Python (FPDF PHP port) AKA fpdf.py Project Home Downloads Wiki Issues Source Search for Web2Py web framework integration for PDF report and templates support Featured, Phase-Support Updated Feb 7, 2013 by leo.m.ro...@gmail.com Introduction Sample Report Sample Table Listing Samples Template Definitions Sample Templating Engine Introduction If you use web2py, you can make complex reports that can be viewed in a browser, or downloaded as PDF (taking advantage of web2py HTML helper objects to easily diagram a report). See WriteHTML for more information, supported tags and attributes, etc. Also, using web2py DAL, you can easily set up a templating engine for PDF documents. See Templates for more information. The following examples are packaged in a ready to run application: web2py.app.fpdf.w2p PyFPDF is included in web2py since release 1.85.2 Also, you can download the latest versión pyfpdf and uncompress it in the web2py, gluon, contrib folder. Note about images: this sample images are small so they may look like low quality ones. For better results, use bigger images: more DPI (screen is often 72/96DPI, printers are often 300/600DPI). As a rule of thumb, use at least half of the image size when rendering to PDF, ie. if image is 500x200px, use 250x100px as width/height attributes of IMG tag. Sample Report You could make a &quot;professional looking&quot; bussiness report just using web2py HTML helpers, mixin headers, logos, charts, text and tables. Te main advantage of this method is that the same report can be rendered in a HTML view, or can be downloaded as PDF, with a minimal effort: Sample: report.pdf Updated Live Demo (HTML and PDF version): http://www.web2py.com.ar/fpdf/default/report http://www.web2py.com.ar/fpdf/default/report.pdf def report(): response.title = &quot;web2py sample report&quot; # include a google chart (download it dynamically!) url = &quot;http://chart.apis.google.com/chart?cht=p3&amp;chd=t:60,40&amp;chs=500x200&amp;chl=Hello|World&amp;.png&quot; chart = IMG(_src=url, _width=&quot;250&quot;,_height=&quot;100&quot;) # create a small table with some data: rows = [THEAD(TR(TH(&quot;Key&quot;,_width=&quot;70%&quot;), TH(&quot;Value&quot;,_width=&quot;30%&quot;))), TBODY(TR(TD(&quot;Hello&quot;),TD(&quot;60&quot;)), TR(TD(&quot;World&quot;),TD(&quot;40&quot;)))] table = TABLE(*rows, _border=&quot;0&quot;, _align=&quot;center&quot;, _width=&quot;50%&quot;) if request.extension==&quot;pdf&quot;: from gluon.contrib.pyfpdf import FPDF, HTMLMixin # create a custom class with the required functionalities class MyFPDF(FPDF, HTMLMixin): def header(self): &quot;hook to draw custom page header (logo and title)&quot; logo=os.path.join(request.env.web2py_path,&quot;gluon&quot;,&quot;contrib&quot;,&quot;pyfpdf&quot;,&quot;tutorial&quot;,&quot;logo_pb.png&quot;) self.image(logo,10,8,33) self.set_font('Arial','B',15) self.cell(65) # padding self.cell(60,10,response.title,1,0,'C') self.ln(20) def footer(self): &quot;hook to draw custom page footer (printing page numbers)&quot; self.set_y(-15) self.set_font('Arial','I',8) txt = 'Page %s of %s' % (self.page_no(), self.alias_nb_pages()) self.cell(0,10,txt,0,0,'C') pdf=MyFPDF() # create a page and serialize/render HTML objects pdf.add_page() pdf.write_html(str(XML(table, sanitize=False))) pdf.write_html(str(XML(CENTER(chart), sanitize=False))) # prepare PDF to download: response.headers['Content-Type']='application/pdf' return pdf.output(dest='S') else: # normal html view: return dict(chart=chart, table=table) Sample Table Listing Also, you can make nice tables that automatically spreads over several pages, with header/footers, column/row highlight, etc., in a very pythonic way: Sample: listing.pdf Updated Live Demo (HTML and PDF version): http://www.web2py.com.ar/fpdf/default/listing http://www.web2py.com.ar/fpdf/default/listing.pdf def listing(): response.title = &quot;web2py sample listing&quot; # define header and footers: head = THEAD(TR(TH(&quot;Header 1&quot;,_width=&quot;50%&quot;), TH(&quot;Header 2&quot;,_width=&quot;30%&quot;), TH(&quot;Header 3&quot;,_width=&quot;20%&quot;), _bgcolor=&quot;#A0A0A0&quot;)) foot = TFOOT(TR(TH(&quot;Footer 1&quot;,_width=&quot;50%&quot;), TH(&quot;Footer 2&quot;,_width=&quot;30%&quot;), TH(&quot;Footer 3&quot;,_width=&quot;20%&quot;), _bgcolor=&quot;#E0E0E0&quot;)) # create several rows: rows = [] for i in range(1000): col = i % 2 and &quot;#F0F0F0&quot; or &quot;#FFFFFF&quot; rows.append(TR(TD(&quot;Row %s&quot; %i), TD(&quot;something&quot;, _align=&quot;center&quot;), TD(&quot;%s&quot; % i, _align=&quot;right&quot;), _bgcolor=col)) # make the table object body = TBODY(*rows) table = TABLE(*[head,foot, body], _border=&quot;1&quot;, _align=&quot;center&quot;, _width=&quot;100%&quot;) if request.extension==&quot;pdf&quot;: from gluon.contrib.pyfpdf import FPDF, HTMLMixin # define our FPDF class (move to modules if it is reused frequently) class MyFPDF(FPDF, HTMLMixin): def header(self): self.set_font('Arial','B',15) self.cell(0,10, response.title ,1,0,'C') self.ln(20) def footer(self): self.set_y(-15) self.set_font('Arial','I',8) txt = 'Page %s of %s' % (self.page_no(), self.alias_nb_pages()) self.cell(0,10,txt,0,0,'C') pdf=MyFPDF() # first page: pdf.add_page() pdf.write_html(str(XML(table, sanitize=False))) response.headers['Content-Type']='application/pdf' return pdf.output(dest='S') else: # normal html view: return dict(table=table)}}} Samples Template Definitions As stated in the Templates page, there are 3 ways of putting your templates in place. As in that page there are samples for the manually hardcoded way and the CSV document loading, here we will only show a sample of the template engine. Sample Templating Engine PyFPDF and web2py can be used to make PDF documents using templates like invoices, badges, certificates, etc.: Sample: invoice.pdf Updated Live Demo: http://www.web2py.com.ar/fpdf/default/invoice.pdf To handle multiples templates, we can define two tables in web2py: pdf_template: document general information (name, paper size, etc.) pdf_element: several rows for each document, describing graphics primitives and placeholders. In db.py write: db.define_table(&quot;pdf_template&quot;, Field(&quot;pdf_template_id&quot;,&quot;id&quot;), Field(&quot;title&quot;), Field(&quot;format&quot;, requires=IS_IN_SET([&quot;A4&quot;,&quot;legal&quot;,&quot;letter&quot;])), ) db.define_table(&quot;pdf_element&quot;, Field(&quot;pdf_template_id&quot;, db.pdf_template, requires=IS_IN_DB(db,'pdf_template.pdf_template_id', 'pdf_template.title')), Field(&quot;name&quot;, requires=IS_NOT_EMPTY()), Field(&quot;type&quot;, length=2, requires=IS_IN_SET(['T', 'L', 'I', 'B', 'BC'])), Field(&quot;x1&quot;, &quot;double&quot;, requires=IS_NOT_EMPTY()), Field(&quot;y1&quot;, &quot;double&quot;, requires=IS_NOT_EMPTY()), Field(&quot;x2&quot;, &quot;double&quot;, requires=IS_NOT_EMPTY()), Field(&quot;y2&quot;, &quot;double&quot;, requires=IS_NOT_EMPTY()), Field(&quot;font&quot;, default=&quot;Arial&quot;, requires=IS_IN_SET(['Courier','Arial','Times','Symbol','Zapfdingbats'])), Field(&quot;size&quot;, &quot;double&quot;, default=&quot;10&quot;, requires=IS_NOT_EMPTY()), Field(&quot;bold&quot;, &quot;boolean&quot;), Field(&quot;italic&quot;, &quot;boolean&quot;), Field(&quot;underline&quot;, &quot;boolean&quot;), Field(&quot;foreground&quot;, &quot;integer&quot;, default=0x000000, comment=&quot;Color text&quot;), Field(&quot;background&quot;, &quot;integer&quot;, default=0xFFFFFF, comment=&quot;Fill color&quot;), Field(&quot;align&quot;, &quot;string&quot;, length=1, default=&quot;L&quot;, requires=IS_IN_SET(['L', 'R', 'C', 'J'])), Field(&quot;text&quot;, &quot;text&quot;, comment=&quot;Default text&quot;), Field(&quot;priority&quot;, &quot;integer&quot;, default=0, comment=&quot;Z-Order&quot;), ) Warning: the fields &quot;type&quot;, &quot;size&quot; and &quot;text&quot; are reserved words for some DB engines, so validation: db = DAL('sqlite://storage.sqlite',pool_size=1,check_reserved=['ALL']) }}} will fail. sqlite, MySQL and postgres work OK. Proposals for new naming ideas are welcomed. At this point you could go to web2py AppAdmin and start to define your document templates, or use import/export functions to reuse your already defined formats! Note: if you used designer.py to create the templates, and you want to import the templates with the Web2Py database admin you will have to modify the file. So; designer.py outputs a file like this: {{{ line0;T;20.0;13.0;190.0;13.0;times;10.0;0;0;0;0;65535;C;;0 line1;T;20.0;67.0;190.0;67.0;times;10.0;0;0;0;0;65535;C;;0 name0;T;21;14;104;25;times;16.0;0;0;0;0;0;C;;2 title0;T;64;26;104;30;times;10.0;0;0;0;0;0;C;;2 }}} You will have to make it look lke this: {{{ pdf_element.pdf_template_id, pdf_element.name, pdf_element.type, pdf_element.x1, pdf_element.y1, pdf_element.x2, pdf_element.y2, pdf_element.font, pdf_element.size, pdf_element.bold, pdf_element.italic, pdf_element.underline, pdf_element.foreground, pdf_element.background, pdf_element.align, pdf_element.text, pdf_element.priority 1,line0,T,20.0,283.0,190.0,283.0,times,10.0,0,0,0,0,65535,C,,0 1,line1,T,20.0,337.0,190.0,337.0,times,10.0,0,0,0,0,65535,C,,0 1,name0,T,21,14,104,25,times,16.0,0,0,0,0,0,C,,2 1,title0,T,64,26,104,30,times,10.0,0,0,0,0,0,C,,2 }}} Where the first number indicates the template ID (important for the database system), and the first line indicates the database fields to fill. A simple python script should do the trick. After defining and filling your database, you can use PyFPDF [Templates] directly reading rows elements from the web2py database: For example, for an invoice, in a controller you could write: {{{ def invoice(): from gluon.contrib.pyfpdf import Template import os.path # generate sample invoice (according Argentina's regulations) import random from decimal import Decimal # read elements from db elements = db(db.pdf_element.pdf_template_id==1).select(orderby=db.pdf_element.priority) f = Template(format=&quot;A4&quot;, elements = elements, title=&quot;Sample Invoice&quot;, author=&quot;Sample Company&quot;, subject=&quot;Sample Customer&quot;, keywords=&quot;Electronic TAX Invoice&quot;) # create some random invoice line items and detail data detail = &quot;Lorem ipsum dolor sit amet, consectetur. &quot; * 5 items = [] for i in range(1, 30): ds = &quot;Sample product %s&quot; % i qty = random.randint(1,10) price = round(random.random()*100,3) code = &quot;%s%s%02d&quot; % (chr(random.randint(65,90)), chr(random.randint(65,90)),i) items.append(dict(code=code, unit='u', qty=qty, price=price, amount=qty*price, ds=&quot;%s: %s&quot; % (i,ds))) # divide and count lines lines = 0 li_items = [] for it in items: qty = it['qty'] code = it['code'] unit = it['unit'] for ds in f.split_multicell(it['ds'], 'item_description01'): # add item description line (without price nor amount) li_items.append(dict(code=code, ds=ds, qty=qty, unit=unit, price=None, amount=None)) # clean qty and code (show only at first) unit = qty = code = None # set last item line price and amount li_items[-1].update(amount = it['amount'], price = it['price']) # split detail into each line description obs=&quot;\n&lt;U&gt;Detail:&lt;/U&gt;\n\n&quot; + detail for ds in f.split_multicell(obs, 'item_description01'): li_items.append(dict(code=code, ds=ds, qty=qty, unit=unit, price=None, amount=None)) # calculate pages: lines = len(li_items) max_lines_per_page = 24 pages = lines / (max_lines_per_page - 1) if lines % (max_lines_per_page - 1): pages = pages + 1 # fill placeholders for each page for page in range(1, pages+1): f.add_page() f['page'] = 'Page %s of %s' % (page, pages) if pages&gt;1 and page&lt;pages: s = 'Continues on page %s' % (page+1) else: s = '' f['item_description%02d' % (max_lines_per_page+1)] = s f[&quot;company_name&quot;] = &quot;Sample Company&quot; f[&quot;company_logo&quot;] = os.path.join(request.env.web2py_path,&quot;gluon&quot;,&quot;contrib&quot;,&quot;pyfpdf&quot;,&quot;tutorial&quot;,&quot;logo.png&quot;) f[&quot;company_header1&quot;] = &quot;Some Address - somewhere -&quot; f[&quot;company_header2&quot;] = &quot;http://www.example.com&quot; f[&quot;company_footer1&quot;] = &quot;Tax Code ...&quot; f[&quot;company_footer2&quot;] = &quot;Tax/VAT ID ...&quot; f['number'] = '0001-00001234' f['issue_date'] = '2010-09-10' f['due_date'] = '2099-09-10' f['customer_name'] = &quot;Sample Client&quot; f['customer_address'] = &quot;Siempreviva 1234&quot; # print line item... li = 0 k = 0 total = Decimal(&quot;0.00&quot;) for it in li_items: k = k + 1 if k &gt; page * (max_lines_per_page - 1): break if it['amount']: total += Decimal(&quot;%.6f&quot; % it['amount']) if k &gt; (page - 1) * (max_lines_per_page - 1): li += 1 if it['qty'] is not None: f['item_quantity%02d' % li] = it['qty'] if it['code'] is not None: f['item_code%02d' % li] = it['code'] if it['unit'] is not None: f['item_unit%02d' % li] = it['unit'] f['item_description%02d' % li] = it['ds'] if it['price'] is not None: f['item_price%02d' % li] = &quot;%0.3f&quot; % it['price'] if it['amount'] is not None: f['item_amount%02d' % li] = &quot;%0.2f&quot; % it['amount'] # last page? print totals: if pages == page: f['net'] = &quot;%0.2f&quot; % (total/Decimal(&quot;1.21&quot;)) f['vat'] = &quot;%0.2f&quot; % (total*(1-1/Decimal(&quot;1.21&quot;))) f['total_label'] = 'Total:' else: f['total_label'] = 'SubTotal:' f['total'] = &quot;%0.2f&quot; % total response.headers['Content-Type']='application/pdf' return f.render('invoice.pdf', dest='S') }}} Of course, this is a hardcoded example, you can use the database to store invoices or any other data, there is no rigid class hierachy to follow, just fill your template like a dict! Comment by Ovidio...@gmail.com, Sep 13, 2010 well, I am not able to understand, how to call the report for my application. If I understand what is explained is that we implement the dual tables, and pdf_template pdf_element. But within my application how do I call the report? Comment by project member reingart, Sep 14, 2010 I've added &quot;live demos&quot; showing how to call web2py controllers (html and pdf views, when available). In downloads there is an sample application. PS: can you fill an issue, as googlecode project updates seems broken... (and there we can attach code, examples and so on) Comment by Ovidio...@gmail.com, Sep 18, 2010 Thank you for answering the previous post. But if I need to do a report by filtering by date, as do the data entry??? Comment by yamandu.costa, Sep 27, 2010 I´ve put some usable thing in a slice: http://web2pyslices.com/main/slices/take_slice/99 It does a simple report by letting the user pick a date range, filtering a table and providing a PDF button to get the PDF version. I think it can get better, so please test and comment! Comment by ankita.s...@gmail.com, Mar 1, 2012 I'm looking for php.... how can i implement that please tell me... i want such class to be more implemented than existing on on fpdf for writeHTML.. that doesnot accept table tag. Comment by adesanto...@gmail.com, Mar 21, 2012 Hello, nice work and share. I experienced odd output, the header() seems not handled the linefeed at the next page properly as the example class MyFPDF(...): def header(self): ... self.ln(20) I would like to suggest class MyFPDF(...): def header(self): ln = 20 first_page = 1 ... if self.page_no &gt; first_page: self.ln(ln*2) else: self.ln(ln) Hope it helps Comment by mweis...@gmail.com, May 1, 2013 First example &quot;report&quot;: import os is missing Hint: You can use Wiki Syntax. Enter a comment: [It's All Text!] [It's All Text!] Terms - Privacy - Project Hosting Help Powered by Google Project Hosting Projects tazjel Starred projects altdragapt-cygardesiaautokeycopyqcyg-aptdragonflygooglefontdirectoryjquery-ui-vkkey-monminttymobileterminalmsysgitmusic21puttycygswapytextroomtweetxuc-debugweb2py Find open source projects...Create a project... tazjel@gmail.comabobani@gmail.com Sign in with another account... " />
  <RDF:Description RDF:about="urn:scrapbook:item20130524050531#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" Share Email FacebookTwitterGoogle+PinterestLinkedInStumbleUponRedditGoogle BookmarksWordPressTumblrDeliciousDiggMessengerMySpaceYahoo BookmarksBeboMister-WongGoogle ReaderOrkutXINGBufferEvernoteNetvibes ShareStrandsBusiness ExchangeArtoTipdSmakNewsPlurkAIMYahoo MessengerIdenti.caMozillacaLockerz GrabBlogger PostTypePad PostBox.netKindle ItNetlogTechnorati FavoritesCiteULikeJumptagsHemidemiFunPInstapaperPhoneFavsXerpiNetvouzWinkDiigoBibSonomyBlogMarksTailrankStartAidKledyKhabbrMeneameYoolinkBookmarks.frTechnotizieNewsVineMultiplyFriendFeedPlaxo PulsePingSquidooProtopage BookmarksBlinklistFavesYiGGWebnewsSegnaloPushaYouMobSlashdotFarkAllvoicesJamespotImera BrazilTwiddlaLinkaGoGounalogHuggDiglogNowPublicLiveJournalCurrentHelloTxtSpurlYampleOneviewLinkatopiaSimpyBuddyMarksAsk.com MyStuffViadeoMapleWistsConnoteaBackflipMyLinkVaultSiteJotSphinnDZoneCare2 NewsHyvesSphereBitty BrowserGabbrSymbaloo FeedsTagzaFolkdNewsTrustAmazon Wish ListPrintFriendlyRead It LaterTuentiEmailRediff MyPage Google GmailYahoo MailHotmailAOL MailAny email By AddToAny web2py[:] Login Register If you benefit from web2py hope you feel encouraged to pay it forward by contributing back to society in whatever form you choose! Connect! and share your web2py slices Facebook Google Go Lost password Create your account Simple PDF Report [updated] Recipe by Carlos Costa (yamandu) on 2010-09-27 in View Views (1298)Favorite (1)Like (0)Dislike (0)Subscribe (0) Shows how to filter a table with a date interval picked by the user and show the result in html page with option to download the PDF version. Requires only what ships with Web2py from version 1.85.1 above. The goal here is discuss a better method for PDF report generating. So comment, please. Share I found it good to put report classes in a separate file in models. So create a reports.py in models with this: class Report(FPDF, HTMLMixin): def header(self): self.set_font('Arial','B',15) self.cell(65) # padding self.cell(60,10,response.title,1,0,'C') self.ln(20) def footer(self): self.set_y(-15) self.set_font('Arial','I',8) txt = 'Page %s of %s' % (self.page_no(), self.alias_nb_pages()) self.cell(0,10,txt,0,0,'C') Note: this was taken and adpate from here You will need a controller to make the form, do the query and render the PDF: def report(): #form for the dates input form = SQLFORM.factory(Field('start_date', 'date', label='Start Date', requires=IS_DATE(), Field('end_date', 'date', label='End Date', requires=IS_DATE())) #form with invisible fields for PDF requesting pdf_link = FORM(INPUT(_type='submit', _value='PDF'), hidden=dict(start_date=request.vars.start_date, end_date=request.vars.end_date), _action='report.pd') #to do the query only one time #ask about extension for pdf or valid form data if request.extension == 'pd' or form.accepts(request.vars, session): #get date objects start_date = request.now.strptime(request.vars.data_ini, '%Y-%m-%d') end_date = request.now.strptime(request.vars.data_fim, '%Y-%m-%d') #the query rep = db((db.table.data &gt;= data_ini) &amp; (db.table.data &lt;= data_fim)).select() #html table with the rows and labels from the models t_rep = SQLTABLE(rep, headers=dict([('table.' + f, db.table[f].label) for f in db.table.fields])) #if a pdf was requested if request.extension == 'pd': pdf = Report() pdf.add_page() #PYFPDF needs width attributs #as SQLTABLE don´t do like this, we need a hack ths = t_rep.elements('th') ths[0]['_width'] = '12%' # column widths ths[1]['_width'] = '60%' ...... ..... #send html to the pdf with required encoding pdf.write_html(t_rep.xml().decode('UTF-8').encode('cp1252')) response.headers['Content-Type'] = 'application/pdf' #send the PDF as a string return pdf.output(dest='S') else: #displays form for input, the report and a PDF button return dict(form=form, rep=rep, pdf_link=pdf_link) else: #display only the form and a message for input return dict(form=form, rep='Pick a date range.', pdf_link=None) Note: Maybe there´s a better logic to achieve this. And sure we need a view: {{extend &quot;layout.html&quot;}} {{=rep}} &lt;hr&gt; {{if pdf_link:}} {{=pdf_link}} {{pass}} {{=rep}} That´s it! Maybe the oddest thing here is I coudn´t use a .pdf extension. This problem seems to appera when you have a non-generic view for the action. pdf report date-range-query Share Related slices PDF with ReportLab II Create pdf reports using pod library Simplest PDF output ever thanks to FPDF Using PollyReport PDF with ReportLab Comments (1) Login to post 0 adesanto-asman-10337 1 year ago I don't know if somebody had the same experienced, that the header() not handled the linefeed properly at the next page. I leaved a comment here, http://code.google.com/p/pyfpdf/wiki/Web2Py, hope it helps. © 2012 - web2pyslices.com web2py poweredMovuca Social CMSDonate with Paypal Hosting graciously provided by: Python Anywhere Notificationsclose (i) AdChoices +52 [Ahmed Bani] +53 including You SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. Tweet 0 Tweet 0 " />
  <RDF:Description RDF:about="urn:scrapbook:item20130524045924#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" tazjel@gmail.com ▼ | My favorites ▼ | Profile | Sign out Logo pyfpdf Simple PDF generation for Python (FPDF PHP port) AKA fpdf.py Project Home Downloads Wiki Issues Source Search for SetFillColor set filling color Documentation Updated Aug 12, 2010 by reingart SetFillColor fpdf.set_fill_color(r:int [, g:int, b:int]) Description Defines the color used for all filling operations (filled rectangles and cell backgrounds). It can be expressed in RGB components or gray scale. The method can be called before the first page is created and the value is retained from page to page. Parameters r: If g and b are given, red component; if not, indicates the gray level. Value between 0 and 255. g: Green component (between 0 and 255). b: Blue component (between 0 and 255). See also SetDrawColor, SetTextColor, Rect, Cell, MultiCell. Comment by smp...@gmail.com, Aug 11, 2012 fpdf.set_fill_color(r:int [, g:int, b:int]) Hint: You can use Wiki Syntax. Enter a comment: [It's All Text!] Terms - Privacy - Project Hosting Help Powered by Google Project Hosting Projects tazjel Starred projects altdragapt-cygardesiaautokeycopyqcyg-aptdragonflygooglefontdirectoryjquery-ui-vkkey-monminttymobileterminalmsysgitmusic21puttycygswapytextroomtweetxuc-debugweb2py Find open source projects...Create a project... tazjel@gmail.comabobani@gmail.com Sign in with another account... " />
  <RDF:Description RDF:about="urn:scrapbook:item20130524051124#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" tazjel@gmail.com ▼ | My favorites ▼ | Profile | Sign out Logo pyfpdf Simple PDF generation for Python (FPDF PHP port) AKA fpdf.py Project Home Downloads Wiki Issues Source Search for FAQ Frequent Asked Questions Featured, Phase-Support Updated Aug 14, 2012 by reingart What is FPDF? What this library is not ? How does this library compares to ...? How does the code looks like? Has this library any framework integration? What is the development status of this library? What is the license of this library (pyfpdf)? Apologies in advance: Spanish is our main language, so there may be errors or inaccuracies with our written English. See Project Home for an overall introduction. What is FPDF? FPDF (and PyFPDF) is a library with low level primitives to easily generate PDF document. This is similar to ReportLab's graphics canvas, but with some methods to output &quot;fluid&quot; cells (&quot;flowables&quot; that can span multiple rows, pages, tables, columns, etc.), it has several methods (&quot;hooks&quot;) that can be redefined, to fine-control headers, footers, etc. Originally developed in PHP several years ago (as a free alternative to propietary C libraries), it has been ported to many programming languages, including ASP, C++, Java, Pl/SQL, Ruby, Visual Basic, and of course, Python. For more information see: http://www.fpdf.org/en/links.php What this library is not? This library is not a: charts or widgets library (you can import PNG or JPG images, use PIL or any other library, or draw the figures yourself, see examples) &quot;flexible page layout engine&quot; like Reportlab PLATYPUS (but can do columns, chapters, etc., see Tutorial) XML /object definition language like Geraldo Reports, Jasper Reports or similar (look at WriteHTML for simple HTML reports and Templates for fill-in-the-blank documents) PDF text extractor/conversor, spltiter or similar. Look at pyPdf How does this library compares to ...? Compared to other solutions, this library should be easier to use and adapt for most common documents (no need to use a page layout engine, style-sheets templates, or stories...), with a full control over the generated PDF document (including advanced features and extensions) It is smaller (a single .py file &lt;77K) and compilation or external libraries are not required. It includes cell and multi_cell primitives to draw fluid document like invoices, listings/reports, and basic support for HTML rendering. How does the code looks like? Following is a example similar to the reportlab one at the book of web2py, note the simplified import and usage: (http://www.web2py.com/book/default/chapter/09?search=pdf#ReportLab-and-PDF) PyFPDF: from pyfpdf import FPDF def get_me_a_pyfpdf(): title = &quot;This The Doc Title&quot; heading = &quot;First Paragraph&quot; text = 'bla '* 10000 pdf=FPDF() pdf.add_page() pdf.set_font('Times','B',15) pdf.cell(w=210,h=9,txt=title,border=0,ln=1,align='C',fill=0) pdf.set_font('Times','B',15) pdf.cell(w=0,h=6,txt=heading,border=0,ln=1,align='L',fill=0) pdf.set_font('Times','',12) pdf.multi_cell(w=0,h=5,txt=text) response.headers['Content-Type']='application/pdf' return pdf.output(dest='S') Reportlab: from reportlab.platypus import * from reportlab.lib.styles import getSampleStyleSheet from reportlab.rl_config import defaultPageSize from reportlab.lib.units import inch, mm from reportlab.lib.enums import TA_LEFT, TA_RIGHT, TA_CENTER, TA_JUSTIFY from reportlab.lib import colors from uuid import uuid4 from cgi import escape import os def get_me_a_pdf(): title = &quot;This The Doc Title&quot; heading = &quot;First Paragraph&quot; text = 'bla '* 10000 styles = getSampleStyleSheet() tmpfilename=os.path.join(request.folder,'private',str(uuid4())) doc = SimpleDocTemplate(tmpfilename) story = [] story.append(Paragraph(escape(title),styles[&quot;Title&quot;])) story.append(Paragraph(escape(heading),styles[&quot;Heading2&quot;])) story.append(Paragraph(escape(text),styles[&quot;Normal&quot;])) story.append(Spacer(1,2*inch)) doc.build(story) data = open(tmpfilename,&quot;rb&quot;).read() os.unlink(tmpfilename) response.headers['Content-Type']='application/pdf' return data Has this library any framework integration? Yes, if you use web2py, you can make simple HTML reports that can be viewed in a browser, or donwloaded as PDF. Also, using web2py DAL, you can easily set up a templating engine for PDF documents. Look at Web2Py for examples What is the development status of this library? This library has more than 4 years since the initial port from PHP. Some code is in early development stages (mainly UTF-8 support and some advanced features). The good news are than PHP versions and examples are available since long time ago, so migration and some bug-fixes are easy. Said that, a former version is working successfully and is commercially supported since late 2008 for electronic invoices templates compliant with AFIP (Argentina IRS) normative, in several environments (linux, windows, etc.). It was originally included in PyRece, with thousands downloads to date. For further information see: http://www.pyafipws.com.ar/ http://code.google.com/p/pyafipws/ http://groups.google.com/group/pyafipws In contrast, WriteHTML support is not complete, so it must be considered in alpha state. Further enhancements using web2py helpers and xml parser will enable to parse more complex HTML files. What is the license of this library (pyfpdf)? Original FPDF uses a permissive license: http://www.fpdf.org/en/FAQ.php#q1 &quot;FPDF is released under a permissive license: there is no usage restriction. You may embed it freely in your application (commercial or not), with or without modifications.&quot; FPDF Version 1.6 license.txt says: http://www.fpdf.org/es/dl.php?v=16&amp;f=zip Permission is hereby granted, free of charge, to any person obtaining a copy of this software to use, copy, modify, distribute, sublicense, and/or sell copies of the software, and to permit persons to whom the software is furnished to do so. THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. fpdf.py is a revision of a port by Max Pat, in the original source uses the same licence: http://www.fpdf.org/dl.php?id=94 # * Software: FPDF # * Version: 1.53 # * Date: 2004-12-31 # * Author: Olivier PLATHEY # * License: Freeware # * # * You may use and modify this software as you wish. # * Ported to Python 2.4 by Max (maxpat78@yahoo.it) on 2006-05 To avoid ambiguity (and to be compatible with other free software, open source licenses), LGPL was chosen for this googlecode project (as Freeware isn't listed). Other FPDF ports had chosen similar licences (wxWindows Licence for C++ port, MIT licence for java port, etc.): http://www.fpdf.org/en/links.php Other FPDF derivatives also choose LGPL, as sFPDF by Ian Back Hint: You can use Wiki Syntax. Enter a comment: [It's All Text!] Terms - Privacy - Project Hosting Help Powered by Google Project Hosting Projects tazjel Starred projects altdragapt-cygardesiaautokeycopyqcyg-aptdragonflygooglefontdirectoryjquery-ui-vkkey-monminttymobileterminalmsysgitmusic21puttycygswapytextroomtweetxuc-debugweb2py Find open source projects...Create a project... tazjel@gmail.comabobani@gmail.com Sign in with another account... " />
  <RDF:Description RDF:about="urn:scrapbook:item20130524045915#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" tazjel@gmail.com ▼ | My favorites ▼ | Profile | Sign out Logo pyfpdf Simple PDF generation for Python (FPDF PHP port) AKA fpdf.py Project Home Downloads Wiki Issues Source Search for SetDrawColor set drawing color Documentation Updated Aug 12, 2010 by reingart SetDrawColor fpdf.set_draw_color(r:int, [g: int, b:int]) Description Defines the color used for all drawing operations (lines, rectangles and cell borders). It can be expressed in RGB components or gray scale. The method can be called before the first page is created and the value is retained from page to page. Parameters r: If g et b are given, red component; if not, indicates the gray level. Value between 0 and 255. g: Green component (between 0 and 255). b: Blue component (between 0 and 255). See also SetFillColor, SetTextColor, Line, Rect, Cell, MultiCell. Hint: You can use Wiki Syntax. Enter a comment: [It's All Text!] Terms - Privacy - Project Hosting Help Powered by Google Project Hosting Projects tazjel Starred projects altdragapt-cygardesiaautokeycopyqcyg-aptdragonflygooglefontdirectoryjquery-ui-vkkey-monminttymobileterminalmsysgitmusic21puttycygswapytextroomtweetxuc-debugweb2py Find open source projects...Create a project... tazjel@gmail.comabobani@gmail.com Sign in with another account... " />
  <RDF:Seq RDF:about="urn:scrapbook:cache">
    <RDF:li RDF:resource="urn:scrapbook:item20130523104443#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130523104520#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524043318#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524050654#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524045653#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524045705#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524050942#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524045754#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524050825#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524050934#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524045826#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524050801#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524045912#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524051124#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524050819#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524045915#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524050741#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524045924#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524045929#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524050738#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524045957#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524050411#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524050415#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524050510#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524050531#index"/>
    <RDF:li RDF:resource="urn:scrapbook:item20130524050609#index"/>
  </RDF:Seq>
  <RDF:Description RDF:about="urn:scrapbook:item20130524050510#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" tazjel@gmail.com ▼ | My favorites ▼ | Profile | Sign out Logo pyfpdf Simple PDF generation for Python (FPDF PHP port) AKA fpdf.py Project Home Downloads Wiki Issues Source Search for Web2Py web framework integration for PDF report and templates support Featured, Phase-Support Updated Feb 7, 2013 by leo.m.ro...@gmail.com Introduction Sample Report Sample Table Listing Samples Template Definitions Sample Templating Engine Introduction If you use web2py, you can make complex reports that can be viewed in a browser, or downloaded as PDF (taking advantage of web2py HTML helper objects to easily diagram a report). See WriteHTML for more information, supported tags and attributes, etc. Also, using web2py DAL, you can easily set up a templating engine for PDF documents. See Templates for more information. The following examples are packaged in a ready to run application: web2py.app.fpdf.w2p PyFPDF is included in web2py since release 1.85.2 Also, you can download the latest versión pyfpdf and uncompress it in the web2py, gluon, contrib folder. Note about images: this sample images are small so they may look like low quality ones. For better results, use bigger images: more DPI (screen is often 72/96DPI, printers are often 300/600DPI). As a rule of thumb, use at least half of the image size when rendering to PDF, ie. if image is 500x200px, use 250x100px as width/height attributes of IMG tag. Sample Report You could make a &quot;professional looking&quot; bussiness report just using web2py HTML helpers, mixin headers, logos, charts, text and tables. Te main advantage of this method is that the same report can be rendered in a HTML view, or can be downloaded as PDF, with a minimal effort: Sample: report.pdf Updated Live Demo (HTML and PDF version): http://www.web2py.com.ar/fpdf/default/report http://www.web2py.com.ar/fpdf/default/report.pdf def report(): response.title = &quot;web2py sample report&quot; # include a google chart (download it dynamically!) url = &quot;http://chart.apis.google.com/chart?cht=p3&amp;chd=t:60,40&amp;chs=500x200&amp;chl=Hello|World&amp;.png&quot; chart = IMG(_src=url, _width=&quot;250&quot;,_height=&quot;100&quot;) # create a small table with some data: rows = [THEAD(TR(TH(&quot;Key&quot;,_width=&quot;70%&quot;), TH(&quot;Value&quot;,_width=&quot;30%&quot;))), TBODY(TR(TD(&quot;Hello&quot;),TD(&quot;60&quot;)), TR(TD(&quot;World&quot;),TD(&quot;40&quot;)))] table = TABLE(*rows, _border=&quot;0&quot;, _align=&quot;center&quot;, _width=&quot;50%&quot;) if request.extension==&quot;pdf&quot;: from gluon.contrib.pyfpdf import FPDF, HTMLMixin # create a custom class with the required functionalities class MyFPDF(FPDF, HTMLMixin): def header(self): &quot;hook to draw custom page header (logo and title)&quot; logo=os.path.join(request.env.web2py_path,&quot;gluon&quot;,&quot;contrib&quot;,&quot;pyfpdf&quot;,&quot;tutorial&quot;,&quot;logo_pb.png&quot;) self.image(logo,10,8,33) self.set_font('Arial','B',15) self.cell(65) # padding self.cell(60,10,response.title,1,0,'C') self.ln(20) def footer(self): &quot;hook to draw custom page footer (printing page numbers)&quot; self.set_y(-15) self.set_font('Arial','I',8) txt = 'Page %s of %s' % (self.page_no(), self.alias_nb_pages()) self.cell(0,10,txt,0,0,'C') pdf=MyFPDF() # create a page and serialize/render HTML objects pdf.add_page() pdf.write_html(str(XML(table, sanitize=False))) pdf.write_html(str(XML(CENTER(chart), sanitize=False))) # prepare PDF to download: response.headers['Content-Type']='application/pdf' return pdf.output(dest='S') else: # normal html view: return dict(chart=chart, table=table) Sample Table Listing Also, you can make nice tables that automatically spreads over several pages, with header/footers, column/row highlight, etc., in a very pythonic way: Sample: listing.pdf Updated Live Demo (HTML and PDF version): http://www.web2py.com.ar/fpdf/default/listing http://www.web2py.com.ar/fpdf/default/listing.pdf def listing(): response.title = &quot;web2py sample listing&quot; # define header and footers: head = THEAD(TR(TH(&quot;Header 1&quot;,_width=&quot;50%&quot;), TH(&quot;Header 2&quot;,_width=&quot;30%&quot;), TH(&quot;Header 3&quot;,_width=&quot;20%&quot;), _bgcolor=&quot;#A0A0A0&quot;)) foot = TFOOT(TR(TH(&quot;Footer 1&quot;,_width=&quot;50%&quot;), TH(&quot;Footer 2&quot;,_width=&quot;30%&quot;), TH(&quot;Footer 3&quot;,_width=&quot;20%&quot;), _bgcolor=&quot;#E0E0E0&quot;)) # create several rows: rows = [] for i in range(1000): col = i % 2 and &quot;#F0F0F0&quot; or &quot;#FFFFFF&quot; rows.append(TR(TD(&quot;Row %s&quot; %i), TD(&quot;something&quot;, _align=&quot;center&quot;), TD(&quot;%s&quot; % i, _align=&quot;right&quot;), _bgcolor=col)) # make the table object body = TBODY(*rows) table = TABLE(*[head,foot, body], _border=&quot;1&quot;, _align=&quot;center&quot;, _width=&quot;100%&quot;) if request.extension==&quot;pdf&quot;: from gluon.contrib.pyfpdf import FPDF, HTMLMixin # define our FPDF class (move to modules if it is reused frequently) class MyFPDF(FPDF, HTMLMixin): def header(self): self.set_font('Arial','B',15) self.cell(0,10, response.title ,1,0,'C') self.ln(20) def footer(self): self.set_y(-15) self.set_font('Arial','I',8) txt = 'Page %s of %s' % (self.page_no(), self.alias_nb_pages()) self.cell(0,10,txt,0,0,'C') pdf=MyFPDF() # first page: pdf.add_page() pdf.write_html(str(XML(table, sanitize=False))) response.headers['Content-Type']='application/pdf' return pdf.output(dest='S') else: # normal html view: return dict(table=table)}}} Samples Template Definitions As stated in the Templates page, there are 3 ways of putting your templates in place. As in that page there are samples for the manually hardcoded way and the CSV document loading, here we will only show a sample of the template engine. Sample Templating Engine PyFPDF and web2py can be used to make PDF documents using templates like invoices, badges, certificates, etc.: Sample: invoice.pdf Updated Live Demo: http://www.web2py.com.ar/fpdf/default/invoice.pdf To handle multiples templates, we can define two tables in web2py: pdf_template: document general information (name, paper size, etc.) pdf_element: several rows for each document, describing graphics primitives and placeholders. In db.py write: db.define_table(&quot;pdf_template&quot;, Field(&quot;pdf_template_id&quot;,&quot;id&quot;), Field(&quot;title&quot;), Field(&quot;format&quot;, requires=IS_IN_SET([&quot;A4&quot;,&quot;legal&quot;,&quot;letter&quot;])), ) db.define_table(&quot;pdf_element&quot;, Field(&quot;pdf_template_id&quot;, db.pdf_template, requires=IS_IN_DB(db,'pdf_template.pdf_template_id', 'pdf_template.title')), Field(&quot;name&quot;, requires=IS_NOT_EMPTY()), Field(&quot;type&quot;, length=2, requires=IS_IN_SET(['T', 'L', 'I', 'B', 'BC'])), Field(&quot;x1&quot;, &quot;double&quot;, requires=IS_NOT_EMPTY()), Field(&quot;y1&quot;, &quot;double&quot;, requires=IS_NOT_EMPTY()), Field(&quot;x2&quot;, &quot;double&quot;, requires=IS_NOT_EMPTY()), Field(&quot;y2&quot;, &quot;double&quot;, requires=IS_NOT_EMPTY()), Field(&quot;font&quot;, default=&quot;Arial&quot;, requires=IS_IN_SET(['Courier','Arial','Times','Symbol','Zapfdingbats'])), Field(&quot;size&quot;, &quot;double&quot;, default=&quot;10&quot;, requires=IS_NOT_EMPTY()), Field(&quot;bold&quot;, &quot;boolean&quot;), Field(&quot;italic&quot;, &quot;boolean&quot;), Field(&quot;underline&quot;, &quot;boolean&quot;), Field(&quot;foreground&quot;, &quot;integer&quot;, default=0x000000, comment=&quot;Color text&quot;), Field(&quot;background&quot;, &quot;integer&quot;, default=0xFFFFFF, comment=&quot;Fill color&quot;), Field(&quot;align&quot;, &quot;string&quot;, length=1, default=&quot;L&quot;, requires=IS_IN_SET(['L', 'R', 'C', 'J'])), Field(&quot;text&quot;, &quot;text&quot;, comment=&quot;Default text&quot;), Field(&quot;priority&quot;, &quot;integer&quot;, default=0, comment=&quot;Z-Order&quot;), ) Warning: the fields &quot;type&quot;, &quot;size&quot; and &quot;text&quot; are reserved words for some DB engines, so validation: db = DAL('sqlite://storage.sqlite',pool_size=1,check_reserved=['ALL']) }}} will fail. sqlite, MySQL and postgres work OK. Proposals for new naming ideas are welcomed. At this point you could go to web2py AppAdmin and start to define your document templates, or use import/export functions to reuse your already defined formats! Note: if you used designer.py to create the templates, and you want to import the templates with the Web2Py database admin you will have to modify the file. So; designer.py outputs a file like this: {{{ line0;T;20.0;13.0;190.0;13.0;times;10.0;0;0;0;0;65535;C;;0 line1;T;20.0;67.0;190.0;67.0;times;10.0;0;0;0;0;65535;C;;0 name0;T;21;14;104;25;times;16.0;0;0;0;0;0;C;;2 title0;T;64;26;104;30;times;10.0;0;0;0;0;0;C;;2 }}} You will have to make it look lke this: {{{ pdf_element.pdf_template_id, pdf_element.name, pdf_element.type, pdf_element.x1, pdf_element.y1, pdf_element.x2, pdf_element.y2, pdf_element.font, pdf_element.size, pdf_element.bold, pdf_element.italic, pdf_element.underline, pdf_element.foreground, pdf_element.background, pdf_element.align, pdf_element.text, pdf_element.priority 1,line0,T,20.0,283.0,190.0,283.0,times,10.0,0,0,0,0,65535,C,,0 1,line1,T,20.0,337.0,190.0,337.0,times,10.0,0,0,0,0,65535,C,,0 1,name0,T,21,14,104,25,times,16.0,0,0,0,0,0,C,,2 1,title0,T,64,26,104,30,times,10.0,0,0,0,0,0,C,,2 }}} Where the first number indicates the template ID (important for the database system), and the first line indicates the database fields to fill. A simple python script should do the trick. After defining and filling your database, you can use PyFPDF [Templates] directly reading rows elements from the web2py database: For example, for an invoice, in a controller you could write: {{{ def invoice(): from gluon.contrib.pyfpdf import Template import os.path # generate sample invoice (according Argentina's regulations) import random from decimal import Decimal # read elements from db elements = db(db.pdf_element.pdf_template_id==1).select(orderby=db.pdf_element.priority) f = Template(format=&quot;A4&quot;, elements = elements, title=&quot;Sample Invoice&quot;, author=&quot;Sample Company&quot;, subject=&quot;Sample Customer&quot;, keywords=&quot;Electronic TAX Invoice&quot;) # create some random invoice line items and detail data detail = &quot;Lorem ipsum dolor sit amet, consectetur. &quot; * 5 items = [] for i in range(1, 30): ds = &quot;Sample product %s&quot; % i qty = random.randint(1,10) price = round(random.random()*100,3) code = &quot;%s%s%02d&quot; % (chr(random.randint(65,90)), chr(random.randint(65,90)),i) items.append(dict(code=code, unit='u', qty=qty, price=price, amount=qty*price, ds=&quot;%s: %s&quot; % (i,ds))) # divide and count lines lines = 0 li_items = [] for it in items: qty = it['qty'] code = it['code'] unit = it['unit'] for ds in f.split_multicell(it['ds'], 'item_description01'): # add item description line (without price nor amount) li_items.append(dict(code=code, ds=ds, qty=qty, unit=unit, price=None, amount=None)) # clean qty and code (show only at first) unit = qty = code = None # set last item line price and amount li_items[-1].update(amount = it['amount'], price = it['price']) # split detail into each line description obs=&quot;\n&lt;U&gt;Detail:&lt;/U&gt;\n\n&quot; + detail for ds in f.split_multicell(obs, 'item_description01'): li_items.append(dict(code=code, ds=ds, qty=qty, unit=unit, price=None, amount=None)) # calculate pages: lines = len(li_items) max_lines_per_page = 24 pages = lines / (max_lines_per_page - 1) if lines % (max_lines_per_page - 1): pages = pages + 1 # fill placeholders for each page for page in range(1, pages+1): f.add_page() f['page'] = 'Page %s of %s' % (page, pages) if pages&gt;1 and page&lt;pages: s = 'Continues on page %s' % (page+1) else: s = '' f['item_description%02d' % (max_lines_per_page+1)] = s f[&quot;company_name&quot;] = &quot;Sample Company&quot; f[&quot;company_logo&quot;] = os.path.join(request.env.web2py_path,&quot;gluon&quot;,&quot;contrib&quot;,&quot;pyfpdf&quot;,&quot;tutorial&quot;,&quot;logo.png&quot;) f[&quot;company_header1&quot;] = &quot;Some Address - somewhere -&quot; f[&quot;company_header2&quot;] = &quot;http://www.example.com&quot; f[&quot;company_footer1&quot;] = &quot;Tax Code ...&quot; f[&quot;company_footer2&quot;] = &quot;Tax/VAT ID ...&quot; f['number'] = '0001-00001234' f['issue_date'] = '2010-09-10' f['due_date'] = '2099-09-10' f['customer_name'] = &quot;Sample Client&quot; f['customer_address'] = &quot;Siempreviva 1234&quot; # print line item... li = 0 k = 0 total = Decimal(&quot;0.00&quot;) for it in li_items: k = k + 1 if k &gt; page * (max_lines_per_page - 1): break if it['amount']: total += Decimal(&quot;%.6f&quot; % it['amount']) if k &gt; (page - 1) * (max_lines_per_page - 1): li += 1 if it['qty'] is not None: f['item_quantity%02d' % li] = it['qty'] if it['code'] is not None: f['item_code%02d' % li] = it['code'] if it['unit'] is not None: f['item_unit%02d' % li] = it['unit'] f['item_description%02d' % li] = it['ds'] if it['price'] is not None: f['item_price%02d' % li] = &quot;%0.3f&quot; % it['price'] if it['amount'] is not None: f['item_amount%02d' % li] = &quot;%0.2f&quot; % it['amount'] # last page? print totals: if pages == page: f['net'] = &quot;%0.2f&quot; % (total/Decimal(&quot;1.21&quot;)) f['vat'] = &quot;%0.2f&quot; % (total*(1-1/Decimal(&quot;1.21&quot;))) f['total_label'] = 'Total:' else: f['total_label'] = 'SubTotal:' f['total'] = &quot;%0.2f&quot; % total response.headers['Content-Type']='application/pdf' return f.render('invoice.pdf', dest='S') }}} Of course, this is a hardcoded example, you can use the database to store invoices or any other data, there is no rigid class hierachy to follow, just fill your template like a dict! Comment by Ovidio...@gmail.com, Sep 13, 2010 well, I am not able to understand, how to call the report for my application. If I understand what is explained is that we implement the dual tables, and pdf_template pdf_element. But within my application how do I call the report? Comment by project member reingart, Sep 14, 2010 I've added &quot;live demos&quot; showing how to call web2py controllers (html and pdf views, when available). In downloads there is an sample application. PS: can you fill an issue, as googlecode project updates seems broken... (and there we can attach code, examples and so on) Comment by Ovidio...@gmail.com, Sep 18, 2010 Thank you for answering the previous post. But if I need to do a report by filtering by date, as do the data entry??? Comment by yamandu.costa, Sep 27, 2010 I´ve put some usable thing in a slice: http://web2pyslices.com/main/slices/take_slice/99 It does a simple report by letting the user pick a date range, filtering a table and providing a PDF button to get the PDF version. I think it can get better, so please test and comment! Comment by ankita.s...@gmail.com, Mar 1, 2012 I'm looking for php.... how can i implement that please tell me... i want such class to be more implemented than existing on on fpdf for writeHTML.. that doesnot accept table tag. Comment by adesanto...@gmail.com, Mar 21, 2012 Hello, nice work and share. I experienced odd output, the header() seems not handled the linefeed at the next page properly as the example class MyFPDF(...): def header(self): ... self.ln(20) I would like to suggest class MyFPDF(...): def header(self): ln = 20 first_page = 1 ... if self.page_no &gt; first_page: self.ln(ln*2) else: self.ln(ln) Hope it helps Comment by mweis...@gmail.com, May 1, 2013 First example &quot;report&quot;: import os is missing Hint: You can use Wiki Syntax. Enter a comment: [It's All Text!] Terms - Privacy - Project Hosting Help Powered by Google Project Hosting Projects tazjel Starred projects altdragapt-cygardesiaautokeycopyqcyg-aptdragonflygooglefontdirectoryjquery-ui-vkkey-monminttymobileterminalmsysgitmusic21puttycygswapytextroomtweetxuc-debugweb2py Find open source projects...Create a project... tazjel@gmail.comabobani@gmail.com Sign in with another account... " />
  <RDF:Description RDF:about="urn:scrapbook:item20130524045653#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" tazjel@gmail.com ▼ | My favorites ▼ | Profile | Sign out Logo pyfpdf Simple PDF generation for Python (FPDF PHP port) AKA fpdf.py Project Home Downloads Wiki Issues Source Search for Unicode unicode utf-8 ttf font support (based on sFPDF) Phase-Support, Featured Updated Dec 20, 2012 by romiq...@gmail.com Introduction The FPDF class was modified adding UTF-8 support. Moreover, it embeds only the necessary parts of the fonts that are used in the document, making the file size much smaller than if the whole fonts were embedded. These features were originally developed for the mPDF project, and ported from Ian Back's sFPDF LGPL PHP version. Before you can use UTF-8, you have to install at least one Unicode font in the font directory (or system font folder). Some free font packages are available for download (extract them into font folder): DejaVu family: Sans, Sans Condensed, Serif, Serif Condensed, Sans Mono (Supports more than 200 languages) GNU FreeFont family: FreeSans, FreeSerif, FreeMono Indic (ttf-indic-fonts debian/ubuntu package) for Bengali, Devanagari, Gujarati, Gurmukhi (including the variants for Punjabi), Kannada, Malayalam, Oriya, Tamil, Telugu, Tibetan AR PL New Sung (firefly): The Open Source Chinese Font (also supports others east-asia languages) Alee (ttf-alee arch linux package): General purpose Hangul truetype fonts that Contain Korean syllable and Latin9 (iso8859-15) characters. Fonts-TLWG (formerly ThaiFonts-Scalable) These fonts are included with this library installers, see Free Font Pack for FPDF below for more information. Then, to use a Unicode font in your script, pass True as the fourth parameter of AddFont(). Example This example uses several free fonts to display some Unicode strings. Be sure to install the fonts in the font directory first. #!/usr/bin/env python # -*- coding: utf8 -*- from fpdf import FPDF pdf = FPDF() pdf.add_page() # Add a DejaVu Unicode font (uses UTF-8) # Supports more than 200 languages. For a coverage status see: # http://dejavu.svn.sourceforge.net/viewvc/dejavu/trunk/dejavu-fonts/langcover.txt pdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True) pdf.set_font('DejaVu', '', 14) text = u&quot;&quot;&quot; English: Hello World Greek: Γειά σου κόσμος Polish: Witaj świecie Portuguese: Olá mundo Russian: Здравствуй, Мир Vietnamese: Xin chào thế giới Arabic: مرحبا العالم Hebrew: שלום עולם &quot;&quot;&quot; for txt in text.split('\n'): pdf.write(8, txt) pdf.ln(8) # Add a Indic Unicode font (uses UTF-8) # Supports: Bengali, Devanagari, Gujarati, # Gurmukhi (including the variants for Punjabi) # Kannada, Malayalam, Oriya, Tamil, Telugu, Tibetan pdf.add_font('gargi', '', 'gargi.ttf', uni=True) pdf.set_font('gargi', '', 14) pdf.write(8, u'Hindi: नमस्ते दुनिया') pdf.ln(20) # Add a AR PL New Sung Unicode font (uses UTF-8) # The Open Source Chinese Font (also supports others east-asia languages) pdf.add_font('fireflysung', '', 'fireflysung.ttf', uni=True) pdf.set_font('fireflysung', '', 14) pdf.write(8, u'Chinese: 你好世界\n') pdf.write(8, u'Japanese: こんにちは世界\n') pdf.ln(10) # Add a Alee Unicode font (uses UTF-8) # General purpose Hangul truetype fonts that Contain Korean syllable # and Latin9 (iso8859-15) characters. pdf.add_font('eunjin', '', 'Eunjin.ttf', uni=True) pdf.set_font('eunjin', '', 14) pdf.write(8, u'Korean: 안녕하세요') pdf.ln(20) # Add a Fonts-TLWG (formerly ThaiFonts-Scalable) (uses UTF-8) pdf.add_font('waree', '', 'Waree.ttf', uni=True) pdf.set_font('waree', '', 14) pdf.write(8, u'Thai: สวัสดีชาวโลก') pdf.ln(20) # Select a standard font (uses windows-1252) pdf.set_font('Arial', '', 14) pdf.ln(10) pdf.write(5, 'This is standard built-in font') pdf.output(&quot;unicode.pdf&quot;, 'F') View the result here: unicode.pdf Metric Files FPDF will try to automatically generate metrics (i.e. character widths) about TTF font files to speed up their processing. Such metrics are stored using the Python Pickle format (.pkl extension), by default in the font directory (ensure Read/Write permission!). TTF metric files often weight about 650K, so keep that in mind if you use many TTF fonts and have disk size or memory limitations. By design, metric files are not imported as they could cause a temporary memory leak if not managed properly (this could be an issue in a webserver environment with many processes/threads, so the current implementation discards metrics when FPDF objects are disposed). In most circumstances, you will not notice any difference about storing metric files vs. generating them in each run on-the-fly (according basic tests, elapsed time is equivalent, YMMV) Like the original php implementation, this library should work even if it could not store the metric file, and as no source code file is generated at runtime, it should work in restricted environments. Free Font Pack and Copyright Restrictions For your convenience, this library collected 96 TTF files in an optional &quot;Free Unicode TrueType Font Pack for FPDF&quot;, with useful fonts commonly distributed with GNU/Linux operating systems (see above for a complete description). This pack is included in the windows installers, or can be downloaded separately (for any operating system). You could use any TTF font file as long embedding usage is allowed in the licence. If not, a runtime exception will be raised saying: &quot;ERROR - Font file filename.ttf cannot be embedded due to copyright restrictions.&quot; Comment by project member jurgis.pralgauskis, Apr 28, 2013 if You use write_html( ..some unicode content.. ) https://code.google.com/p/pyfpdf/wiki/WriteHTML you should set font via &lt;font&gt; tag pdf.write_html(u&quot;&lt;H1&gt;&lt;font face='DejaVu' size='20'&gt;Ąžuolas&lt;/font&gt;&lt;H2&gt;&quot;) Hint: You can use Wiki Syntax. Enter a comment: [It's All Text!] Terms - Privacy - Project Hosting Help Powered by Google Project Hosting Projects tazjel Starred projects altdragapt-cygardesiaautokeycopyqcyg-aptdragonflygooglefontdirectoryjquery-ui-vkkey-monminttymobileterminalmsysgitmusic21puttycygswapytextroomtweetxuc-debugweb2py Find open source projects...Create a project... tazjel@gmail.comabobani@gmail.com Sign in with another account... " />
  <RDF:Description RDF:about="urn:scrapbook:item20130524050825#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" tazjel@gmail.com ▼ | My favorites ▼ | Profile | Sign out jurgis.pralgauskis User Profile Username: jurgis.pralgauskis@gmail.com Star this developer Starred developers: None Projects Role Project Summary Owner code-by-example System to help learn programming - look at examples/ repeat them/ compare different languages Owner multiplayer-edu step-by-step multiplayer interface framework (php) (for educational purposes) Owner vaiku-zaidimai azartiniai lošimai ir pan... Contributor pyfpdf Simple PDF generation for Python (FPDF PHP port) AKA fpdf.py Starred by jurgis.pralgauskis Type Name Summary Project python-turtle-demo A collection of demo application of Python's new turtle module (for 2.5, 2.6 and 3.x) Project pybotwar Robot battle simulation with robots coded in Python Project canviz JavaScript library for drawing Graphviz graphs to a web browser canvas Project rur-ple an environment designed to help you learn computer programming using the language Python Terms - Privacy - Project Hosting Help Powered by Google Project Hosting Projects tazjel Starred projects altdragapt-cygardesiaautokeycopyqcyg-aptdragonflygooglefontdirectoryjquery-ui-vkkey-monminttymobileterminalmsysgitmusic21puttycygswapytextroomtweetxuc-debugweb2py Find open source projects...Create a project... tazjel@gmail.comabobani@gmail.com Sign in with another account... 69350true Jurgis Pralgauskis on I'm on Add to circles " />
  <RDF:Description RDF:about="urn:scrapbook:item20130524045957#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" tazjel@gmail.com ▼ | My favorites ▼ | Profile | Sign out Logo pyfpdf Simple PDF generation for Python (FPDF PHP port) AKA fpdf.py Project Home Downloads Wiki Issues Source Search for MultiCell print text with line breaks Documentation Updated Aug 12, 2010 by reingart MultiCell fpdf.multi_cell(w: float, h: float, txt: str, border=0, align: str = 'J', fill: bool = 0) Description This method allows printing text with line breaks. They can be automatic (as soon as the text reaches the right border of the cell) or explicit (via the \n character). As many cells as necessary are output, one below the other. Text can be aligned, centered or justified. The cell block can be framed and the background painted. Parameters w: Width of cells. If 0, they extend up to the right margin of the page. h: Height of cells. txt: String to print. border: Indicates if borders must be drawn around the cell block. The value can be either a number: 0: no border 1: frame or a string containing some or all of the following characters (in any order): L: left T: top R: right B: bottom Default value: 0. align: Sets the text alignment. Possible values are: L: left alignment C: center R: right alignment J: justification (default value) fill Indicates if the cell background must be painted (true) or transparent (false). Default value: false. See also SetFont, SetDrawColor, SetFillColor, SetTextColor, SetLineWidth, Cell, Write, SetAutoPageBreak. Comment by mail.cod...@googlemail.com, Nov 4, 2012 I don't see the documentation for a line break hight for multicells as ln does for cell (space between two indepented strings on the same column). ln doesn't do anything when used with multicell, except if you go into negative values it draws space between two cells which are not in the same row but in the same column. And with that said i don't see anything that creates a usefull gridlayout. Either i don't see the part where those two things can be done or your API is just chaos Hint: You can use Wiki Syntax. Enter a comment: [It's All Text!] Terms - Privacy - Project Hosting Help Powered by Google Project Hosting Projects tazjel Starred projects altdragapt-cygardesiaautokeycopyqcyg-aptdragonflygooglefontdirectoryjquery-ui-vkkey-monminttymobileterminalmsysgitmusic21puttycygswapytextroomtweetxuc-debugweb2py Find open source projects...Create a project... tazjel@gmail.comabobani@gmail.com Sign in with another account... " />
  <RDF:Description RDF:about="urn:scrapbook:item20130524050934#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" tazjel@gmail.com ▼ | My favorites ▼ | Profile | Sign out Logo pyfpdf Simple PDF generation for Python (FPDF PHP port) AKA fpdf.py Project Home Downloads Wiki Issues Source Search for Unicode unicode utf-8 ttf font support (based on sFPDF) Phase-Support, Featured Updated Dec 20, 2012 by romiq...@gmail.com Introduction The FPDF class was modified adding UTF-8 support. Moreover, it embeds only the necessary parts of the fonts that are used in the document, making the file size much smaller than if the whole fonts were embedded. These features were originally developed for the mPDF project, and ported from Ian Back's sFPDF LGPL PHP version. Before you can use UTF-8, you have to install at least one Unicode font in the font directory (or system font folder). Some free font packages are available for download (extract them into font folder): DejaVu family: Sans, Sans Condensed, Serif, Serif Condensed, Sans Mono (Supports more than 200 languages) GNU FreeFont family: FreeSans, FreeSerif, FreeMono Indic (ttf-indic-fonts debian/ubuntu package) for Bengali, Devanagari, Gujarati, Gurmukhi (including the variants for Punjabi), Kannada, Malayalam, Oriya, Tamil, Telugu, Tibetan AR PL New Sung (firefly): The Open Source Chinese Font (also supports others east-asia languages) Alee (ttf-alee arch linux package): General purpose Hangul truetype fonts that Contain Korean syllable and Latin9 (iso8859-15) characters. Fonts-TLWG (formerly ThaiFonts-Scalable) These fonts are included with this library installers, see Free Font Pack for FPDF below for more information. Then, to use a Unicode font in your script, pass True as the fourth parameter of AddFont(). Example This example uses several free fonts to display some Unicode strings. Be sure to install the fonts in the font directory first. #!/usr/bin/env python # -*- coding: utf8 -*- from fpdf import FPDF pdf = FPDF() pdf.add_page() # Add a DejaVu Unicode font (uses UTF-8) # Supports more than 200 languages. For a coverage status see: # http://dejavu.svn.sourceforge.net/viewvc/dejavu/trunk/dejavu-fonts/langcover.txt pdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True) pdf.set_font('DejaVu', '', 14) text = u&quot;&quot;&quot; English: Hello World Greek: Γειά σου κόσμος Polish: Witaj świecie Portuguese: Olá mundo Russian: Здравствуй, Мир Vietnamese: Xin chào thế giới Arabic: مرحبا العالم Hebrew: שלום עולם &quot;&quot;&quot; for txt in text.split('\n'): pdf.write(8, txt) pdf.ln(8) # Add a Indic Unicode font (uses UTF-8) # Supports: Bengali, Devanagari, Gujarati, # Gurmukhi (including the variants for Punjabi) # Kannada, Malayalam, Oriya, Tamil, Telugu, Tibetan pdf.add_font('gargi', '', 'gargi.ttf', uni=True) pdf.set_font('gargi', '', 14) pdf.write(8, u'Hindi: नमस्ते दुनिया') pdf.ln(20) # Add a AR PL New Sung Unicode font (uses UTF-8) # The Open Source Chinese Font (also supports others east-asia languages) pdf.add_font('fireflysung', '', 'fireflysung.ttf', uni=True) pdf.set_font('fireflysung', '', 14) pdf.write(8, u'Chinese: 你好世界\n') pdf.write(8, u'Japanese: こんにちは世界\n') pdf.ln(10) # Add a Alee Unicode font (uses UTF-8) # General purpose Hangul truetype fonts that Contain Korean syllable # and Latin9 (iso8859-15) characters. pdf.add_font('eunjin', '', 'Eunjin.ttf', uni=True) pdf.set_font('eunjin', '', 14) pdf.write(8, u'Korean: 안녕하세요') pdf.ln(20) # Add a Fonts-TLWG (formerly ThaiFonts-Scalable) (uses UTF-8) pdf.add_font('waree', '', 'Waree.ttf', uni=True) pdf.set_font('waree', '', 14) pdf.write(8, u'Thai: สวัสดีชาวโลก') pdf.ln(20) # Select a standard font (uses windows-1252) pdf.set_font('Arial', '', 14) pdf.ln(10) pdf.write(5, 'This is standard built-in font') pdf.output(&quot;unicode.pdf&quot;, 'F') View the result here: unicode.pdf Metric Files FPDF will try to automatically generate metrics (i.e. character widths) about TTF font files to speed up their processing. Such metrics are stored using the Python Pickle format (.pkl extension), by default in the font directory (ensure Read/Write permission!). TTF metric files often weight about 650K, so keep that in mind if you use many TTF fonts and have disk size or memory limitations. By design, metric files are not imported as they could cause a temporary memory leak if not managed properly (this could be an issue in a webserver environment with many processes/threads, so the current implementation discards metrics when FPDF objects are disposed). In most circumstances, you will not notice any difference about storing metric files vs. generating them in each run on-the-fly (according basic tests, elapsed time is equivalent, YMMV) Like the original php implementation, this library should work even if it could not store the metric file, and as no source code file is generated at runtime, it should work in restricted environments. Free Font Pack and Copyright Restrictions For your convenience, this library collected 96 TTF files in an optional &quot;Free Unicode TrueType Font Pack for FPDF&quot;, with useful fonts commonly distributed with GNU/Linux operating systems (see above for a complete description). This pack is included in the windows installers, or can be downloaded separately (for any operating system). You could use any TTF font file as long embedding usage is allowed in the licence. If not, a runtime exception will be raised saying: &quot;ERROR - Font file filename.ttf cannot be embedded due to copyright restrictions.&quot; Comment by project member jurgis.pralgauskis, Apr 28, 2013 if You use write_html( ..some unicode content.. ) https://code.google.com/p/pyfpdf/wiki/WriteHTML you should set font via &lt;font&gt; tag pdf.write_html(u&quot;&lt;H1&gt;&lt;font face='DejaVu' size='20'&gt;Ąžuolas&lt;/font&gt;&lt;H2&gt;&quot;) Hint: You can use Wiki Syntax. Enter a comment: [It's All Text!] Terms - Privacy - Project Hosting Help Powered by Google Project Hosting Projects tazjel Starred projects altdragapt-cygardesiaautokeycopyqcyg-aptdragonflygooglefontdirectoryjquery-ui-vkkey-monminttymobileterminalmsysgitmusic21puttycygswapytextroomtweetxuc-debugweb2py Find open source projects...Create a project... tazjel@gmail.comabobani@gmail.com Sign in with another account... " />
  <RDF:Description RDF:about="urn:scrapbook:item20130524050942#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" tazjel@gmail.com ▼ | My favorites ▼ | Profile | Sign out Logo pyfpdf Simple PDF generation for Python (FPDF PHP port) AKA fpdf.py Project Home Downloads Wiki Issues Source Search for Unicode unicode utf-8 ttf font support (based on sFPDF) Phase-Support, Featured Updated Dec 20, 2012 by romiq...@gmail.com Introduction The FPDF class was modified adding UTF-8 support. Moreover, it embeds only the necessary parts of the fonts that are used in the document, making the file size much smaller than if the whole fonts were embedded. These features were originally developed for the mPDF project, and ported from Ian Back's sFPDF LGPL PHP version. Before you can use UTF-8, you have to install at least one Unicode font in the font directory (or system font folder). Some free font packages are available for download (extract them into font folder): DejaVu family: Sans, Sans Condensed, Serif, Serif Condensed, Sans Mono (Supports more than 200 languages) GNU FreeFont family: FreeSans, FreeSerif, FreeMono Indic (ttf-indic-fonts debian/ubuntu package) for Bengali, Devanagari, Gujarati, Gurmukhi (including the variants for Punjabi), Kannada, Malayalam, Oriya, Tamil, Telugu, Tibetan AR PL New Sung (firefly): The Open Source Chinese Font (also supports others east-asia languages) Alee (ttf-alee arch linux package): General purpose Hangul truetype fonts that Contain Korean syllable and Latin9 (iso8859-15) characters. Fonts-TLWG (formerly ThaiFonts-Scalable) These fonts are included with this library installers, see Free Font Pack for FPDF below for more information. Then, to use a Unicode font in your script, pass True as the fourth parameter of AddFont(). Example This example uses several free fonts to display some Unicode strings. Be sure to install the fonts in the font directory first. #!/usr/bin/env python # -*- coding: utf8 -*- from fpdf import FPDF pdf = FPDF() pdf.add_page() # Add a DejaVu Unicode font (uses UTF-8) # Supports more than 200 languages. For a coverage status see: # http://dejavu.svn.sourceforge.net/viewvc/dejavu/trunk/dejavu-fonts/langcover.txt pdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True) pdf.set_font('DejaVu', '', 14) text = u&quot;&quot;&quot; English: Hello World Greek: Γειά σου κόσμος Polish: Witaj świecie Portuguese: Olá mundo Russian: Здравствуй, Мир Vietnamese: Xin chào thế giới Arabic: مرحبا العالم Hebrew: שלום עולם &quot;&quot;&quot; for txt in text.split('\n'): pdf.write(8, txt) pdf.ln(8) # Add a Indic Unicode font (uses UTF-8) # Supports: Bengali, Devanagari, Gujarati, # Gurmukhi (including the variants for Punjabi) # Kannada, Malayalam, Oriya, Tamil, Telugu, Tibetan pdf.add_font('gargi', '', 'gargi.ttf', uni=True) pdf.set_font('gargi', '', 14) pdf.write(8, u'Hindi: नमस्ते दुनिया') pdf.ln(20) # Add a AR PL New Sung Unicode font (uses UTF-8) # The Open Source Chinese Font (also supports others east-asia languages) pdf.add_font('fireflysung', '', 'fireflysung.ttf', uni=True) pdf.set_font('fireflysung', '', 14) pdf.write(8, u'Chinese: 你好世界\n') pdf.write(8, u'Japanese: こんにちは世界\n') pdf.ln(10) # Add a Alee Unicode font (uses UTF-8) # General purpose Hangul truetype fonts that Contain Korean syllable # and Latin9 (iso8859-15) characters. pdf.add_font('eunjin', '', 'Eunjin.ttf', uni=True) pdf.set_font('eunjin', '', 14) pdf.write(8, u'Korean: 안녕하세요') pdf.ln(20) # Add a Fonts-TLWG (formerly ThaiFonts-Scalable) (uses UTF-8) pdf.add_font('waree', '', 'Waree.ttf', uni=True) pdf.set_font('waree', '', 14) pdf.write(8, u'Thai: สวัสดีชาวโลก') pdf.ln(20) # Select a standard font (uses windows-1252) pdf.set_font('Arial', '', 14) pdf.ln(10) pdf.write(5, 'This is standard built-in font') pdf.output(&quot;unicode.pdf&quot;, 'F') View the result here: unicode.pdf Metric Files FPDF will try to automatically generate metrics (i.e. character widths) about TTF font files to speed up their processing. Such metrics are stored using the Python Pickle format (.pkl extension), by default in the font directory (ensure Read/Write permission!). TTF metric files often weight about 650K, so keep that in mind if you use many TTF fonts and have disk size or memory limitations. By design, metric files are not imported as they could cause a temporary memory leak if not managed properly (this could be an issue in a webserver environment with many processes/threads, so the current implementation discards metrics when FPDF objects are disposed). In most circumstances, you will not notice any difference about storing metric files vs. generating them in each run on-the-fly (according basic tests, elapsed time is equivalent, YMMV) Like the original php implementation, this library should work even if it could not store the metric file, and as no source code file is generated at runtime, it should work in restricted environments. Free Font Pack and Copyright Restrictions For your convenience, this library collected 96 TTF files in an optional &quot;Free Unicode TrueType Font Pack for FPDF&quot;, with useful fonts commonly distributed with GNU/Linux operating systems (see above for a complete description). This pack is included in the windows installers, or can be downloaded separately (for any operating system). You could use any TTF font file as long embedding usage is allowed in the licence. If not, a runtime exception will be raised saying: &quot;ERROR - Font file filename.ttf cannot be embedded due to copyright restrictions.&quot; Comment by project member jurgis.pralgauskis, Apr 28, 2013 if You use write_html( ..some unicode content.. ) https://code.google.com/p/pyfpdf/wiki/WriteHTML you should set font via &lt;font&gt; tag pdf.write_html(u&quot;&lt;H1&gt;&lt;font face='DejaVu' size='20'&gt;Ąžuolas&lt;/font&gt;&lt;H2&gt;&quot;) Hint: You can use Wiki Syntax. Enter a comment: [It's All Text!] Terms - Privacy - Project Hosting Help Powered by Google Project Hosting Projects tazjel Starred projects altdragapt-cygardesiaautokeycopyqcyg-aptdragonflygooglefontdirectoryjquery-ui-vkkey-monminttymobileterminalmsysgitmusic21puttycygswapytextroomtweetxuc-debugweb2py Find open source projects...Create a project... tazjel@gmail.comabobani@gmail.com Sign in with another account... " />
  <RDF:Description RDF:about="urn:scrapbook:item20130524045705#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" tazjel@gmail.com ▼ | My favorites ▼ | Profile | Sign out Logo pyfpdf Simple PDF generation for Python (FPDF PHP port) AKA fpdf.py Project Home Downloads Wiki Issues Source Search for AddFont add a new font Phase-Support, Featured Updated Aug 15, 2012 by reingart AddFont fpdf.add_font(family, style='', fname='', uni=False) Description Imports a TrueType, OpenType or Type1 font and makes it available. Warning: For !Type1 and legacy fonts it is necessary to generate a font definition file first with the MakeFont utility. This feature is currently deprecated in favour to TrueType unicode font support (whose are automatically processed with the ttfonts.py included utility). Note: the font source files must be accessible. They are searched successively in (if this constants are defined): FPDF_FONTPATH (by default, font folder in the fpdf package directory) SYSTEM_TTFONTS (i.e. C:\WINDOWS\FONTS) If the file corresponding to the requested font is not found, the runtime exception &quot;TTF Font file not found: &quot; is raised. For more information, see Unicode suport page. The method should be called before SetFont method is used, and the font will be available for the whole document. Parameters family: Family font. Used as a reference for SetFont, for example: 'dejavu' style: Font style. Deprecated, maintained only for backward compatibility. fname: Font file name (i.e. 'DejaVuSansCondensed.ttf'). You can specify a full path, if not, the file will be searched in FPDF_FONTPATH or SYSTEM_TTFONTS uni: TTF Unicode flag (if set to True, TrueType font subset embedding will be enabled and text will be treated as utf8 by default). You must not call AddFont for PDF Standard Latin-1 fonts (Courier, Helvetica, Times, Symbol, Zapfdingbats), use SetFont directly in that case. Calling this method with uni=False is discouraged as legacy font support is complex and deprecated. Example # Add a Unicode free font pdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True) # Add a Unicode system font (using full path) pdf.add_font('sysfont', '', r&quot;c:\WINDOWS\Fonts\arial.ttf&quot;, uni=True) See also SetFont, SetFontSize, Cell, MultiCell, Write. Hint: You can use Wiki Syntax. Enter a comment: [It's All Text!] Terms - Privacy - Project Hosting Help Powered by Google Project Hosting Projects tazjel Starred projects altdragapt-cygardesiaautokeycopyqcyg-aptdragonflygooglefontdirectoryjquery-ui-vkkey-monminttymobileterminalmsysgitmusic21puttycygswapytextroomtweetxuc-debugweb2py Find open source projects...Create a project... tazjel@gmail.comabobani@gmail.com Sign in with another account... " />
  <RDF:Description RDF:about="urn:scrapbook:item20130524045754#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" tazjel@gmail.com ▼ | My favorites ▼ | Profile | Sign out Logo pyfpdf Simple PDF generation for Python (FPDF PHP port) AKA fpdf.py Project Home Downloads Wiki Issues Source Search for AddFont add a new font Phase-Support, Featured Updated Aug 15, 2012 by reingart AddFont fpdf.add_font(family, style='', fname='', uni=False) Description Imports a TrueType, OpenType or Type1 font and makes it available. Warning: For !Type1 and legacy fonts it is necessary to generate a font definition file first with the MakeFont utility. This feature is currently deprecated in favour to TrueType unicode font support (whose are automatically processed with the ttfonts.py included utility). Note: the font source files must be accessible. They are searched successively in (if this constants are defined): FPDF_FONTPATH (by default, font folder in the fpdf package directory) SYSTEM_TTFONTS (i.e. C:\WINDOWS\FONTS) If the file corresponding to the requested font is not found, the runtime exception &quot;TTF Font file not found: &quot; is raised. For more information, see Unicode suport page. The method should be called before SetFont method is used, and the font will be available for the whole document. Parameters family: Family font. Used as a reference for SetFont, for example: 'dejavu' style: Font style. Deprecated, maintained only for backward compatibility. fname: Font file name (i.e. 'DejaVuSansCondensed.ttf'). You can specify a full path, if not, the file will be searched in FPDF_FONTPATH or SYSTEM_TTFONTS uni: TTF Unicode flag (if set to True, TrueType font subset embedding will be enabled and text will be treated as utf8 by default). You must not call AddFont for PDF Standard Latin-1 fonts (Courier, Helvetica, Times, Symbol, Zapfdingbats), use SetFont directly in that case. Calling this method with uni=False is discouraged as legacy font support is complex and deprecated. Example # Add a Unicode free font pdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True) # Add a Unicode system font (using full path) pdf.add_font('sysfont', '', r&quot;c:\WINDOWS\Fonts\arial.ttf&quot;, uni=True) See also SetFont, SetFontSize, Cell, MultiCell, Write. Hint: You can use Wiki Syntax. Enter a comment: [It's All Text!] Terms - Privacy - Project Hosting Help Powered by Google Project Hosting Projects tazjel Starred projects altdragapt-cygardesiaautokeycopyqcyg-aptdragonflygooglefontdirectoryjquery-ui-vkkey-monminttymobileterminalmsysgitmusic21puttycygswapytextroomtweetxuc-debugweb2py Find open source projects...Create a project... tazjel@gmail.comabobani@gmail.com Sign in with another account... " />
  <RDF:Description RDF:about="urn:scrapbook:item20130524045929#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" tazjel@gmail.com ▼ | My favorites ▼ | Profile | Sign out Logo pyfpdf Simple PDF generation for Python (FPDF PHP port) AKA fpdf.py Project Home Downloads Wiki Issues Source Search for SetFillColor set filling color Documentation Updated Aug 12, 2010 by reingart SetFillColor fpdf.set_fill_color(r:int [, g:int, b:int]) Description Defines the color used for all filling operations (filled rectangles and cell backgrounds). It can be expressed in RGB components or gray scale. The method can be called before the first page is created and the value is retained from page to page. Parameters r: If g and b are given, red component; if not, indicates the gray level. Value between 0 and 255. g: Green component (between 0 and 255). b: Blue component (between 0 and 255). See also SetDrawColor, SetTextColor, Rect, Cell, MultiCell. Comment by smp...@gmail.com, Aug 11, 2012 fpdf.set_fill_color(r:int [, g:int, b:int]) Hint: You can use Wiki Syntax. Enter a comment: [It's All Text!] Terms - Privacy - Project Hosting Help Powered by Google Project Hosting Projects tazjel Starred projects altdragapt-cygardesiaautokeycopyqcyg-aptdragonflygooglefontdirectoryjquery-ui-vkkey-monminttymobileterminalmsysgitmusic21puttycygswapytextroomtweetxuc-debugweb2py Find open source projects...Create a project... tazjel@gmail.comabobani@gmail.com Sign in with another account... " />
  <RDF:Description RDF:about="urn:scrapbook:item20130524050819#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" tazjel@gmail.com ▼ | My favorites ▼ | Profile | Sign out Logo pyfpdf Simple PDF generation for Python (FPDF PHP port) AKA fpdf.py Project Home Downloads Wiki Issues Source Search for WriteHTML simple HTML rendering for reports Featured, Phase-Support Updated May 27, 2011 by reingart Introduction PyFPDF now supports basic HTML, mainly intended to write reports from web frameworks. It understands a limited subset of the HTML language, and it doesn't support advanced features nor CSS (look below). HTMLMixin could be used along with FPDF class to implement this functionality (see the example). Sample: html.pdf Details HTML tags and attributes supported: H1 to H8: headings (align attribute) P: paragraphs (align attributes) B, I, U: bold, italic, underline FONT: (face, size, color attributes) CENTER for aling A: links (href attribute)) IMG: images (src, width, height attributes) OL/UL/LI: ordered, unordered and list items (can be nested) TABLE: (border, width attributes) THEAD: header (opens each page) TFOOT: footer (closes each page) TBODY: actual rows TR: rows (bgcolor attribute) TH: highlight cells (align, bgcolor, width attributes) TD: rows (align, bgcolor, width attribute) Note: Tables should have at least a first TH row with width attribute. Example html = &quot;&quot;&quot; &lt;H1 align=&quot;center&quot;&gt;html2fpdf&lt;/H1&gt; &lt;h2&gt;Basic usage&lt;/h2&gt; &lt;p&gt;You can now easily print text mixing different styles : &lt;B&gt;bold&lt;/B&gt;, &lt;I&gt;italic&lt;/I&gt;, &lt;U&gt;underlined&lt;/U&gt;, or &lt;B&gt;&lt;I&gt;&lt;U&gt;all at once&lt;/U&gt;&lt;/I&gt;&lt;/B&gt;!&lt;BR&gt;You can also insert links on text, such as &lt;A HREF=&quot;http://www.fpdf.org&quot;&gt;www.fpdf.org&lt;/A&gt;, or on an image: click on the logo.&lt;br&gt; &lt;center&gt; &lt;A HREF=&quot;http://www.fpdf.org&quot;&gt;&lt;img src=&quot;tutorial/logo.png&quot; width=&quot;104&quot; height=&quot;71&quot;&gt;&lt;/A&gt; &lt;/center&gt; &lt;h3&gt;Sample List&lt;/h3&gt; &lt;ul&gt;&lt;li&gt;option 1&lt;/li&gt; &lt;ol&gt;&lt;li&gt;option 2&lt;/li&gt;&lt;/ol&gt; &lt;li&gt;option 3&lt;/li&gt;&lt;/ul&gt; &lt;table border=&quot;0&quot; align=&quot;center&quot; width=&quot;50%&quot;&gt; &lt;thead&gt;&lt;tr&gt;&lt;th width=&quot;30%&quot;&gt;Header 1&lt;/th&gt;&lt;th width=&quot;70%&quot;&gt;header 2&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;cell 1&lt;/td&gt;&lt;td&gt;cell 2&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;cell 2&lt;/td&gt;&lt;td&gt;cell 3&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &quot;&quot;&quot; from pyfpdf import FPDF, HTMLMixin class MyFPDF(FPDF, HTMLMixin): pass pdf=MyFPDF() #First page pdf.add_page() pdf.write_html(html) pdf.output('html.pdf','F') See html.py or Web2Py for a complete example Comment by project member jurgis.pralgauskis, Apr 28, 2013 if you have unicode in html, you should set ttf font via &lt;font&gt; tag pdf.add_font('DejaVu?', '', 'DejaVuSans?.ttf', uni=True) pdf.write_html(&quot;&lt;font face='DejaVu'&gt;%s&lt;/font&gt;&quot; % str(XML(tags, sanitize=False))) ps.: you might need to add other variations for &lt;b&gt; &lt;i&gt; pdf.add_font('DejaVu?', 'B', 'DejaVuSans?-Bold.ttf', uni=True) pdf.add_font('DejaVu?', 'I', 'DejaVuSans?-Oblique.ttf', uni=True) pdf.add_font('DejaVu?', 'BI', 'DejaVuSans?-BoldOblique?.ttf', uni=True) more: https://code.google.com/p/pyfpdf/wiki/Unicode Hint: You can use Wiki Syntax. Enter a comment: [It's All Text!] Terms - Privacy - Project Hosting Help Powered by Google Project Hosting Projects tazjel Starred projects altdragapt-cygardesiaautokeycopyqcyg-aptdragonflygooglefontdirectoryjquery-ui-vkkey-monminttymobileterminalmsysgitmusic21puttycygswapytextroomtweetxuc-debugweb2py Find open source projects...Create a project... tazjel@gmail.comabobani@gmail.com Sign in with another account... " />
  <RDF:Description RDF:about="urn:scrapbook:item20130524050609#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" Share Email FacebookTwitterGoogle+PinterestLinkedInStumbleUponRedditGoogle BookmarksWordPressTumblrDeliciousDiggMessengerMySpaceYahoo BookmarksBeboMister-WongGoogle ReaderOrkutXINGBufferEvernoteNetvibes ShareStrandsBusiness ExchangeArtoTipdSmakNewsPlurkAIMYahoo MessengerIdenti.caMozillacaLockerz GrabBlogger PostTypePad PostBox.netKindle ItNetlogTechnorati FavoritesCiteULikeJumptagsHemidemiFunPInstapaperPhoneFavsXerpiNetvouzWinkDiigoBibSonomyBlogMarksTailrankStartAidKledyKhabbrMeneameYoolinkBookmarks.frTechnotizieNewsVineMultiplyFriendFeedPlaxo PulsePingSquidooProtopage BookmarksBlinklistFavesYiGGWebnewsSegnaloPushaYouMobSlashdotFarkAllvoicesJamespotImera BrazilTwiddlaLinkaGoGounalogHuggDiglogNowPublicLiveJournalCurrentHelloTxtSpurlYampleOneviewLinkatopiaSimpyBuddyMarksAsk.com MyStuffViadeoMapleWistsConnoteaBackflipMyLinkVaultSiteJotSphinnDZoneCare2 NewsHyvesSphereBitty BrowserGabbrSymbaloo FeedsTagzaFolkdNewsTrustAmazon Wish ListPrintFriendlyRead It LaterTuentiEmailRediff MyPage Google GmailYahoo MailHotmailAOL MailAny email By AddToAny web2py[:] Login Register If you benefit from web2py hope you feel encouraged to pay it forward by contributing back to society in whatever form you choose! Connect! and share your web2py slices Facebook Google Go Lost password Create your account PDF with ReportLab Recipe by Hans Christian von Stockhausen (hcvst) on 2012-10-17 in Controller Views (654)Favorite (0)Like (1)Dislike (0)Subscribe (0) A simple web2py controller that shows how to generate a PDF with the ReportLab library. Share &quot;&quot;&quot; Simple web2py controller to generate PDF documents with ReportLab. Author: H.C. v. Stockhausen &lt;hc at vst.io&gt; Date: 2012-10-14 Also see http://www.reportlab.com &quot;&quot;&quot; import cStringIO from reportlab.platypus.doctemplate import SimpleDocTemplate from reportlab.platypus import Paragraph, Spacer from reportlab.lib.styles import getSampleStyleSheet from reportlab.lib.units import inch def generate(): &quot;&quot;&quot; To display the generated PDF in your browser go to: http://.../&lt;app&gt;/&lt;controller&gt;/generate To download it as hello.pdf, for example, instead, use: http://.../&lt;app&gt;/&lt;controller&gt;/generate/hello.pdf &quot;&quot;&quot; styles = getSampleStyleSheet() story = [ Paragraph(&quot;Hello World&quot;, styles['Heading1']), Paragraph(&quot;The quick brown fox&quot;, styles['Normal']), Spacer(1, 0.25*inch), Paragraph(&quot;jumps over the lazy dog.&quot;, styles['Normal'])] buffer = cStringIO.StringIO() doc = SimpleDocTemplate(buffer) doc.build(story) pdf = buffer.getvalue() buffer.close() filename = request.args(0) if filename: header = {'Content-Disposition': 'attachment; filename=' + filename} else: header = {'Content-Type': 'application/pdf'} response.headers.update(header) return pdf pdf reportlab Share Related slices Simplest PDF output ever thanks to FPDF Simple PDF Report [updated] PDF with ReportLab II PDF with ReportLab II Comments (0) Login to post © 2012 - web2pyslices.com web2py poweredMovuca Social CMSDonate with Paypal Hosting graciously provided by: Python Anywhere Notificationsclose (i) AdChoices +52 [Ahmed Bani] +53 including You SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. SECURITY WARNING: Please treat the URL above as you would your password and do not share it with anyone. Like Like 408407 Send Send Find us on Facebook Web2py Like Like You like this. You and 407 others like Web2py.407 people like Web2py. Sundar Nadimpalli Bruno Meira Melhado Anenth Vishnu Herzger Chutgur Luke Dunstan Gianluca Mazzoni Samuele Bovo Corden Malinao Naraga Influency Idiomas Roberto Neil Rodrigues Barbosa Facebook social plugin " />
  <RDF:Description RDF:about="urn:scrapbook:item20130523104520#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content="" />
  <RDF:Description RDF:about="urn:scrapbook:item20130524050411#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" web2py™ administrative interface Site Edit About Errors Versioning Help Logout Debug Editing file &quot;arbani/views/generic.pdf&quot; &lt;&lt;back docs Save file: Save Saved file hash: Last saved on: {{ ## this doesn't work, pdf corrupt... try: from gluon.contrib.pyfpdf import FPDF, HTMLMixin class MyFPDF(FPDF, HTMLMixin): pass pdf=MyFPDF() #First page pdf.add_page() #pdf.write_html(str(XML(chart, sanitize=False))) #print(XML(chart, sanitize=False)) #print(XML(table, sanitize=False)) ##pdf.write_html(str(XML(table, sanitize=False))) response.headers['Content-Type']='application/pdf' response.write(pdf.output(dest='S')) except: raise ##raise HTTP(405,'no pdf') }} [It's All Text!] [It's All Text!] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 {{ ## this doesn't work, pdf corrupt... try: from gluon.contrib.pyfpdf import FPDF, HTMLMixin class MyFPDF(FPDF, HTMLMixin): pass pdf=MyFPDF() #First page pdf.add_page() #pdf.write_html(str(XML(chart, sanitize=False))) #print(XML(chart, sanitize=False)) #print(XML(table, sanitize=False)) ##pdf.write_html(str(XML(table, sanitize=False))) response.headers['Content-Type']='application/pdf' response.write(pdf.output(dest='S')) except: raise ##raise HTTP(405,'no pdf') }} restore currently saved or revert to previous version. Key bindings for ZenCoding Plugin Ctrl+SSave via Ajax Ctrl+F11Toggle Fullscreen Ctrl-F / Cmd-FStart searching Ctrl-G / Cmd-GFind Next Shift-Ctrl-G / Shift-Cmd-GFind Previous Shift-Ctrl-F / Cmd-Option-FReplace Shift-Ctrl-R / Shift-Cmd-Option-FReplace All TabExpand Abbreviation Powered by web2py™ created by Massimo Di Pierro ©2007-2013 - Admin language " />
  <RDF:Description RDF:about="urn:scrapbook:item20130524043318#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" ﻿﻿ Jeddah Saudi Arabia Accurate Prayer Times أوقات الصلاة , Qiblah, Qibla اتجاه القبلة Mosques (Masjids), Islamic Centers, Organizations and Muslim Owned Businesses, Athan Azan Adhan Salah Salat Software Sahor Sahar Imsak Iftar Starting Fast Breaking Fast Ramazan Ramzan Ramdan Ramadan 2013 worldwide. Sunrise Sunset Latitude Longitude Fajr Dhuhr Asr Maghrib Isha Muslim Prayer Times, Islamic Prayer times, Namaz Salat, 1432 Ramadan 2013, Namaz Times, Salat Prayer Timetable, Ramadan Timings, Ramadan Timetable, Namaz/Namaaz Timings worldwide, whole world, global Athan Software Athan Software Mobile Athan Mobile Athan SMS Prayer Times SMS Prayer Times Islamic Screen Savers Islamic Screen Savers Islamic Wallpapers Islamic Wallpapers USA USA Canada Canada Other Countries Other Countries Add Prayer Times to Your Site Add Prayer Times to Your Site Add Masjid or Islamic Center Add Masjid or Islamic Center MyMasjid Customization Form MyMasjid Customization Form Directory Map Directory Map Add Directory to Your Site Add Directory to Your Site Download Athan Software Download Athan Software Hajj &amp; Umrah Hajj &amp; Umrah Islamic Desktop Wallpapers Islamic Desktop Wallpapers Download Screensavers Download Screensavers The Glorious Quran The Glorious Quran Prophet's Biography Prophet's Biography Supplications Supplications Quran Broadcasting Quran Broadcasting My Masjid My Masjid Listen to Athan Listen to Athan Enhance Your Website Enhance Your Website Promote IslamicFinder Promote IslamicFinder Hijri Calendar Hijri Calendar Date Conversion Date Conversion Special Islamic Dates Special Islamic Dates Add Calendar to Your Site Add Calendar to Your Site Articles Articles FAQs About Islam FAQs About Islam The Glorious Quran The Glorious Quran Prophet's Biography Prophet's Biography Supplications Supplications How to Pray? How to Pray? Hajj &amp; Umrah Hajj &amp; Umrah Quran Broadcasting Quran Broadcasting IslamicFinder Home Prayer Times for 6 Million Cities,Towns and Villages Download Athan (Azan) Software Islamic web directory covering Islam, Quran, Hadith, Fiqh and Fatawa, Muslim Family, Education, etc. Articles List Hijri Calendar Islamic Photo Gallery عربي 24 May, 2013 Friday 14 Rajab, 1434 | Affiliate | Guest Book | FaceBook | Contact us ﻿ Jeddah, Saudi Arabia Prayer Times (State: Makkah) Prayer Schedule May / 2013 Date Day Fajr Sunrise Dhuhr Asr Maghrib Isha 23 Thu 4:17 5:41 12:20 3:36 6:59 8:29 24 Fri 4:16 5:41 12:20 3:36 6:59 8:29 25 Sat 4:16 5:41 12:21 3:35 6:59 8:29 26 Sun 4:15 5:41 12:21 3:35 7:00 8:30 27 Mon 4:15 5:40 12:21 3:35 7:00 8:30 28 Tue 4:15 5:40 12:21 3:35 7:01 8:31 29 Wed 4:14 5:40 12:21 3:36 7:01 8:31 Monthly/Annual Schedule FREE Mobile Athan having Jeddah prayer times for Cell Phone 97.610722 (From North Clockwise) Qiblah Details &amp; Qiblah Map Kabah is 39.84 miles away Qiblah direction using the sun shadow (Most Accurate Method) Latitude: 21.5169 Longitude: 39.2192 Juristic Method: Standard Calculation Method: Umm Al-Qura Click Here To Change Allah says: &quot;But there came after them an evil generation, who neglected prayers and followed sensual desires, so they will be thrown in Hell.&quot; 19/59 Receive Jeddah Prayer Times SMS on your Cell/Mobile Phone Now! Search another city: (Saudi Arabia) Download FREE Athan (Azan, Adhan) software for Jeddah, Makkah, Saudi Arabia to hear Automatic Athan on every prayer time in your Computer. Islamic Places in Jeddah, Saudi Arabia Add Here Masjids, Islamic Centers and Muslim Owned Businesses جامعة الملك عبد العزيز, Jeddah URL: www.kau.edu.sa Phone: 1268411 AL-SAIDA AMENA ZAHED MOSQUE, Jeddah, Makkah Phone: 0597291941 ELAF TRAVEL AND TOURISM, Jeddah, Jeddah URL: www.elaftours.com Phone: 9662-6690603 AL-NASER TRAVEL, TOUR &amp; UMRAH CO., Jeddah Phone: +966-507413044 Jeddah Dawah Center (JDC), Jeddah, Jeddah URL: www.jdci.org Phone: 9662-6828888 Ext 100 Bugshan Mosque, Jeddah Phone: 6633645-9662 Hajeej for Umrah &amp; Haj Services, Jeddah URL: www.hajeej.biz Phone: 966-2 6040985 Masjid Al-Raza, Jeddah Int'l. Association for New Muslims الهيئة العالمية للمسلمين الجدد, Jeddah URL: www.4newmuslims.org Phone: 966-2 6608622 Desert Store Islamic Clothing, Jeddah, Saudi Arabia URL: www.desertstore.com Phone: +9662-227-4302 More Other Cities in Saudi Arabia having Islamic Centers Email Subscription Email: Get monthly prayer times every month for Jeddah by email FREE. Neighboring Cities within: ﻿ Text Advertisements Connect with the Qur'an New video series reveals how to read Arabic in 21 days. www.FreeArabicReport.com Super Value China Tour Muslim special offer, 2013 Halal friendly tour packages. www.Muslim2China.com Easy Learning Arabic Proven Learning Techniques. For Kids &amp; Adults. Buy Now! www.ArabianSinbad.com ﻿ ﻿ Text Advertisements FREE ARABIC LESSONS New video series reveals how to read Arabic in 21 days. www.FreeArabicReport.com Super Value China Tour Muslim special offer, 2013 Halal friendly tour packages. www.Muslim2China.com Easy Learning Arabic Proven Learning Techniques. For Kids &amp; Adults. Buy Now! www.ArabianSinbad.com Text Advertisements Cheap International Calls FREE mins! NO FEES. Pinless Call Instantly. Manage Online www.MiniCalls.com Athan (Azan) Software Hear automatic Athan (Azan) five times a day in your computer. www.islamicfinder.org Athan Software for Mobile Phone Hear Automatic Athan (Azan) in your phone on Prayer Time. www.islamicfinder.org/mobile/ Monthly Prayer Times Subscription (Email): Search Islamic Web Directory: Download Athan (Azan) Software Prayer Times: Disclaimer | Contact us | Add new services to your site | Tell a friend | Help | Advertise with us | About Us | FaceBook | Download Athan (Azan) Software for iPhone / iPad / iPod touch | Android | Computers Desktop / Laptop | Mobile Phones Copyright © 2013 IslamicFinder.org. All rights reserved. Developed by Wasat Alnaseej Map: Zoom In Zoom Out " />
  <RDF:Description RDF:about="urn:scrapbook:item20130524050801#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" tazjel@gmail.com ▼ | My favorites ▼ | Profile | Sign out Logo pyfpdf Simple PDF generation for Python (FPDF PHP port) AKA fpdf.py Project Home Downloads Wiki Issues Source Search for WriteHTML simple HTML rendering for reports Featured, Phase-Support Updated May 27, 2011 by reingart Introduction PyFPDF now supports basic HTML, mainly intended to write reports from web frameworks. It understands a limited subset of the HTML language, and it doesn't support advanced features nor CSS (look below). HTMLMixin could be used along with FPDF class to implement this functionality (see the example). Sample: html.pdf Details HTML tags and attributes supported: H1 to H8: headings (align attribute) P: paragraphs (align attributes) B, I, U: bold, italic, underline FONT: (face, size, color attributes) CENTER for aling A: links (href attribute)) IMG: images (src, width, height attributes) OL/UL/LI: ordered, unordered and list items (can be nested) TABLE: (border, width attributes) THEAD: header (opens each page) TFOOT: footer (closes each page) TBODY: actual rows TR: rows (bgcolor attribute) TH: highlight cells (align, bgcolor, width attributes) TD: rows (align, bgcolor, width attribute) Note: Tables should have at least a first TH row with width attribute. Example html = &quot;&quot;&quot; &lt;H1 align=&quot;center&quot;&gt;html2fpdf&lt;/H1&gt; &lt;h2&gt;Basic usage&lt;/h2&gt; &lt;p&gt;You can now easily print text mixing different styles : &lt;B&gt;bold&lt;/B&gt;, &lt;I&gt;italic&lt;/I&gt;, &lt;U&gt;underlined&lt;/U&gt;, or &lt;B&gt;&lt;I&gt;&lt;U&gt;all at once&lt;/U&gt;&lt;/I&gt;&lt;/B&gt;!&lt;BR&gt;You can also insert links on text, such as &lt;A HREF=&quot;http://www.fpdf.org&quot;&gt;www.fpdf.org&lt;/A&gt;, or on an image: click on the logo.&lt;br&gt; &lt;center&gt; &lt;A HREF=&quot;http://www.fpdf.org&quot;&gt;&lt;img src=&quot;tutorial/logo.png&quot; width=&quot;104&quot; height=&quot;71&quot;&gt;&lt;/A&gt; &lt;/center&gt; &lt;h3&gt;Sample List&lt;/h3&gt; &lt;ul&gt;&lt;li&gt;option 1&lt;/li&gt; &lt;ol&gt;&lt;li&gt;option 2&lt;/li&gt;&lt;/ol&gt; &lt;li&gt;option 3&lt;/li&gt;&lt;/ul&gt; &lt;table border=&quot;0&quot; align=&quot;center&quot; width=&quot;50%&quot;&gt; &lt;thead&gt;&lt;tr&gt;&lt;th width=&quot;30%&quot;&gt;Header 1&lt;/th&gt;&lt;th width=&quot;70%&quot;&gt;header 2&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;cell 1&lt;/td&gt;&lt;td&gt;cell 2&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;cell 2&lt;/td&gt;&lt;td&gt;cell 3&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &quot;&quot;&quot; from pyfpdf import FPDF, HTMLMixin class MyFPDF(FPDF, HTMLMixin): pass pdf=MyFPDF() #First page pdf.add_page() pdf.write_html(html) pdf.output('html.pdf','F') See html.py or Web2Py for a complete example Comment by project member jurgis.pralgauskis, Apr 28, 2013 if you have unicode in html, you should set ttf font via &lt;font&gt; tag pdf.add_font('DejaVu?', '', 'DejaVuSans?.ttf', uni=True) pdf.write_html(&quot;&lt;font face='DejaVu'&gt;%s&lt;/font&gt;&quot; % str(XML(tags, sanitize=False))) ps.: you might need to add other variations for &lt;b&gt; &lt;i&gt; pdf.add_font('DejaVu?', 'B', 'DejaVuSans?-Bold.ttf', uni=True) pdf.add_font('DejaVu?', 'I', 'DejaVuSans?-Oblique.ttf', uni=True) pdf.add_font('DejaVu?', 'BI', 'DejaVuSans?-BoldOblique?.ttf', uni=True) more: https://code.google.com/p/pyfpdf/wiki/Unicode Hint: You can use Wiki Syntax. Enter a comment: [It's All Text!] Terms - Privacy - Project Hosting Help Powered by Google Project Hosting Projects tazjel Starred projects altdragapt-cygardesiaautokeycopyqcyg-aptdragonflygooglefontdirectoryjquery-ui-vkkey-monminttymobileterminalmsysgitmusic21puttycygswapytextroomtweetxuc-debugweb2py Find open source projects...Create a project... tazjel@gmail.comabobani@gmail.com Sign in with another account... " />
  <RDF:Description RDF:about="urn:scrapbook:item20130524050738#index"
                   NS1:folder="urn:scrapbook:root"
                   NS1:content=" tazjel@gmail.com ▼ | My favorites ▼ | Profile | Sign out Logo pyfpdf Simple PDF generation for Python (FPDF PHP port) AKA fpdf.py Project Home Downloads Wiki Issues Source Search for Unicode unicode utf-8 ttf font support (based on sFPDF) Phase-Support, Featured Updated Dec 20, 2012 by romiq...@gmail.com Introduction The FPDF class was modified adding UTF-8 support. Moreover, it embeds only the necessary parts of the fonts that are used in the document, making the file size much smaller than if the whole fonts were embedded. These features were originally developed for the mPDF project, and ported from Ian Back's sFPDF LGPL PHP version. Before you can use UTF-8, you have to install at least one Unicode font in the font directory (or system font folder). Some free font packages are available for download (extract them into font folder): DejaVu family: Sans, Sans Condensed, Serif, Serif Condensed, Sans Mono (Supports more than 200 languages) GNU FreeFont family: FreeSans, FreeSerif, FreeMono Indic (ttf-indic-fonts debian/ubuntu package) for Bengali, Devanagari, Gujarati, Gurmukhi (including the variants for Punjabi), Kannada, Malayalam, Oriya, Tamil, Telugu, Tibetan AR PL New Sung (firefly): The Open Source Chinese Font (also supports others east-asia languages) Alee (ttf-alee arch linux package): General purpose Hangul truetype fonts that Contain Korean syllable and Latin9 (iso8859-15) characters. Fonts-TLWG (formerly ThaiFonts-Scalable) These fonts are included with this library installers, see Free Font Pack for FPDF below for more information. Then, to use a Unicode font in your script, pass True as the fourth parameter of AddFont(). Example This example uses several free fonts to display some Unicode strings. Be sure to install the fonts in the font directory first. #!/usr/bin/env python # -*- coding: utf8 -*- from fpdf import FPDF pdf = FPDF() pdf.add_page() # Add a DejaVu Unicode font (uses UTF-8) # Supports more than 200 languages. For a coverage status see: # http://dejavu.svn.sourceforge.net/viewvc/dejavu/trunk/dejavu-fonts/langcover.txt pdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True) pdf.set_font('DejaVu', '', 14) text = u&quot;&quot;&quot; English: Hello World Greek: Γειά σου κόσμος Polish: Witaj świecie Portuguese: Olá mundo Russian: Здравствуй, Мир Vietnamese: Xin chào thế giới Arabic: مرحبا العالم Hebrew: שלום עולם &quot;&quot;&quot; for txt in text.split('\n'): pdf.write(8, txt) pdf.ln(8) # Add a Indic Unicode font (uses UTF-8) # Supports: Bengali, Devanagari, Gujarati, # Gurmukhi (including the variants for Punjabi) # Kannada, Malayalam, Oriya, Tamil, Telugu, Tibetan pdf.add_font('gargi', '', 'gargi.ttf', uni=True) pdf.set_font('gargi', '', 14) pdf.write(8, u'Hindi: नमस्ते दुनिया') pdf.ln(20) # Add a AR PL New Sung Unicode font (uses UTF-8) # The Open Source Chinese Font (also supports others east-asia languages) pdf.add_font('fireflysung', '', 'fireflysung.ttf', uni=True) pdf.set_font('fireflysung', '', 14) pdf.write(8, u'Chinese: 你好世界\n') pdf.write(8, u'Japanese: こんにちは世界\n') pdf.ln(10) # Add a Alee Unicode font (uses UTF-8) # General purpose Hangul truetype fonts that Contain Korean syllable # and Latin9 (iso8859-15) characters. pdf.add_font('eunjin', '', 'Eunjin.ttf', uni=True) pdf.set_font('eunjin', '', 14) pdf.write(8, u'Korean: 안녕하세요') pdf.ln(20) # Add a Fonts-TLWG (formerly ThaiFonts-Scalable) (uses UTF-8) pdf.add_font('waree', '', 'Waree.ttf', uni=True) pdf.set_font('waree', '', 14) pdf.write(8, u'Thai: สวัสดีชาวโลก') pdf.ln(20) # Select a standard font (uses windows-1252) pdf.set_font('Arial', '', 14) pdf.ln(10) pdf.write(5, 'This is standard built-in font') pdf.output(&quot;unicode.pdf&quot;, 'F') View the result here: unicode.pdf Metric Files FPDF will try to automatically generate metrics (i.e. character widths) about TTF font files to speed up their processing. Such metrics are stored using the Python Pickle format (.pkl extension), by default in the font directory (ensure Read/Write permission!). TTF metric files often weight about 650K, so keep that in mind if you use many TTF fonts and have disk size or memory limitations. By design, metric files are not imported as they could cause a temporary memory leak if not managed properly (this could be an issue in a webserver environment with many processes/threads, so the current implementation discards metrics when FPDF objects are disposed). In most circumstances, you will not notice any difference about storing metric files vs. generating them in each run on-the-fly (according basic tests, elapsed time is equivalent, YMMV) Like the original php implementation, this library should work even if it could not store the metric file, and as no source code file is generated at runtime, it should work in restricted environments. Free Font Pack and Copyright Restrictions For your convenience, this library collected 96 TTF files in an optional &quot;Free Unicode TrueType Font Pack for FPDF&quot;, with useful fonts commonly distributed with GNU/Linux operating systems (see above for a complete description). This pack is included in the windows installers, or can be downloaded separately (for any operating system). You could use any TTF font file as long embedding usage is allowed in the licence. If not, a runtime exception will be raised saying: &quot;ERROR - Font file filename.ttf cannot be embedded due to copyright restrictions.&quot; Comment by project member jurgis.pralgauskis, Apr 28, 2013 if You use write_html( ..some unicode content.. ) https://code.google.com/p/pyfpdf/wiki/WriteHTML you should set font via &lt;font&gt; tag pdf.write_html(u&quot;&lt;H1&gt;&lt;font face='DejaVu' size='20'&gt;Ąžuolas&lt;/font&gt;&lt;H2&gt;&quot;) Hint: You can use Wiki Syntax. Enter a comment: [It's All Text!] Terms - Privacy - Project Hosting Help Powered by Google Project Hosting Projects tazjel Starred projects altdragapt-cygardesiaautokeycopyqcyg-aptdragonflygooglefontdirectoryjquery-ui-vkkey-monminttymobileterminalmsysgitmusic21puttycygswapytextroomtweetxuc-debugweb2py Find open source projects...Create a project... tazjel@gmail.comabobani@gmail.com Sign in with another account... " />
</RDF:RDF>
