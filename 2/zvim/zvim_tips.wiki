# vim tips



#Search 
map <F7> :%s//gc<Left><Left><Left>
# substitute 
#
:map <S-F7> :%s/<C-r><C-w>//gc<Left><Left><Left>

# visual substitute 

If you want to look or substitute (for) an arbitrary pattern (which already exists at least once in your text), the following 2 mappings do it for you.

The advantage is that you don't have to type again or cut and paste the appropriate text but only have to visually select it.

a) Searching:

:vmap / y:execute "/".escape(@",'[]/\.*')<CR>
This immediately finds to the next occurrence of the previously visually selected text.

b) Substituting:

:vmap <F4> y:execute "%s/".escape(@",'[]/')."//gc"<Left><Left><Left><Left>
Again, as in the mapping in chapter 2), you just have to complete it by entering

-> mynewpattern<CR>
Explanation/Discussion:

What both Substituting and Searching in this way generally does is:

Yank the selected text.

Inserting the visually selected via addressing the '"' register with '@"' as a parameter of the escape() function going finally into the 'myoldpattern' part. The tricky problem is, if you have characters in your myoldpattern, which are regular expression chars, they are recognized and treated accordingly. That is most likely not what you wanted. To escape them, these chars have to be declared by the second parameter of the excape() function, which then escapes them with a backslash. The few characters above work for me. If you run into problems, you should check for additional regexp chars in your text, and try to escape them by adding them to the escape() function parameter.

# EDITOR 
map W :w<cr>

# vim tips
alias prs='ps faux|grep -v grep|grep "$@"'
# vim tips
alias prs='ps faux|grep -v grep|grep "$@"'

#Some basic clipboard commands:

"+2yy – copy two lines to X11 clipboard
"+dd – cut line to X11 clipboard
"+p – paste X11 clipboard
#paste the word under the cursor into the command line,
Type <C-r><C-w> to paste the word under the cursor into the command line, or <C-r><C-a> to paste the WORD.

Number all the lines in a file (insert line number followed by a tab):
:%s/^/\=line('.')."\t"/
Number a range of lines (from line 10 to line 20):
:10,20s/^/\=line('.')."\t"/
Number a range of lines sequentially starting from 1:
:let counter=0|10,20g//let counter=counter+1|s/^/\=counter."\t"
Number all the paragraphs in range starting from 1 (assuming the paragraphs are separated by one or more blank lines):
:let counter=0|1,20g/^$\n^\s*[^\s]/let counter=counter+1|+1s/^/\=counter."\t"
Note: The above command does not work for the first paragraph in the file if there is no blank line above it.
