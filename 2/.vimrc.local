"DCAR colorscheme
"key = ['borland']
colorscheme random
set t_Co=256
set spelllang=en
"
"
"Enable CursorLine
    "    set cursorline
    "Default Colors for CursorLine
    "    highlight  CursorLine ctermbg=Black ctermfg=None

    "Change Color when entering Insert Mode
    "    autocmd InsertEnter * highlight  CursorLine ctermbg=Green ctermfg=Red

    "Revert Color to default when leaving Insert Mode
    "    autocmd InsertLeave * highlight  CursorLine ctermbg=Yellow ctermfg=None

    "This creates a keyword ERROR and puts it in the highlight group called logError
    "    syn keyword logError ERROR
    "Link just links logError to the colouring for error
    "    hi link logError Error

    "    hi def logTime guibg=green guifg=white
set background=dark
let g:solarized_termcolors=256
"let g:Powerline_symbols = 'fancy'
"
"
 "used for visual selections.

" Tabs and indents.
set autoindent smartindent                      " auto indent
set expandtab smarttab                          " tab
set tabstop=4 shiftwidth=4

set noswapfile nobackup nowritebackup autoread  " no backups and auto-read

set showmatch matchtime=3 matchpairs+=<:>       " parenthesis matching
set timeout timeoutlen=5000 ttimeoutlen=100
set history=1000
set shortmess=aTI                               " no greeting message





set splitbelow splitright                       " splitting direction
"
" Use clipboard register
if has('unnamedplus')
  set clipboard& clipboard+=unnamedplus
else
  set clipboard& clipboard+=unnamed
endif


"set mouse=a
" set folding
    setlocal foldmethod=expr
    setlocal foldexpr=(getline(v:lnum)=~'^$')?-1:((indent(v:lnum)<indent(v:lnum+1))?('>'.indent(v:lnum+1)):indent(v:lnum))

    set foldtext=getline(v:foldstart)
    set fillchars=fold:\ "(there's a space after that \)
    highlight Folded ctermfg=DarkGreen ctermbg=Black
    nnoremap <silent> ; :q!<CR>
    map W :w!<CR>
    "
    "
"Fold; {Conflict Analysis & Resolution }

    nnoremap <space> za
    vnoremap <space> zf
"<F11>
    "  <F[1-12]>
        " <F1>
            map <F1> \c<space>
            map <S-F1> :reg
        " <F2>
            nnoremap <F2> :reg
            nnoremap <S-F2> :marks
        " <F3>
            " Fold
                map <F3> :ls<CR>:sb
        " <F4>
            "UndotreeToggle
            nnoremap <F4> :verbos map
            nnoremap <S-F4> :let @*=colors_name<CR>
        " <F5>

            nnoremap <silent> <F5> :source ~/zdotfiles/2/.vimrc.local<CR>
            nnoremap <silent> <S-F5> :vsplit ~/zdotfiles/2/.vimrc.local<CR>
            nnoremap <silent> <C-S-F5> :vsplit ~/zdotfiles/2/vimrc.txt<CR>

            nnoremap <C-F5> :vsplit ~/zdotfiles/1/.zsh/al.zsh<CR>
            "
        " <F7>
                    vnoremap <f7> :s/xxx/\$\{1\:#\}/g
        "colorscheme random



            abbreviate CAR Conflict Analysis & Resolution
                "nnoremap <silent> <F6> :vsplit ~/zdotfiles/5/DCAR.snippets<CR>
                "nnoremap <silent> <S-F6> :vsplit ~/zdotfiles/5/Process/DCAR-key-words.txt<CR>
                "nnoremap <silent> <C-F6> :vsplit ~/zdotfiles/5/Process/phrase-bank.snippets<CR>
                "
                ".w! >> ~/Dropbox/DCAR/zconflict   line.snip  vsplit line.snip

                "nnoremap 11 :.w! >> ~/Dropbox/11_CAR.snip<CR>
                "nnoremap t11 :vsplit ~/Dropbox/11_CAR.snip<CR>
                "
                vnoremap <F6> :w! >> ~/Dropbox/11_CAR.snip<CR>
                nnoremap <silent> <C-F6> :vsplit ~/Dropbox/11_CAR.snip<CR>
                "g/^$/;/^$/-1!sort
        " <F8>
            map <f8> :diffthis<cr><esc><c-w><c-w>:diffthis<cr>
            map <f8><f8> :diffoff<cr>
            set diffopt=filler,context:4,iwhite	" options for using diff mode

        " <F9>
            nnoremap <silent> <F9> :SessionList<CR>
            nnoremap <silent> <S-F9> :SessionSave<CR>
            nnoremap <M-F9> :sessionopen
            nnoremap <C-F9> :SessionSaveAs
        " <F10>
""""""""""""""            "

                vnoremap <F10> :w! >> ~/Dropbox/car_10
                nnoremap <silent> <C-F10> :vsplit ~/Dropbox/car_10<CR>


                    "vsp ~/Dropbox/car_5
                    "'<,'>w! >> ~/Dropbox/car_5
""""""""""""""""""""""""""""""""""""""

function! RangeChooser()
    let temp = tempname()
    " The option "--choosefiles" was added in ranger 1.5.1. Use the next line
    " with ranger 1.4.2 through 1.5.0 instead.
    "exec 'silent !ranger --choosefile=' . shellescape(temp)
    exec 'silent !ranger --choosefiles=' . shellescape(temp)
    if !filereadable(temp)
        " Nothing to read.
        return
    endif
    let names = readfile(temp)
    if empty(names)
        " Nothing to open.
        return
    endif
    " Edit the first item.
    exec 'edit ' . fnameescape(names[0])
    " Add any remaning items to the arg list/buffer list.
    for name in names[1:]
        exec 'argadd ' . fnameescape(name)
    endfor
endfunction
command! -bar RangerChooser call RangeChooser()
nnoremap <leader>r :<C-U>RangerChooser<CR>

            "nnoremap <silent> <F10> :%s/\(.*\)\(conflict\)\(.*\)/\1\2\31/gc
        " <F11>
            """""""""""""""""""""""""""""""""""""""""
        " <F12>
    cabbrev wss %s/\s\+$//gc
    cabbrev ws_ s/\s/_/gc

        nnoremap <silent> w1 :vsplit ~/zdotfiles/1/.zsh/al.zsh<cr>
            "nnoremap <silent> ww :vsplit ~/zdotfiles/2/.vimrc.localw<cr>
            nnoremap <silent> w2 :vsplit ~/zdotfiles/2/.vimrc.localw<cr>

        "imap ,,, <esc>bdwa<<esc>pa><cr></<esc>pa><esc>ka
        cab w!! w !sudo tee "%"
        map ws :!rm ~/.vimswap/*<cr>
        "install unhtml
        "map wh :!rm ~/tst/vhtml<cr>:r!unhtml % > ~/tst/vhtml<cr><esc>:vsplit ~/tst/vhtml<cr>
    " The W culture "




                ca w!! w !sudo tee "%"
                    map ws :!rm ~/.vimswap/*<cr>


                    "vnoremap 1 :w! >> ~/Dropbox/C/Foundation/snippets/dcar.txt<CR>

                nnoremap <silent> ; :q!<CR>
            "nnoremap ,1 y:vsplit ~/Dropbox/C/Foundation/snippets/dcar.txt<CR>i<CR>iiiiii<C-R>"p<Esc>p

            cabbrev fdf ~/Dropbox/C/Foundation/

                "$\{1\:#\}/gc
                "w! ~/zdotfiles/s/2/english/english.snippet
                    "%s/X/\$\{1\:#\}/gc
                    "%s/X/\$\{2\:#\}/gc
            "%s/Y/\$\{2\:#\}/gc
            "%s/Z/\$\{3\:#\}/gc

            "cabbrev ws %s:^:snippet$\{0\:#\}:gc
            cabbrev wW r!echo""<left>

            cabbrev ws %s:^\(.*\):snippet\t\1\/\n\t\1:gc

"%s:^\(.*\)\.\(.*\):snippet   \1\2\r   \0:g

        cabbrev wsh !bash %

        cab zz e ~/zdotfiles/1/.zsh
        cab vv w! ~/zdotfiles/2/
        cab wx :!chmod u+x<CR>
cab wex !sh %<CR>
            cab abo vsplit ~/Dropbox/abobanirc

    " [QA-Stack]
    cab qmd vsplit ~/zdotfiles/9/web2py/applications/qastack/models/db.py
    cab qcd vsplit ~/zdotfiles/9/web2py/applications/qastack/controllers/default.py<CR>
    cab qvd vsplit ~/zdotfiles/9/web2py/applications/qastack/views/default/index.html<CR>
    cabbrev W !echo""<left>

"maped to the [1-10]
        cab w88 w! ~/zdotfiles/8/
        cab w77 w! ~/zdotfiles/7/
        cab w66 w! ~/zdotfiles/6/
        cab w55 w! ~/zdotfiles/5/
        cab w44 w! ~/zdotfiles/4/
        cab w33 w! ~/zdotfiles/3/
        cab w22 w! ~/zdotfiles/2/
        cab w11 w! ~/zdotfiles/1/
    cab w00 w! ~/zdotfiles/0/

    cab wdr w! ~/Dropbox/C/Foundation/

    "Install unhtml
    "map wh :!rm ~/tst/vhtml<CR>:r!unhtml % > ~/tst/vhtml<CR><Esc>:vsplit ~/tst/vhtml<CR>

    "html substitute
        "!sed 's/<[^>]*>//g' %

" Split the Line at Cursor
    nnoremap K i<cr><esc><right>


    "Enter
            nnoremap <C-Up> m`o<Esc>``
            nnoremap <C-Down> m`O<Esc>``
    nnoremap xw :%s/<[^>]*>//gi<cr><CR>
    "!sed 's/<[^>]*>//g' %

    set history=9000
    " show the cursor position all the time
iabbrev $$ ${0: <F2>}<left><left>

    abbr #b #!/bin/bash
    abbr #p #!/usr/bin/env python
    " Select all.
    map <c-a> ggVG

    " Undo in insert mode.
    imap <c-z> <c-o>u
    map <F11> y<C-W>n<C-W>Lp:w ~/Dropbox/1/



" wget www.gutenberg.org/dirs/etext02/mthes10.zip
"
" Download the thesaurus
" unzip
" Add this to vimrc

"1 set thesaurus+=/home/ahmed/mthesaur.txt
"2 set dictionary+=/home/ahmed/Dropbox/Sylubus.txt


set thesaurus+=/home/ahmed/mthesaur.txt
set dictionary+=/home/ahmed/Dropbox/Sylubus.txt

function! SilentFileGrep( leader, file )
    try
        exe 'vimgrep /^s*' . a:leader . '.*/j ' . a:file
    catch /.*/
        echo "no matches"
    endtry
endfunction

        "let path+=/home/ahmed/Dropbox/10th_Dim

function! LineCompleteFromFile(findstart,base)
    if a:findstart
        " column to begin searching from (first non-whitespace column):
        return match(getline("."),'S')
    else
        " grep the file and build list of results:
        let path= /home/ahmed/
        call SilentFileGrep( a:base, path )
        let matches = []
        for thismatch in getqflist()
            " trim leading whitespace
            call add(matches, matchstr(thismatch.text,'S.*'))
        endfor
        call setqflist([])
        return matches
    endif
endfunction

set completefunc=LineCompleteFromFile

"sorting with external sort
    ":%!sort -u       : use an external program to filter content
    ":'a,'b!sort -u   : use an external program to filter content
    "!1} sort -u      : sorts paragraph (note normal mode!!)
    ":g/^$/;/^$/-1!sort : Sort each block (note the crucial ;)
    "" Sorting with internal Sorting
    ":sort /.*\%2v/   : sort all lines on second column [N]"


" reading Ms-Word documents, requires antiword (not docx)
"autocmd BufReadPre *.doc set ro
"autocmd BufReadPre *.doc set hlsearch!
"autocmd BufReadPre *.txt set syntax=python
"autocmd BufReadPost *.txt set syntax=python
"autocmd FileType *.txt exec('set fileformats=unix')
"autocmd FileType *.txt exec('set syntax= text')
"""""
au Syntax txt  runtime! syntax/txt.vim

"""""""
imap <C-s> <C-o>:w<CR>
map <C-s> :w<CR>


"""""""""""""""""""""""""""

func! PL(str) " Print string into the current buffer
  exe "normal o" . a:str
endf

func! NL()
    exe "normal o"
endf

    " Print string into the current buffer
func! Print(str)
    exe "normal i" . a:str
endf

func! P(str) " Print string into the current buffer
    call Print(a:str)
endf

func! SelectAll() " Select all of current buffer
    exe "normal ggVG"
endf

func! SA() " Select all of current buffer
    call SelectAll()
endf

func! SelectLine() " Select current line
    exe "normal V"
endf

func! SL() " Select current line
    call SelectLine()
endf

func! Copy() " Copy current selection to clipboard
    exe 'normal "+y'
endf

func! CP() " Copy current selection to clipboard
    call Copy()
endf

func! CopyAll() " Copy current buffer contents to clipboard
    call SelectAll()
    call Copy()
endf

func! CPA() " Copy current buffer contents to clipboard
    call CopyAll()
endf

func! CopyLine() " Copy a single line
    call SelectLine()
    call Copy()
endf

func! CPL() " Copy a single line
    call CopyLine()
endf

func! Cut() " Cut current buffer contents to clipboard
    call CopyAll()
    %d
endf

func! S2C(str) " Put string on clipboard
    %d
    call P(a:str)
    call Cut()
endf
""""""""""
"
"
""""

function! SaveLine()
   call CPL()
   exe ':!echo '.@0.' >> ~/word.txt'
endfunction

"map ,l :call SaveLine()
""""""
function! SaveWord()
   normal yiw
   exe ':!echo '.@0.' >> ~/word.txt'
endfunction
"map ,p :call SaveWord()

" function to delete duplicate lines
function! Del_dupl()
 if getline(".") == getline(line(".") - 1)
   norm dd
 endif
endfunction

":g/^/ call Del()

""""""""""
map ,l :call LoadTemplate()

    "silent! 0r ~/.vim/skel/tmpl.%:e
"map ,w
" TEMPLATES
function! LoadTemplate()
    " load a template based on the file extension
    silent! .r ~/.vim/skel/tmpl.%:e

    " Replace some placeholders
    "%s/FILENAME%/\=expand("%:t")/g
    "%s/%DATE%/\=strftime("%b %d, %Y")/g
    %s/%DATE%/\=strftime("%b %d, %Y")/g

    " This last one deletes the placeholder
    " %START% then leaves the cursor there.
    "%s/%START%//g
endfunction

autocmd! BufNewFile * call LoadTemplate()
"
autocmd BufEnter * if &filetype == "" | setlocal ft=txt | endif
autocmd BufEnter * if &filetype == "txt" | setlocal ft=txt | endif

map ص C

    "%s/\(Miall\|Cheldelin\|Cloke\|Ramsbotham\|McDonald\|Tidwell\|Pruitt\|Miall\|Hugh\|Oliver\|Ramsbotham\|and\|Tom\|Woodhouse\|Lederach\|John\|Paul\|Cheldelin\|Druckman\|and\|Fast\|eds\|Pruitt\|Dean\|and\|Kim\|Sung\|Hee\|Cloke\|Kenneth\|McDonald\|John\|and\|Louise\|Diamond\|Tidwell\|Alan\|C.\|Burton\|John\|Cheryl\|Duckworth\|Ph.D.Cheldelin\)/__AA\1/g

function! AA()
    :g/\(Miall\|Cheldelin\|Cloke\|Ramsbotham\|McDonald\|Tidwell\|Pruitt\|Miall\|Hugh\|Oliver\|Ramsbotham\|and\|Tom\|Woodhouse\|Lederach\|John\|Paul\|Cheldelin\|Druckman\|and\|Fast\|eds\|Pruitt\|Dean\|and\|Kim\|Sung\|Hee\|Cloke\|Kenneth\|McDonald\|John\|and\|Louise\|Diamond\|Tidwell\|Alan\|C.\|Burton\|John\|Cheryl\|Duckworth\|Ph.D.Cheldelin\)/
endfunction


 "%s/\(Miall\|Cheldelin\|Cloke\|Ramsbotham\|McDonald\|Tidwell\|Pruitt\|Miall\|Hugh\|Oliver\|Ramsbotham\|and\|Tom\|Woodhouse\|Lederach\|John\|Paul\|Cheldelin\|Druckman\|and\|Fast\|eds\|Pruitt\|Dean\|and\|Kim\|Sung\|Hee\|Cloke\|Kenneth\|McDonald\|John\|and\|Louise\|Diamond\|Tidwell\|Alan\|C.\|Burton\|John\|Cheryl\|Duckworth\|Ph.D.Cheldelin\)/\r\r\1\r/g
noremap <CR> :

" nice bash-like filename auto-complete
set wildmode=longest,list,full
set wildmenu

nnoremap gl :set operatorfunc=GoogleOperator<cr>g@
vnoremap gl :<c-u>call GoogleOperator(visualmode())<cr>

function! GoogleOperator(type)
  let saved_register = @@
endfunction

map <Leader>w <c-w>v<c-w>l
map <Leader>sh <c-w>s<c-w>j
nmap ,, :e.<CR>
nnoremap <leader>z zMzvzz


