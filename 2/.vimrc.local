"Modeline and Notes {

" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"
"   _____       _______        ___ __
"  |_   _| ___/|\___  /   (_) / _ |||       __   __(_)_ __ ___
"    | |  / _ ||   / /    | || (_)|||    ___\ \ / /| | '_ ` _ \
"    | | | (_) | _/ /__  _| || \_  ||__ |___|\ V / | | | | | | |
"    |_|  \.__/\|_____/ |___| \__| |___|      \_/  |_|_| |_| |_|
"
"
"   This is the personal .vimrc file of Ahmed Alghamdi.

"   While much of it is beneficial for general use, I would
"   recommend picking out the parts you want and understand.
"
"   This is a mirror of :http://spf13.com
" }
"{"
"""""""""""""""""""""""""""""""""""""""""""""""""
" set
"""""""""""""""""""""""""""""""""""""""""""""""""

set t_vb=
set novisualbell
set mousehide
set grepprg=ack-grep
set modifiable
set autoread
set wildmenu
set history=500
set t_Co=256
set nocompatible
set encoding=utf-8
set fileencoding=utf-8
set foldmethod=manual
set clipboard+=unnamed
set modifiable
set showmatch
set noro
set shell=/bin/zsh
set showcmd
set background=dark
set showfulltag
set splitright
set showtabline=2 " always show tab bar
set timeoutlen=250        " Time to wait after ESC (default causes an annoying delay)
set hidden
"set syntax=vim<CR>
set termencoding=utf-8  " force terminal encoding
"colorscheme solarized
"colorscheme peak
"colorscheme pf_earth
"colorscheme koehler
"colorscheme peaksea
" colorscheme mayansmoke
"colorscheme molokai"{
"colorscheme peaksea
colorscheme xoria256
""""""""""""""""""""""""""""
"{"F1"}
""""""""""""""""""""""""""""
map <F1> ,c<space>
map <S-F1> ,c<space>

"}
"{<F2>
nnoremap <F2> :reg<CR>
nnoremap <S-F2> :marks<CR>
"nmap <F2> 0v)<CR>%zf
"vnoremap <silent> WW Y<C-W><C-W>Gp'[v'],c<Space><C-W><C-W>
"vnoremap <silent> WW Y<C-W><C-W>Gp<C-W><C-W>
nnoremap <C-n> <C-W>n<C-W>L
map Y y$

let g:vimsyn_noerror= 1

map <C-c> "+y<CR>

"a - z the named registers
"" the unnamed register, containing the text of the last delete or yank
"% the current file name
"# the alternate file name
"* the clipboard contents (X11: primary selection)
"+ the clipboard contents
"/ the last search pattern
": the last command-line
". the last inserted text
"- the last small (less than a line) delete
"=5*5 insert 25 into text (mini-calculator)
"See :help i_CTRL-R


"}
"{"                   ""F3
                    """"""""""""""""""""""""

map <F3> :ls<CR>:sb
map <s-F3> [c
"map <S-Right> dp
"map <S-Left> do
"}
"{F4
""""""""""""""""""""""""""""""""""""""
nnoremap <F4> :verbose map
":help q: for more interesting bits for going back and forth.


":ju(mps)         : list of your movements ":help jump-motions
":history         : list of all your commands
":his c           : commandline history
":his s           : search history
"q/               : Search history Window (puts you in full edit mode) (exit CTRL-C)
"q:               : commandline history Window (puts you in full edit mode) (exit CTRL-C)
":<C-F>           : history Window (exit CTRL-C)

"" Markers & moving about
"'.               : jump to last modification line (SUPER)
"`.               : jump to exact spot in last modification line
"g ;               : cycle thru recent changes (oldest first)
"g,               : reverse direction
":changes
":ju(mps)         : list of your movements
":help jump-motions}
""{"""""""""""""""""""F5"


"nnoremap <silent> <F5> :vsplit ~/zdotfiles/2/.vimrc.local<CR>
"nnoremap <S-F5> :source ~/zdotfiles/2/.vimrc.local<CR>
nnoremap <silent> w0  :vsplit ~/zdotfiles/0/capture.sh<CR>
nnoremap <silent> <F5> :vsplit ~/zdotfiles/2/.vimrc.local<CR>
nnoremap <S-F5> :source ~/zdotfiles/2/.vimrc.local<CR>
"nnoremap <silent> w0 :vsplit ~/zdotfiles/0/apt_install_packages.sh<CR>
"nnoremap wba :!vim ftp://tazjel@baniop.com/public_html/<CR>
"nnoremap <silent> w0 :vsplit ~/Dropbox/A/.vimrc.local<CR>

"F5 - view list of tabs
"map <F5> <Esc>:buffers<cr>
"map <F5> <esc>:buffers<cr>
"map <F5> <esc><esc>:buffers<cr>
"}
               """""""""""""""""""<F6>
"function ToggleFold()
      "if foldlevel('.') == 0
         "" No fold exists at the current line,
         "" so create a fold based on braces
         "let x = line('.')    " the current line number
         "normal 0
         "call search("{")
         "normal %
         "let y = line('.')    " the current line number
         "" Create the fold from x to y
         "execute x . "," . y . " fold"
      "else
         "" Delete the fold on the current line
         "normal zd
      "endif
   "endfunction

"nmap <space> :call ToggleFold()<CR>
   

""{""F7

vnoremap <F7> :s/XXX/\$\{1\:#\}/g

"map <F7> :%s//gc<Left><Left><Left>



vmap <space> zf

   "function ToggleFold()
      "if foldlevel('.') == 0
         "" No fold exists at the current line,
         "" so create a fold based on indentation

         "let l_min = line('.')   " the current line number
         "let l_max = line('$')   " the last line number
         "let i_min = indent('.') " the indentation of the current line
         "let l = l_min + 1

         "" Search downward for the last line whose indentation > i_min
         "while l <= l_max
            "" if this line is not blank ...
            "if strlen(getline(l)) > 0 && getline(l) !~ '^\s*$'
               "if indent(l) <= i_min
                  "" we've gone too far
                  "let l = l - 1    " backtrack one line
                  "break
               "endif
            "endif
            "let l = l + 1
         "endwhile

         "" Clamp l to the last line
         "if l > l_max
            "let l = l_max
         "endif

         "" Backtrack to the last non-blank line
         "while l > l_min
            "if strlen(getline(l)) > 0 && getline(l) !~ '^\s*$'
               "break
            "endif
            "let l = l - 1
         "endwhile

         ""execute "normal i" . l_min . "," . l . " fold"   " print debug info

         "if l > l_min
            "" Create the fold from l_min to l
            "execute l_min . "," . l . " fold"
         "endif
      "else
         "" Delete the fold on the current line
         "normal zd
      "endif
   "endfunction

"nmap <space> :call ToggleFold()<CR>"{
"}

" F7 - go to next tab
"map <F7> :tabn<cr>
"vmap <F7> <esc>:tabn<cr>i
"imap <F7> <esc>:tabn<cr>i

"}
"{""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" "F8
"map <F8> :diffthis<CR>
map <F8> :diffthis<CR><ESC><C-W><C-W>:diffthis<CR>

map <F8><F8> :diffoff<CR>
map <C-Left> :diffput<CR>
map <C-Right> :diffopt<CR>


"map <silent> <F8>   :Explore<CR>
map <silent> <S-F8> :vsp +Explore<CR>

"-: The most useful: Change to upper directory (cd ..)
"mf: Mark a file
"D: Delete marked files or the file the cursor is on, if nothing ismarked.
"R: Rename the file the cursor is on.
"d: Create a new directory in the current directory
"%: Create a new file in the current directory



"}
"{F9"
    " SessionOpen:
"nnoremap <silent> <F9> :Session
"nnoremap <silent> <S-F9> :SessionList<CR>
"nnoremap <M-F9> :SessionOpen
"nnoremap <C-F9> :SessionSaveAs
map <F9> :bn<cr>

"
    " SessionOpen:
"nnoremap <silent> <F9> :Session
"nnoremap <silent> <S-F9> :SessionList<CR>
"nnoremap <M-F9> :SessionOpen
"nnoremap <C-F9> :SessionSaveAs
"}"""""""""""""""""""""""""""""""""""""""""""""
""{F10""""""""""""""""""""""""""""""""""""""""""""
map <F10> :bp<cr>

"map <F10> :tabclose<cr>
"vmap <F10> <esc>:tabclose<cr>
"imap <F10> <esc>:tabclose<cr>
"}
"{F11

" "F11 - create new tab
"map <C-F11> :tabnew<cr>
"vmap <C-F11> <esc>:tabnew<cr>
"imap <C-F11> <esc>:tabnew<cr>
""""""""""""""""""""""""""""""""""""""""""""""
"}
"{F12
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""''
"}
"""""""""""""""""""""""""""""""""""""""""""""

" For linux
let g:clipbrdDefaultReg = '+'

nnoremap <silent> w1 :vsplit ~/zdotfiles/1/.zsh/al.zsh<CR>
"nnoremap <silent> ww :vsplit ~/zdotfiles/2/.vimrc.localw<CR>
nnoremap <silent> w2 :vsplit ~/zdotfiles/2/.vimrc.localw<CR>
imap ,,, <esc>bdwa<<esc>pa><cr></<esc>pa><esc>kA
cab w!! w !sudo tee "%"
map ws :!rm ~/.vimswap/*<CR>

"Install unhtml
map wh :!rm ~/tst/vhtml<CR>:r!unhtml % > ~/tst/vhtml<CR><Esc>:vsplit ~/tst/vhtml<CR>

map wy :set filetype=bash<CR>

""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""
"{F13

"{The w culture "
nnoremap <silent> W :w<CR>

ca w!! w !sudo tee "%"
map ws :!rm ~/.vimswap/*<CR>

"{The 10th  culture "

vnoremap 1 :w! >> ~/Dropbox/C/Foundation/snippets/dcar.txt<CR>
"}

nnoremap <silent> ; :q!<CR>
"nnoremap ,1 y:vsplit ~/Dropbox/C/Foundation/snippets/dcar.txt<CR>i<CR>iiiiii<C-R>"p<Esc>p


"}
" {The Z culture
"cab

cabbrev fdf ~/Dropbox/C/Foundation/


"$\{1\:#\}/gc
"w! ~/zdotfiles/2/english/english.snippet
"%s/X/\$\{1\:#\}/gc
"%s/X/\$\{2\:#\}/gc
"%s/Y/\$\{2\:#\}/gc
"%s/Z/\$\{3\:#\}/gc

cabbrev ws %s:^:snippet$\{0\:#\}:gc
cabbrev wW r!echo""<left>
cabbrev we !bash %
cabbrev we !bash %


cab zz w! ~/zdotfiles/1/.zsh
cab vv w! ~/zdotfiles/2/
cab wx :!chmod u+x<CR>
cab wex !sh %<CR>
cab abo vsplit ~/Dropbox/abobanirc
"}
"{cab maped for [qastack] "
cab qmd vsplit ~/zdotfiles/9/web2py/applications/qastack/models/db.py
cab qcd vsplit ~/zdotfiles/9/web2py/applications/qastack/controllers/default.py<CR> 
cab qvd vsplit ~/zdotfiles/9/web2py/applications/qastack/views/default/index.html<CR>
cab qvd vsplit ~/zdotfiles/9/web2py/applications/qastack/views/default/index.html<CR>

"{cab maped to the [1-10] "
cab w77 w! ~/zdotfiles/7/
cab w66 w! ~/zdotfiles/6/
cab w55 w! ~/zdotfiles/6/
cab w44 w! ~/zdotfiles/5/
cab w33 w! ~/zdotfiles/4/
cab w22 w! ~/zdotfiles/2/
cab w11 w! ~/zdotfiles/1/
cab w00 w! ~/zdotfiles/0/
cab wdr w! ~/Dropbox/C/Foundation/
"}
"Install unhtml
map wh :!rm ~/tst/vhtml<CR>:r!unhtml % > ~/tst/vhtml<CR><Esc>:vsplit ~/tst/vhtml<CR>

"}
"html substitute
"!sed 's/<[^>]*>//g' %

" Split the Line at Cursor
nnoremap Ki<cr><esc><right>

                    "w
"""""""""""""""""""""""""""""""""""""""""""""
    "Enter
nnoremap <C-J> m`o<Esc>``
nnoremap <C-K> m`O<Esc>``

"nnoremap <S-Enter> O<Esc>j

""""""""""""""""""""""""""""""""""""""""""""""

fun! RangerChooser()"{
    exec "silent !ranger --choosefile=/tmp/chosenfile " . expand("%:p:h")
    if filereadable('/tmp/chosenfile')
        exec 'edit ' . system('cat /tmp/chosenfile')
        call system('rm /tmp/chosenfile')
    endif
    redraw!
endfun
map ,r :call RangerChooser()<CR>
"}
fun! FindFiles()"{
    let $filename = input("Enter file name to find: ")
    let $error_file = $HOME."/.findfile.output"
    silent! exe "!find . -iname \"".$filename."\" \| xargs file \| perl -pe 's/:/:1:/' > ".$error_file
    cfile $error_file
    copen
    redraw!
endfun"}
 "Change the following paths to your lynx files:"{
"let s:lynxPath = '/etc/lynx-cur'
"let s:lynxExe = s:lynxPath . 'lynx'
"let s:lynxCfg = '-cfg=' . s:lynxPath . 'lynx.cfg'
"let s:lynxLss = '-lss=' . s:lynxPath . 'lynx.lss'
"let s:lynxCmd = s:lynxExe . ' ' . s:lynxCfg . ' ' . s:lynxLss
"let s:lynxDumpPath = '~/Documents/lynx/dump/'
"let s:lynxToolsPath = '~/Documents/lynx/tools/'"}

" Usage: {{{2
" <leader>wb :WebBrowser (Open a new web browser tab with the address specified)
" <leader>wc :exe 'WebBrowser "' . @* . '"'<cr> (Open a new web browser tab with the address in the clipboard)
"(Do a google search using the specified search keywords and open the results in a new tab)
"map <leader>wg :exe 'WebBrowser www.google.com/search?q="' . input("Google ") . '"'<cr>
" <leader>wp :exe 'WebBrowser www.wikipedia.com/wiki/"' . input("Wikipedia ") . '"'<cr> (Do a wikipedia search using the specified search keywords and open the results in a new tab)
" <leader>wd :WebDump (Downloads the specified webpage without opening it in vim)
" <space>l (Open link)
" <space>h (Previous page ("back button"))
" <space>j (Highlight links and go to next link)
" <space>k (Highlight links and go to previous link)

 "{Multiple Files Management (Essential)
":bn              : goto next buffer
":bp              : goto previous buffer
":wn              : save file and move to next (super)
":wp              : save file and move to previous
":bd              : remove file from buffer list (super)
":bun             : Buffer unload (remove window but not from list)
":badd file.c     : file from buffer list
":b3              : go to buffer 3 [C]
":b main          : go to buffer with main in name eg main.c (ultra)
":sav! %<.bak     : Save Current file to alternative extension (old way)
":sav! %:r.cfm    : Save Current file to alternative extension
":sav %:s/fred/joe/           : do a substitute on file name
":sav %:s/fred/joe/:r.bak2    : do a substitute on file name & ext.
":!mv % %:r.bak   : rename current file (DOS use Rename or DEL)
":help filename-modifiers
":e!              : return to unmodified file
":w c:/aaa/%      : save file elsewhere
":e #             : edit alternative file (also cntrl-^)
":rew             : return to beginning of edited files list (:args)
":brew            : buffer rewind
":sp fred.txt     : open fred.txt into a split
":sball,:sb       : Split all buffers (super)
":scrollbind      : in each split window
"}


" Split the Line at Cursor
nnoremap K i<cr><esc><right>
" html substitute
nnoremap xw :%s/<[^>]*>//gi<cr><CR>
"!sed 's/<[^>]*>//g' %


nnoremap <C-J> m`o<Esc>``
nnoremap <C-K> m`O<Esc>``

"map <S-Enter> O<Esc>j
"map <CR> o<Esc>k

"find files


"map zz :vsplit ~/zdotfiles/1/.zsh/al.zsh<CR><CR><ESC><ESC>Gp<ESC><C-W>q
"cab wz w ~/zdotfiles/1/

"cab wv w ~/zdotfiles/2/



fun! FindFiles()
    let $filename = input("Enter file name to find: ")
    let $error_file = $HOME."/.findfile.output"
    silent! exe "!find . -iname \"".$filename."\" \| xargs file \| perl -pe 's/:/:1:/' > ".$error_file
    cfile $error_file
    copen
    redraw!
endfun

"----------------------------------------
"----------------------------------------

"----------------------------------------

"-----------------------------
"   Pasteboard
"-----------------------------
"register :reg = line "
"maps = line "
"bookmarks"
"marks
"fold "!ls
"auto complete"
"tabs"
"buffers"
"windows"
map <F11> <C-N> 
"nmap <S-Down> V)<CR>
"}

"white space
"%s/[\r \t]\+$//
"let g:BASH_SyntaxCheckOptionsGlob  = "-O extglob"

"""""
cab w2a vsp ~/zdotfiles/9/web2py_arabic_admin.py


"nnoremap <F6> :set arabic<CR>
"nnoremap <S-F6>:set noarabic<CR>
"nnoremap <S-F6> :set rightleft<CR>
"nnoremap <C-F6> :set norightleft<CR>

"let c_space_errors=1
"highlight WhitespaceEOL ctermbg=red guibg=red
"match WhitespaceEOL /\s\+$/
"""""""""""""""""""""""""""""""""""""""""""}}}

""" DiffMode:							{{{2
set diffopt=filler,context:4,iwhite	" options for using diff mode
"set diffexpr		" expression used to obtain a diff file


" set the commandheight
set cmdheight=2
noremap wt :%s/[ ^I]*$//g
set selectmode=mouse

" do not keep a backup files
set nobackup
set nowritebackup

set noswapfile
" 4 spaces for indenting
set shiftwidth=4

" 4 stops
set tabstop=4

" Replace tabs with spaces
set expandtab
set autoread
set number
set smarttab
" 4 spaces in tab
set softtabstop=4
"remove redundant spaces
set shiftround
" Search
set smartcase

" //indent
set smartindent
" Always set auto indenting on
" inherit indent
set autoindent

" Set 52 lines for the display, 1 for the status line.
" and other display options
if has('gui_running')
" i like about 80 character width lines

  set textwidth=78 " disabled
" 2 for the command line
  set lines=52
" add columns for the Project plugin

  set columns=110
" enable use of mouse
  set mouse=a
endif

" keep 1000 lines of command line history
set history=1000

" show the cursor position all the time
set ruler

" show incomplete command in status bar
set showcmd


" do incremental searches (annoying but handy);
set incsearch

" Show tab characters. Visual Whitespace.
"set list
"set listchars=tab:>.
"set listchars=nbsp:-,tab:>-,trail:~,extends:>,precedes:<,eol:$

" Make searches case-sensitive only if they contain upper-case characters
set ignorecase
set smartcase


" smart search (override 'ic' when pattern has uppers)
set scs

" Set status line
set statusline=%<%f%=\ [%1*%M%*%n%R%H]\ %-19(%3l,%02c%03V%)%O'%02b'
hi User1 term=inverse,bold cterm=inverse,bold ctermfg=red

" GRB: clear the search buffer when hitting return
nnoremap <CR> :nohlsearch<CR>/<BS>

" Always display a status line at the bottom of the window
set laststatus=2

" Insert two spaces after a period with every joining of lines.

" I like this as it makes reading texts easier (for me, at least).
set joinspaces

" showmatch: Show the matching bracket for the last ')'?
set showmatch

" wrapping
set nowrap

"wrap by word
set linebreak

" Java specific stuff
let java_highlight_all=1
let java_highlight_debug=1

let java_ignore_javadoc=1
let java_highlight_functions=1
let java_mark_braces_in_parens_as_errors=1

" Commands for :Explore
let g:explVertical=1 " open vertical split winow
let g:explSplitRight=1 " Put new window to the right of the explorer
let g:explStartRight=0 " new windows go to right of explorer window

"for the TOhtml command
let html_use_css=1

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" when capslock is pressed - standart commands works too
command! Q quit
command! W write
" *****************************************************
" C Y G W I N

"set shell=C:/cygwin/bin/bash

"set shellcmdflag=--login\ -c
"set shellxquote=\"

" *****************************************************
" E N C O D I N G S"

"

set encoding=utf8
"set fileencodings=utf8,cp1251




" ************************************************************************
" C O M M A N D S
"


"switch to directory of current file
command! CD cd %:p:h

" ************************************************************************
" ************************************************************************
" K E Y M A P P I N G S
"
"map <Leader>e :Explore<cr>
"map <Leader>s :Sexplore<cr>

" pressing < or > will let you indent/unident selected lines

vnoremap < <gv
vnoremap > >gv

" Make p in Visual mode replace the selected text with the "" register.

vnoremap p <Esc>:let current_reg = @"<CR>gvs<C-R>=current_reg<CR><Esc>

" Make tab in v mode work like I think it should (keep highlighting):
"vmap <tab> >gv
"vmap <s-tab> <gv




map ,L :let @z=TimeStamp()<Cr>"zpa
"map ,datetime :let @z=strftime("%d %b %Y %X")<Cr>"zpa
" Map <c-s> to write current buffer.

map <c-s> :w<cr>
imap <c-s> <c-o><c-s>
imap <c-s> <esc><c-s>
"map ,date :let @z=strftime("%d %b %Y")<Cr>"zpa

" Buffer naviation
map <M-Left> :bprevious<CR>
map <M-Right> :bnext<CR>

" Select all.
map <c-a> ggVG

" Undo in insert mode.
imap <c-z> <c-o>u

" ************************************************************************
" B E G I N A U T O C O M M A N D S
"
" Enable file type detection.
" Use the default filetype settings, so that mail gets 'tw' set to 72,
" 'cindent' is on in C files, etc.
" Also load indent files, to automatically do language-dependent indenting.


" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler


" Normally don't automatically format 'text' as it is typed, only do this

" with comments, at 79 characters.
au BufNewFile,BufEnter *.c,*.h,*.java,*.jsp set formatoptions-=t tw=79
"# i , A B B R E V I A T I O N S

iabbrev wza tazjel@gmail.com

map <Del> D

iabbrev $$ ${:}<left><left>
"
abbr #b #!/bin/bash
abbr #p #!/bin/Python 




" abbreviation to manually enter a timestamp. Just type YTS in insert mode

iab YTS <C-R>=TimeStamp()<CR>



" Date/Time stamps
" %a - Day of the week
" %b - Month

" %d - Day of the month
" %Y - Year
" %H - Hour
" %M - Minute
" %S - Seconds
" %Z - Time Zone

iab YDATETIME <c-r>=strftime(": %a %b %d, %Y %H:%M:%S %Z")<cr>


" ************************************************************************
" F U N C T I O N S

"

" first add a function that returns a time stamp in the desired format
"if !exists("*TimeStamp")
    "fun TimeStamp()

        "return "Last-modified: " . strftime("%d %b %Y %X")
    "endfun
"endif



" do not redraw, when running macros..lazyredraw
set lz


set complete=.,w,b,u,t,i



" Folding"{
"----------------------------------------
"zf1G      : fold everything before this line [N]
" folding : hide sections to allow easier comparisons
"zf}                               : fold paragraph using motion
"v}zf                              : fold paragraph using visual
"zf'a                              : fold to mark
"zo                                : open fold
"zc                                : re-close fold
 "also visualise a section of code then type zf [N]
":help folding
"zfG      : fold everything after this line [N]
"----------------"}
iabbrev wf Capture<CR>
    \Process<CR>
    \Organize<CR>
    \Review<CR>
    \Done<CR>

iabbrev w10 0<CR>
    \1<CR>
    \2<CR>
    \3<CR>
    \4<CR>
    \5<CR>
    \6<CR>
    \7<CR>
    \8<CR>
    \9<CR>
    \10<CR>
"{
nnoremap <space> za
vnoremap <space> zf

"nmap <Space> zo

"set foldmethod=indent
set foldnestmax=2
set foldcolumn=2
" open folding using space

" Syntax
syntax on

" GRB: Always source python.vim for Python files
au FileType python source ~/.vim/scripts/python.vim

" GRB: Use custom python.vim syntax file
"au! Syntax python source ~/.vim/syntax/python.vim
let python_highlight_all = 1
let python_slow_sync = 1



" support highlighting
let python_highlight_all = 1
autocmd FileType python set omnifunc=pythoncomplete#Complete
au FileType py set autoindent
au FileType py set smartindent


set complete=""
set complete+=.
set complete+=k
set complete+=b
set complete+=t
set completeopt-=preview
set completeopt+=longest


autocmd BufRead *.py set smartindent
set cinwords=if,elif,else,for,while,try,except,finally,def,class

"let g:Tlist_Ctags_Cmd="D:/opt/ctags58/ctags.exe"
let g:Tlist_Show_One_File=1
let g:Tlist_GainFocus_On_ToggleOpen = 1
let g:Tlist_Auto_Update = 1
let g:Tlist_Compact_Format = 1
let Tlist_Use_Right_Window = 1



augr class
au!
au bufreadpost,filereadpost *.class %!d:\bin\jad.exe -noctor -ff -i -p %
au bufreadpost,filereadpost *.class set readonly
au bufreadpost,filereadpost *.class set ft=java
au bufreadpost,filereadpost *.class normal gg=G
au bufreadpost,filereadpost *.class set nomodified
augr END


" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

" Set ACK to be grep within vim

" Mark text width indication to 80 chars left
highlight OverLength ctermbg=red ctermfg=white guibg=#ffd9d9

" Smart way to move between windows
map <C-UP> <C-W>k
map <C-Right> <C-W>l
map <C-Left> <C-W>h
map <C-Down> <C-W>j




" Close all the buffers
map <leader>ba :1,1000 bd!<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove


" Close the current buffer
map <leader>bd :Bclose<cr>



" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Specify the behavior when switching between buffers 
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
" Remember info about open buffers on close
set viminfo^=%


""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Format the status line
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remap VIM 0 to first non-blank character
map 0 ^

" Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

if has("mac") || has("macunix")
  nmap <D-j> <M-j>
  nmap <D-k> <M-k>
  vmap <D-j> <M-j>
  vmap <D-k> <M-k>
endif

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vimgrep searching and cope displaying
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" When you press gv you vimgrep after the selected text
vnoremap <silent> gv :call VisualSelection('gv')<CR>

" Open vimgrep and put the cursor in the right position
map <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>

" Vimgreps in the current file
map <leader><space> :vimgrep // <C-R>%<C-A><right><right><right><right><right><right><right><right><right>

" When you press <leader>r you can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>

" Do :help cope if you are unsure what cope is. It's super useful!
"
" When you search with vimgrep, display your results in cope by doing:
"   <leader>cc
"
" To go to the next search result do:
"   <leader>n
"
" To go to the previous search results do:
"   <leader>p
"
map <leader>cc :botright cope<cr>
map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg
map <leader>n :cn<cr>
map <leader>p :cp<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm


" Quickly open a buffer for scripbble
map <leader>q :e ~/buffer<cr>

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction


" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction


"colorscheme desert
syntax on

au BufRead,BufNewFile *.txt set filetype=txt
au! Syntax newlang source ~/.vim/syntax/txt.vim
" Conflict Analysis & Resolution 
iabbrev www Conflict Analysis & Resolution
nnoremap <silent> <F6> :vsplit ~/zdotfiles/5/DCAR.snippets<CR>
nnoremap <silent> <S-F6> :vsplit ~/zdotfiles/5/Process/DCAR-key-words.txt<CR>

nnoremap <silent> <C-F6> :vsplit ~/zdotfiles/5/Process/phrase-bank.snippets<CR>
"/home/ahmed/Dropbox/C/Foundation/wiki-Foundations.txt
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
