snippet     class
abbr        class Class(...): ...
options     head
	class ${1:#:name}(${2:#:object}):
		def __init__(self, ${3}):
			${0}

snippet     classd
abbr        class Class(...): "..."
options     head
	class ${1:#:name}(${2:#:object}):
		"""${3:#:class documentation}"""
		def __init__(self, ${4}):
			"""${5:#:__init__ documentation}"""
			${0}

snippet     def
abbr        def function(...): ...
options     head
	def ${1:#:name}(${2}):
		${0:TARGET}

snippet     defd
abbr        def function(...): """..."""
options     head
	def ${1:#:name}(${2}):
		"""${3:#:function documentation}"""
		${0:TARGET}

snippet     defm
abbr        def method(self, ...): ...
options     head
	def ${1:#:name}(self, ${2}):
		${0:TARGET}

snippet     defmd
abbr        def method(self, ...): "..."
options     head
	def ${1:#:name}(self, ${2}):
		"""${3:#:method documentation}"""
		${0:TARGET}

snippet     elif
abbr        elif ...: ...
options     head
	elif ${1:#:condition}:
		${0}

snippet     else
abbr        else: ...
options     head
	else:
		${0}

snippet     fileidiom
abbr        f = None try: f = open(...) finally: ...
options     head
	${1:f} = None
	try:
		$1 = open(${2})
		${0:TARGET}
	finally:
	if $1:
		$1.close()

snippet     for
abbr        for ... in ...: ...
options     head
	for ${1:#:value} in ${2:#:list}:
		${0:TARGET}

snippet     if
abbr        if ...: ...
options     head
	if ${1:#:condition}:
		${0:TARGET}

snippet     ifmain
abbr        if __name__ == '__main__': ...
alias       main
options     head
	if __name__ == '__main__':
		${0:TARGET}

snippet     tryexcept
abbr        try: ... except ...: ...
options     head
	try:
		${1:TARGET}
	except ${2:#:ExceptionClass}:
		${3}

snippet     tryfinally
abbr        try: ... finally: ...
options     head
	try:
		${1:TARGET}
	finally:
		${2}

snippet     while
abbr        while ...: ...
options     head
	while ${1:#:condition}:
		${0:TARGET}

snippet     with
abbr        with open({file}) as :
options     head
	with open(${1:#:filename, mode}) as f:
		${0:TARGET}

snippet     filter
abbr        [x for x in {list} if {condition}]
	[$1 for ${1:x} in ${2:#:list} if ${3:#:condition}]

snippet     print
options     word
  print(${0:TARGET})

snippet     keyS
abbr        keyboard
options     head
    keyboardsend_keys('${0:}')

snippet   enginecreate_abbrevi
   engine.create_abbreviation(folder, description, abbr, contents) Create a text abbreviation

snippet   enginecreate_hotkey(
   engine.create_hotkey(folder, description, modifiers, key, contents) Create a text hotkey

snippet   enginecreate_phrase(
   engine.create_phrase(folder, description, contents) Create a text phrase

snippet   engineget_folder(tit
   engine.get_folder(title) Retrieve a folder by its title

snippet   engineget_macro_argu
   engine.get_macro_arguments() Get the arguments supplied to the current script via its macro

snippet   enginerun_script(des
   engine.run_script(description) Run an existing script using its description to look it up

snippet   engineset_return_val
   engine.set_return_value(val) Store a return value to be used by a phrase macro

snippet   keyboardfake_keypress(
   keyboard.fake_keypress(key, repeat=1) Fake a keypress

snippet   keyboardpress_key(key)
   keyboard.press_key(key) Send a key down event

snippet   keyboardrelease_key(ke
   keyboard.release_key(key) Send a key up event

snippet   keyboardsend_key(key,
   keyboard.send_key(key, repeat=1) Send a keyboard event

snippet   keyboardsend_keys(keyS
   keyboard.send_keys(keyString) Send a sequence of keys via keyboard events

snippet   keyboard.wait_for_keypress(self, key, modifiers=[], timeOut=100) Wait for a
   keyboard.wait_for_keypress(self, key, modifiers=[], timeOut=10.0) Wait for a keypress or key combination

snippet   mouseclick_absolute
   mouse.click_absolute(x, y, button) Send a mouse click relative to the screen (absolute)

snippet   mouseclick_relative
   mouse.click_relative(x, y, button) Send a mouse click relative to the active window

snippet   mouseclick_relative
   mouse.click_relative_self(x, y, button) Send a mouse click relative to the current mouse position

snippet   mouse.wait_for_click(self, button, timeOut=100) Wait for a
   mouse.wait_for_click(self, button, timeOut=10.0) Wait for a mouse click

snippet   clipboardfill_clipboard
   clipboard.fill_clipboard(contents) Copy text into the clipboard

snippet   clipboardfill_selection
   clipboard.fill_selection(contents) Copy text into the X selection

snippet   clipboardget_clipboard(
   clipboard.get_clipboard() Read text from the clipboard

snippet   clipboardget_selection(
   clipboard.get_selection() Read text from the X selection

snippet   dialogchoose_colour(
   dialog.choose_colour(title="Select Colour") Show a Colour Chooser dialog

snippet   dialogchoose_directo
   dialog.choose_directory(title="Select Directory", initialDir="~", rememberAs=None, **kwargs) Show a Directory Chooser dialog

snippet   dialogcombo_menu(opt
   dialog.combo_menu(options, title="Choose an option", message="Choose an option", **kwargs) Show a combobox menu

snippet   dialoginput_dialog(t
   dialog.input_dialog(title="Enter a value", message="Enter a value", default="", **kwargs) Show an input dialog

snippet   dialoglist_menu(opti
   dialog.list_menu(options, title="Choose a value", message="Choose a value", default=None, **kwargs) Show a single-selection list menu

snippet   dialoglist_menu_mult
   dialog.list_menu_multi(options, title="Choose one or more values", message="Choose one or more values", defaults=[], **kwargs) Show a multiple-selection list menu

snippet   dialogopen_file(titl
   dialog.open_file(title="Open File", initialDir="~", fileTypes="*|All Files", rememberAs=None, **kwargs) Show an Open File dialog

snippet   dialogpassword_dialo
   dialog.password_dialog(title="Enter password", message="Enter password", **kwargs) Show a password input dialog

snippet   dialogsave_file(titl
   dialog.save_file(title="Save As", initialDir="~", fileTypes="*|All Files", rememberAs=None, **kwargs) Show a Save As dialog

snippet   storeget_value(key)
   store.get_value(key) Get a value

snippet   storeremove_value(k
   store.remove_value(key) Remove a value

snippet   storeset_value(key,
   store.set_value(key, value) Store a value

snippet   systemcreate_file(fi
   system.create_file(fileName, contents="") Create a file with contents

snippet   systemexec_command(c
   system.exec_command(command, getOutput=True) Execute a shell command

snippet   windowactivate(title
   window.activate(title, switchDesktop=False, matchClass=False) Activate the specified window, giving it input focus

snippet   windowclose(title, m
   window.close(title, matchClass=False) Close the specified window gracefully

snippet   windowget_active_cla
   window.get_active_class() Get the class of the currently active window

snippet   windowget_active_geo
   window.get_active_geometry() Get the geometry of the currently active window

snippet   windowget_active_tit
   window.get_active_title() Get the visible title of the currently active window

snippet   windowmove_to_deskto
   window.move_to_desktop(title, deskNum, matchClass=False) Move the specified window to the given desktop

snippet   windowclose(title, x
   window.close(title, xOrigin=-1, yOrigin=-1, width=-1, height=-1, matchClass=False) Resize and/or move the specified window

snippet   windowset_property(t
   window.set_property(title, action, prop, matchClass=False) Set a property on the given window using the specified action

snippet   windowswitch_desktop
   window.switch_desktop(deskNum) Switch to the specified desktop

snippet   windowwait_for_exist
   window.wait_for_exist(title, timeOut=5) Wait for window with the given title to be created

snippet   windowwait_for_focus
   window.wait_for_focus(title, timeOut=5) Wait for window with the given title to have focus
snippet     zfile
abbr        read files
options     head
    essays = [[line.strip() for line in open(os.path.join("${0:file }")).readlines() if len(line.strip()) > 1] for essay in range(1, 21)]
